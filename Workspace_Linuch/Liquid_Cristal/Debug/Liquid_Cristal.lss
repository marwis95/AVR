
Liquid_Cristal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000023b8  0000244c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800074  00800074  00002460  2**0
                  ALLOC
  3 .stab         00003024  00000000  00000000  00002460  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015aa  00000000  00000000  00005484  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0b 06 	call	0xc16	; 0xc16 <main>
      8a:	0c 94 da 11 	jmp	0x23b4	; 0x23b4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_LCD_OutNibble>:
//
// Funkcja wystawiaj¹ca pó³bajt na magistralê danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	0f 92       	push	r0
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	89 83       	std	Y+1, r24	; 0x01
if(nibbleToWrite & 0x01)
      9e:	89 81       	ldd	r24, Y+1	; 0x01
      a0:	88 2f       	mov	r24, r24
      a2:	90 e0       	ldi	r25, 0x00	; 0
      a4:	81 70       	andi	r24, 0x01	; 1
      a6:	90 70       	andi	r25, 0x00	; 0
      a8:	88 23       	and	r24, r24
      aa:	51 f0       	breq	.+20     	; 0xc0 <_LCD_OutNibble+0x2e>
	LCD_DB4_PORT |= LCD_DB4;
      ac:	82 e3       	ldi	r24, 0x32	; 50
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	22 e3       	ldi	r18, 0x32	; 50
      b2:	30 e0       	ldi	r19, 0x00	; 0
      b4:	f9 01       	movw	r30, r18
      b6:	20 81       	ld	r18, Z
      b8:	24 60       	ori	r18, 0x04	; 4
      ba:	fc 01       	movw	r30, r24
      bc:	20 83       	st	Z, r18
      be:	09 c0       	rjmp	.+18     	; 0xd2 <_LCD_OutNibble+0x40>
else
	LCD_DB4_PORT  &= ~LCD_DB4;
      c0:	82 e3       	ldi	r24, 0x32	; 50
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	22 e3       	ldi	r18, 0x32	; 50
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	f9 01       	movw	r30, r18
      ca:	20 81       	ld	r18, Z
      cc:	2b 7f       	andi	r18, 0xFB	; 251
      ce:	fc 01       	movw	r30, r24
      d0:	20 83       	st	Z, r18

if(nibbleToWrite & 0x02)
      d2:	89 81       	ldd	r24, Y+1	; 0x01
      d4:	88 2f       	mov	r24, r24
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	82 70       	andi	r24, 0x02	; 2
      da:	90 70       	andi	r25, 0x00	; 0
      dc:	00 97       	sbiw	r24, 0x00	; 0
      de:	51 f0       	breq	.+20     	; 0xf4 <_LCD_OutNibble+0x62>
	LCD_DB5_PORT |= LCD_DB5;
      e0:	82 e3       	ldi	r24, 0x32	; 50
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	22 e3       	ldi	r18, 0x32	; 50
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	f9 01       	movw	r30, r18
      ea:	20 81       	ld	r18, Z
      ec:	28 60       	ori	r18, 0x08	; 8
      ee:	fc 01       	movw	r30, r24
      f0:	20 83       	st	Z, r18
      f2:	09 c0       	rjmp	.+18     	; 0x106 <_LCD_OutNibble+0x74>
else
	LCD_DB5_PORT  &= ~LCD_DB5;
      f4:	82 e3       	ldi	r24, 0x32	; 50
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	22 e3       	ldi	r18, 0x32	; 50
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	f9 01       	movw	r30, r18
      fe:	20 81       	ld	r18, Z
     100:	27 7f       	andi	r18, 0xF7	; 247
     102:	fc 01       	movw	r30, r24
     104:	20 83       	st	Z, r18

if(nibbleToWrite & 0x04)
     106:	89 81       	ldd	r24, Y+1	; 0x01
     108:	88 2f       	mov	r24, r24
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	84 70       	andi	r24, 0x04	; 4
     10e:	90 70       	andi	r25, 0x00	; 0
     110:	00 97       	sbiw	r24, 0x00	; 0
     112:	51 f0       	breq	.+20     	; 0x128 <_LCD_OutNibble+0x96>
	LCD_DB6_PORT |= LCD_DB6;
     114:	82 e3       	ldi	r24, 0x32	; 50
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	22 e3       	ldi	r18, 0x32	; 50
     11a:	30 e0       	ldi	r19, 0x00	; 0
     11c:	f9 01       	movw	r30, r18
     11e:	20 81       	ld	r18, Z
     120:	20 61       	ori	r18, 0x10	; 16
     122:	fc 01       	movw	r30, r24
     124:	20 83       	st	Z, r18
     126:	09 c0       	rjmp	.+18     	; 0x13a <_LCD_OutNibble+0xa8>
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     128:	82 e3       	ldi	r24, 0x32	; 50
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	22 e3       	ldi	r18, 0x32	; 50
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	f9 01       	movw	r30, r18
     132:	20 81       	ld	r18, Z
     134:	2f 7e       	andi	r18, 0xEF	; 239
     136:	fc 01       	movw	r30, r24
     138:	20 83       	st	Z, r18

if(nibbleToWrite & 0x08)
     13a:	89 81       	ldd	r24, Y+1	; 0x01
     13c:	88 2f       	mov	r24, r24
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	88 70       	andi	r24, 0x08	; 8
     142:	90 70       	andi	r25, 0x00	; 0
     144:	00 97       	sbiw	r24, 0x00	; 0
     146:	51 f0       	breq	.+20     	; 0x15c <_LCD_OutNibble+0xca>
	LCD_DB7_PORT |= LCD_DB7;
     148:	82 e3       	ldi	r24, 0x32	; 50
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	22 e3       	ldi	r18, 0x32	; 50
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	f9 01       	movw	r30, r18
     152:	20 81       	ld	r18, Z
     154:	20 62       	ori	r18, 0x20	; 32
     156:	fc 01       	movw	r30, r24
     158:	20 83       	st	Z, r18
     15a:	09 c0       	rjmp	.+18     	; 0x16e <_LCD_OutNibble+0xdc>
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     15c:	82 e3       	ldi	r24, 0x32	; 50
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	22 e3       	ldi	r18, 0x32	; 50
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	f9 01       	movw	r30, r18
     166:	20 81       	ld	r18, Z
     168:	2f 7d       	andi	r18, 0xDF	; 223
     16a:	fc 01       	movw	r30, r24
     16c:	20 83       	st	Z, r18
}
     16e:	0f 90       	pop	r0
     170:	cf 91       	pop	r28
     172:	df 91       	pop	r29
     174:	08 95       	ret

00000176 <_LCD_Write>:
//
// Funkcja zapisu bajtu do wywietacza (bez rozró¿nienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
     176:	0f 93       	push	r16
     178:	1f 93       	push	r17
     17a:	df 93       	push	r29
     17c:	cf 93       	push	r28
     17e:	cd b7       	in	r28, 0x3d	; 61
     180:	de b7       	in	r29, 0x3e	; 62
     182:	69 97       	sbiw	r28, 0x19	; 25
     184:	0f b6       	in	r0, 0x3f	; 63
     186:	f8 94       	cli
     188:	de bf       	out	0x3e, r29	; 62
     18a:	0f be       	out	0x3f, r0	; 63
     18c:	cd bf       	out	0x3d, r28	; 61
     18e:	89 8f       	std	Y+25, r24	; 0x19
LCD_E_PORT |= LCD_E;
     190:	82 e3       	ldi	r24, 0x32	; 50
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	22 e3       	ldi	r18, 0x32	; 50
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	f9 01       	movw	r30, r18
     19a:	20 81       	ld	r18, Z
     19c:	22 60       	ori	r18, 0x02	; 2
     19e:	fc 01       	movw	r30, r24
     1a0:	20 83       	st	Z, r18
_LCD_OutNibble(dataToWrite >> 4);
     1a2:	89 8d       	ldd	r24, Y+25	; 0x19
     1a4:	82 95       	swap	r24
     1a6:	8f 70       	andi	r24, 0x0F	; 15
     1a8:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
     1ac:	82 e3       	ldi	r24, 0x32	; 50
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	22 e3       	ldi	r18, 0x32	; 50
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	f9 01       	movw	r30, r18
     1b6:	20 81       	ld	r18, Z
     1b8:	2d 7f       	andi	r18, 0xFD	; 253
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 83       	st	Z, r18
LCD_E_PORT |= LCD_E;
     1be:	82 e3       	ldi	r24, 0x32	; 50
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	22 e3       	ldi	r18, 0x32	; 50
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	f9 01       	movw	r30, r18
     1c8:	20 81       	ld	r18, Z
     1ca:	22 60       	ori	r18, 0x02	; 2
     1cc:	fc 01       	movw	r30, r24
     1ce:	20 83       	st	Z, r18
_LCD_OutNibble(dataToWrite);
     1d0:	89 8d       	ldd	r24, Y+25	; 0x19
     1d2:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
     1d6:	82 e3       	ldi	r24, 0x32	; 50
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	22 e3       	ldi	r18, 0x32	; 50
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	f9 01       	movw	r30, r18
     1e0:	20 81       	ld	r18, Z
     1e2:	2d 7f       	andi	r18, 0xFD	; 253
     1e4:	fc 01       	movw	r30, r24
     1e6:	20 83       	st	Z, r18
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	a8 e4       	ldi	r26, 0x48	; 72
     1ee:	b2 e4       	ldi	r27, 0x42	; 66
     1f0:	89 83       	std	Y+1, r24	; 0x01
     1f2:	9a 83       	std	Y+2, r25	; 0x02
     1f4:	ab 83       	std	Y+3, r26	; 0x03
     1f6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     1f8:	69 81       	ldd	r22, Y+1	; 0x01
     1fa:	7a 81       	ldd	r23, Y+2	; 0x02
     1fc:	8b 81       	ldd	r24, Y+3	; 0x03
     1fe:	9c 81       	ldd	r25, Y+4	; 0x04
     200:	2b ea       	ldi	r18, 0xAB	; 171
     202:	3a ea       	ldi	r19, 0xAA	; 170
     204:	4a ea       	ldi	r20, 0xAA	; 170
     206:	5e e3       	ldi	r21, 0x3E	; 62
     208:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
     20c:	dc 01       	movw	r26, r24
     20e:	cb 01       	movw	r24, r22
     210:	8d 83       	std	Y+5, r24	; 0x05
     212:	9e 83       	std	Y+6, r25	; 0x06
     214:	af 83       	std	Y+7, r26	; 0x07
     216:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     218:	11 e0       	ldi	r17, 0x01	; 1
     21a:	6d 81       	ldd	r22, Y+5	; 0x05
     21c:	7e 81       	ldd	r23, Y+6	; 0x06
     21e:	8f 81       	ldd	r24, Y+7	; 0x07
     220:	98 85       	ldd	r25, Y+8	; 0x08
     222:	20 e0       	ldi	r18, 0x00	; 0
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	40 e8       	ldi	r20, 0x80	; 128
     228:	5f e3       	ldi	r21, 0x3F	; 63
     22a:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__ltsf2>
     22e:	88 23       	and	r24, r24
     230:	0c f0       	brlt	.+2      	; 0x234 <_LCD_Write+0xbe>
     232:	10 e0       	ldi	r17, 0x00	; 0
     234:	11 23       	and	r17, r17
     236:	19 f0       	breq	.+6      	; 0x23e <_LCD_Write+0xc8>
		__ticks = 1;
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	89 87       	std	Y+9, r24	; 0x09
     23c:	a3 c0       	rjmp	.+326    	; 0x384 <_LCD_Write+0x20e>
	else if (__tmp > 255)
     23e:	11 e0       	ldi	r17, 0x01	; 1
     240:	6d 81       	ldd	r22, Y+5	; 0x05
     242:	7e 81       	ldd	r23, Y+6	; 0x06
     244:	8f 81       	ldd	r24, Y+7	; 0x07
     246:	98 85       	ldd	r25, Y+8	; 0x08
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	4f e7       	ldi	r20, 0x7F	; 127
     24e:	53 e4       	ldi	r21, 0x43	; 67
     250:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__gtsf2>
     254:	18 16       	cp	r1, r24
     256:	0c f0       	brlt	.+2      	; 0x25a <_LCD_Write+0xe4>
     258:	10 e0       	ldi	r17, 0x00	; 0
     25a:	11 23       	and	r17, r17
     25c:	09 f4       	brne	.+2      	; 0x260 <_LCD_Write+0xea>
     25e:	89 c0       	rjmp	.+274    	; 0x372 <_LCD_Write+0x1fc>
	{
		_delay_ms(__us / 1000.0);
     260:	69 81       	ldd	r22, Y+1	; 0x01
     262:	7a 81       	ldd	r23, Y+2	; 0x02
     264:	8b 81       	ldd	r24, Y+3	; 0x03
     266:	9c 81       	ldd	r25, Y+4	; 0x04
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	4a e7       	ldi	r20, 0x7A	; 122
     26e:	54 e4       	ldi	r21, 0x44	; 68
     270:	0e 94 c5 0b 	call	0x178a	; 0x178a <__divsf3>
     274:	dc 01       	movw	r26, r24
     276:	cb 01       	movw	r24, r22
     278:	8a 87       	std	Y+10, r24	; 0x0a
     27a:	9b 87       	std	Y+11, r25	; 0x0b
     27c:	ac 87       	std	Y+12, r26	; 0x0c
     27e:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     280:	6a 85       	ldd	r22, Y+10	; 0x0a
     282:	7b 85       	ldd	r23, Y+11	; 0x0b
     284:	8c 85       	ldd	r24, Y+12	; 0x0c
     286:	9d 85       	ldd	r25, Y+13	; 0x0d
     288:	20 e0       	ldi	r18, 0x00	; 0
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	4a e7       	ldi	r20, 0x7A	; 122
     28e:	53 e4       	ldi	r21, 0x43	; 67
     290:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
     294:	dc 01       	movw	r26, r24
     296:	cb 01       	movw	r24, r22
     298:	8e 87       	std	Y+14, r24	; 0x0e
     29a:	9f 87       	std	Y+15, r25	; 0x0f
     29c:	a8 8b       	std	Y+16, r26	; 0x10
     29e:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     2a0:	11 e0       	ldi	r17, 0x01	; 1
     2a2:	6e 85       	ldd	r22, Y+14	; 0x0e
     2a4:	7f 85       	ldd	r23, Y+15	; 0x0f
     2a6:	88 89       	ldd	r24, Y+16	; 0x10
     2a8:	99 89       	ldd	r25, Y+17	; 0x11
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	40 e8       	ldi	r20, 0x80	; 128
     2b0:	5f e3       	ldi	r21, 0x3F	; 63
     2b2:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__ltsf2>
     2b6:	88 23       	and	r24, r24
     2b8:	0c f0       	brlt	.+2      	; 0x2bc <_LCD_Write+0x146>
     2ba:	10 e0       	ldi	r17, 0x00	; 0
     2bc:	11 23       	and	r17, r17
     2be:	29 f0       	breq	.+10     	; 0x2ca <_LCD_Write+0x154>
		__ticks = 1;
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	9b 8b       	std	Y+19, r25	; 0x13
     2c6:	8a 8b       	std	Y+18, r24	; 0x12
     2c8:	46 c0       	rjmp	.+140    	; 0x356 <_LCD_Write+0x1e0>
	else if (__tmp > 65535)
     2ca:	11 e0       	ldi	r17, 0x01	; 1
     2cc:	6e 85       	ldd	r22, Y+14	; 0x0e
     2ce:	7f 85       	ldd	r23, Y+15	; 0x0f
     2d0:	88 89       	ldd	r24, Y+16	; 0x10
     2d2:	99 89       	ldd	r25, Y+17	; 0x11
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	3f ef       	ldi	r19, 0xFF	; 255
     2d8:	4f e7       	ldi	r20, 0x7F	; 127
     2da:	57 e4       	ldi	r21, 0x47	; 71
     2dc:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__gtsf2>
     2e0:	18 16       	cp	r1, r24
     2e2:	0c f0       	brlt	.+2      	; 0x2e6 <_LCD_Write+0x170>
     2e4:	10 e0       	ldi	r17, 0x00	; 0
     2e6:	11 23       	and	r17, r17
     2e8:	61 f1       	breq	.+88     	; 0x342 <_LCD_Write+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2ea:	6a 85       	ldd	r22, Y+10	; 0x0a
     2ec:	7b 85       	ldd	r23, Y+11	; 0x0b
     2ee:	8c 85       	ldd	r24, Y+12	; 0x0c
     2f0:	9d 85       	ldd	r25, Y+13	; 0x0d
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	40 e2       	ldi	r20, 0x20	; 32
     2f8:	51 e4       	ldi	r21, 0x41	; 65
     2fa:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
     2fe:	dc 01       	movw	r26, r24
     300:	cb 01       	movw	r24, r22
     302:	bc 01       	movw	r22, r24
     304:	cd 01       	movw	r24, r26
     306:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fixunssfsi>
     30a:	dc 01       	movw	r26, r24
     30c:	cb 01       	movw	r24, r22
     30e:	9b 8b       	std	Y+19, r25	; 0x13
     310:	8a 8b       	std	Y+18, r24	; 0x12
     312:	12 c0       	rjmp	.+36     	; 0x338 <_LCD_Write+0x1c2>
     314:	89 e1       	ldi	r24, 0x19	; 25
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	9d 8b       	std	Y+21, r25	; 0x15
     31a:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     31c:	8c 89       	ldd	r24, Y+20	; 0x14
     31e:	9d 89       	ldd	r25, Y+21	; 0x15
     320:	8c 01       	movw	r16, r24
     322:	c8 01       	movw	r24, r16
     324:	01 97       	sbiw	r24, 0x01	; 1
     326:	f1 f7       	brne	.-4      	; 0x324 <_LCD_Write+0x1ae>
     328:	8c 01       	movw	r16, r24
     32a:	1d 8b       	std	Y+21, r17	; 0x15
     32c:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     32e:	8a 89       	ldd	r24, Y+18	; 0x12
     330:	9b 89       	ldd	r25, Y+19	; 0x13
     332:	01 97       	sbiw	r24, 0x01	; 1
     334:	9b 8b       	std	Y+19, r25	; 0x13
     336:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     338:	8a 89       	ldd	r24, Y+18	; 0x12
     33a:	9b 89       	ldd	r25, Y+19	; 0x13
     33c:	00 97       	sbiw	r24, 0x00	; 0
     33e:	51 f7       	brne	.-44     	; 0x314 <_LCD_Write+0x19e>
     340:	28 c0       	rjmp	.+80     	; 0x392 <_LCD_Write+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     342:	6e 85       	ldd	r22, Y+14	; 0x0e
     344:	7f 85       	ldd	r23, Y+15	; 0x0f
     346:	88 89       	ldd	r24, Y+16	; 0x10
     348:	99 89       	ldd	r25, Y+17	; 0x11
     34a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fixunssfsi>
     34e:	dc 01       	movw	r26, r24
     350:	cb 01       	movw	r24, r22
     352:	9b 8b       	std	Y+19, r25	; 0x13
     354:	8a 8b       	std	Y+18, r24	; 0x12
     356:	8a 89       	ldd	r24, Y+18	; 0x12
     358:	9b 89       	ldd	r25, Y+19	; 0x13
     35a:	9f 8b       	std	Y+23, r25	; 0x17
     35c:	8e 8b       	std	Y+22, r24	; 0x16
     35e:	8e 89       	ldd	r24, Y+22	; 0x16
     360:	9f 89       	ldd	r25, Y+23	; 0x17
     362:	8c 01       	movw	r16, r24
     364:	f8 01       	movw	r30, r16
     366:	31 97       	sbiw	r30, 0x01	; 1
     368:	f1 f7       	brne	.-4      	; 0x366 <_LCD_Write+0x1f0>
     36a:	8f 01       	movw	r16, r30
     36c:	1f 8b       	std	Y+23, r17	; 0x17
     36e:	0e 8b       	std	Y+22, r16	; 0x16
     370:	10 c0       	rjmp	.+32     	; 0x392 <_LCD_Write+0x21c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     372:	6d 81       	ldd	r22, Y+5	; 0x05
     374:	7e 81       	ldd	r23, Y+6	; 0x06
     376:	8f 81       	ldd	r24, Y+7	; 0x07
     378:	98 85       	ldd	r25, Y+8	; 0x08
     37a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fixunssfsi>
     37e:	dc 01       	movw	r26, r24
     380:	cb 01       	movw	r24, r22
     382:	89 87       	std	Y+9, r24	; 0x09
     384:	89 85       	ldd	r24, Y+9	; 0x09
     386:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     388:	88 8d       	ldd	r24, Y+24	; 0x18
     38a:	18 2f       	mov	r17, r24
     38c:	1a 95       	dec	r17
     38e:	f1 f7       	brne	.-4      	; 0x38c <_LCD_Write+0x216>
     390:	18 8f       	std	Y+24, r17	; 0x18
_delay_us(50);
}
     392:	69 96       	adiw	r28, 0x19	; 25
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
     39e:	cf 91       	pop	r28
     3a0:	df 91       	pop	r29
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	08 95       	ret

000003a8 <LCD_WriteCommand>:
//
// Funkcja zapisu rozkazu do wywietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
     3a8:	df 93       	push	r29
     3aa:	cf 93       	push	r28
     3ac:	0f 92       	push	r0
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
     3b2:	89 83       	std	Y+1, r24	; 0x01
LCD_RS_PORT &= ~LCD_RS;
     3b4:	82 e3       	ldi	r24, 0x32	; 50
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	22 e3       	ldi	r18, 0x32	; 50
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	f9 01       	movw	r30, r18
     3be:	20 81       	ld	r18, Z
     3c0:	2e 7f       	andi	r18, 0xFE	; 254
     3c2:	fc 01       	movw	r30, r24
     3c4:	20 83       	st	Z, r18
_LCD_Write(commandToWrite);
     3c6:	89 81       	ldd	r24, Y+1	; 0x01
     3c8:	0e 94 bb 00 	call	0x176	; 0x176 <_LCD_Write>
}
     3cc:	0f 90       	pop	r0
     3ce:	cf 91       	pop	r28
     3d0:	df 91       	pop	r29
     3d2:	08 95       	ret

000003d4 <LCD_WriteData>:
//
// Funkcja zapisu danych do pamiêci wywietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
     3d4:	df 93       	push	r29
     3d6:	cf 93       	push	r28
     3d8:	0f 92       	push	r0
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
     3de:	89 83       	std	Y+1, r24	; 0x01
LCD_RS_PORT |= LCD_RS;
     3e0:	82 e3       	ldi	r24, 0x32	; 50
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	22 e3       	ldi	r18, 0x32	; 50
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	f9 01       	movw	r30, r18
     3ea:	20 81       	ld	r18, Z
     3ec:	21 60       	ori	r18, 0x01	; 1
     3ee:	fc 01       	movw	r30, r24
     3f0:	20 83       	st	Z, r18
_LCD_Write(dataToWrite);
     3f2:	89 81       	ldd	r24, Y+1	; 0x01
     3f4:	0e 94 bb 00 	call	0x176	; 0x176 <_LCD_Write>
}
     3f8:	0f 90       	pop	r0
     3fa:	cf 91       	pop	r28
     3fc:	df 91       	pop	r29
     3fe:	08 95       	ret

00000400 <LCD_WriteText>:
//
// Funkcja wywietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
     400:	df 93       	push	r29
     402:	cf 93       	push	r28
     404:	00 d0       	rcall	.+0      	; 0x406 <LCD_WriteText+0x6>
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
     40a:	9a 83       	std	Y+2, r25	; 0x02
     40c:	89 83       	std	Y+1, r24	; 0x01
while(*text)
     40e:	0c c0       	rjmp	.+24     	; 0x428 <LCD_WriteText+0x28>
  LCD_WriteData(*text++);
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	9a 81       	ldd	r25, Y+2	; 0x02
     414:	fc 01       	movw	r30, r24
     416:	20 81       	ld	r18, Z
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	9a 81       	ldd	r25, Y+2	; 0x02
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	9a 83       	std	Y+2, r25	; 0x02
     420:	89 83       	std	Y+1, r24	; 0x01
     422:	82 2f       	mov	r24, r18
     424:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <LCD_WriteData>
// Funkcja wywietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
while(*text)
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	fc 01       	movw	r30, r24
     42e:	80 81       	ld	r24, Z
     430:	88 23       	and	r24, r24
     432:	71 f7       	brne	.-36     	; 0x410 <LCD_WriteText+0x10>
  LCD_WriteData(*text++);
}
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	cf 91       	pop	r28
     43a:	df 91       	pop	r29
     43c:	08 95       	ret

0000043e <LCD_GoTo>:
//
// Funkcja ustawienia wspó³rzêdnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
     43e:	df 93       	push	r29
     440:	cf 93       	push	r28
     442:	00 d0       	rcall	.+0      	; 0x444 <LCD_GoTo+0x6>
     444:	cd b7       	in	r28, 0x3d	; 61
     446:	de b7       	in	r29, 0x3e	; 62
     448:	89 83       	std	Y+1, r24	; 0x01
     44a:	6a 83       	std	Y+2, r22	; 0x02
LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
     44c:	8a 81       	ldd	r24, Y+2	; 0x02
     44e:	98 2f       	mov	r25, r24
     450:	92 95       	swap	r25
     452:	99 0f       	add	r25, r25
     454:	99 0f       	add	r25, r25
     456:	90 7c       	andi	r25, 0xC0	; 192
     458:	89 81       	ldd	r24, Y+1	; 0x01
     45a:	89 0f       	add	r24, r25
     45c:	80 68       	ori	r24, 0x80	; 128
     45e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_WriteCommand>
}
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	cf 91       	pop	r28
     468:	df 91       	pop	r29
     46a:	08 95       	ret

0000046c <LCD_Clear>:
//
// Funkcja czyszczenia ekranu wywietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Clear(void)
{
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	df 93       	push	r29
     472:	cf 93       	push	r28
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	2e 97       	sbiw	r28, 0x0e	; 14
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	de bf       	out	0x3e, r29	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	cd bf       	out	0x3d, r28	; 61
LCD_WriteCommand(HD44780_CLEAR);
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_WriteCommand>
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	a0 e0       	ldi	r26, 0x00	; 0
     490:	b0 e4       	ldi	r27, 0x40	; 64
     492:	89 83       	std	Y+1, r24	; 0x01
     494:	9a 83       	std	Y+2, r25	; 0x02
     496:	ab 83       	std	Y+3, r26	; 0x03
     498:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     49a:	69 81       	ldd	r22, Y+1	; 0x01
     49c:	7a 81       	ldd	r23, Y+2	; 0x02
     49e:	8b 81       	ldd	r24, Y+3	; 0x03
     4a0:	9c 81       	ldd	r25, Y+4	; 0x04
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	4a e7       	ldi	r20, 0x7A	; 122
     4a8:	53 e4       	ldi	r21, 0x43	; 67
     4aa:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
     4ae:	dc 01       	movw	r26, r24
     4b0:	cb 01       	movw	r24, r22
     4b2:	8d 83       	std	Y+5, r24	; 0x05
     4b4:	9e 83       	std	Y+6, r25	; 0x06
     4b6:	af 83       	std	Y+7, r26	; 0x07
     4b8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     4ba:	11 e0       	ldi	r17, 0x01	; 1
     4bc:	6d 81       	ldd	r22, Y+5	; 0x05
     4be:	7e 81       	ldd	r23, Y+6	; 0x06
     4c0:	8f 81       	ldd	r24, Y+7	; 0x07
     4c2:	98 85       	ldd	r25, Y+8	; 0x08
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	40 e8       	ldi	r20, 0x80	; 128
     4ca:	5f e3       	ldi	r21, 0x3F	; 63
     4cc:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__ltsf2>
     4d0:	88 23       	and	r24, r24
     4d2:	0c f0       	brlt	.+2      	; 0x4d6 <LCD_Clear+0x6a>
     4d4:	10 e0       	ldi	r17, 0x00	; 0
     4d6:	11 23       	and	r17, r17
     4d8:	29 f0       	breq	.+10     	; 0x4e4 <LCD_Clear+0x78>
		__ticks = 1;
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	9a 87       	std	Y+10, r25	; 0x0a
     4e0:	89 87       	std	Y+9, r24	; 0x09
     4e2:	46 c0       	rjmp	.+140    	; 0x570 <LCD_Clear+0x104>
	else if (__tmp > 65535)
     4e4:	11 e0       	ldi	r17, 0x01	; 1
     4e6:	6d 81       	ldd	r22, Y+5	; 0x05
     4e8:	7e 81       	ldd	r23, Y+6	; 0x06
     4ea:	8f 81       	ldd	r24, Y+7	; 0x07
     4ec:	98 85       	ldd	r25, Y+8	; 0x08
     4ee:	20 e0       	ldi	r18, 0x00	; 0
     4f0:	3f ef       	ldi	r19, 0xFF	; 255
     4f2:	4f e7       	ldi	r20, 0x7F	; 127
     4f4:	57 e4       	ldi	r21, 0x47	; 71
     4f6:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__gtsf2>
     4fa:	18 16       	cp	r1, r24
     4fc:	0c f0       	brlt	.+2      	; 0x500 <LCD_Clear+0x94>
     4fe:	10 e0       	ldi	r17, 0x00	; 0
     500:	11 23       	and	r17, r17
     502:	61 f1       	breq	.+88     	; 0x55c <LCD_Clear+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     504:	69 81       	ldd	r22, Y+1	; 0x01
     506:	7a 81       	ldd	r23, Y+2	; 0x02
     508:	8b 81       	ldd	r24, Y+3	; 0x03
     50a:	9c 81       	ldd	r25, Y+4	; 0x04
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	40 e2       	ldi	r20, 0x20	; 32
     512:	51 e4       	ldi	r21, 0x41	; 65
     514:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
     518:	dc 01       	movw	r26, r24
     51a:	cb 01       	movw	r24, r22
     51c:	bc 01       	movw	r22, r24
     51e:	cd 01       	movw	r24, r26
     520:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fixunssfsi>
     524:	dc 01       	movw	r26, r24
     526:	cb 01       	movw	r24, r22
     528:	9a 87       	std	Y+10, r25	; 0x0a
     52a:	89 87       	std	Y+9, r24	; 0x09
     52c:	12 c0       	rjmp	.+36     	; 0x552 <LCD_Clear+0xe6>
     52e:	89 e1       	ldi	r24, 0x19	; 25
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	9c 87       	std	Y+12, r25	; 0x0c
     534:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     536:	8b 85       	ldd	r24, Y+11	; 0x0b
     538:	9c 85       	ldd	r25, Y+12	; 0x0c
     53a:	8c 01       	movw	r16, r24
     53c:	c8 01       	movw	r24, r16
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	f1 f7       	brne	.-4      	; 0x53e <LCD_Clear+0xd2>
     542:	8c 01       	movw	r16, r24
     544:	1c 87       	std	Y+12, r17	; 0x0c
     546:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     548:	89 85       	ldd	r24, Y+9	; 0x09
     54a:	9a 85       	ldd	r25, Y+10	; 0x0a
     54c:	01 97       	sbiw	r24, 0x01	; 1
     54e:	9a 87       	std	Y+10, r25	; 0x0a
     550:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     552:	89 85       	ldd	r24, Y+9	; 0x09
     554:	9a 85       	ldd	r25, Y+10	; 0x0a
     556:	00 97       	sbiw	r24, 0x00	; 0
     558:	51 f7       	brne	.-44     	; 0x52e <LCD_Clear+0xc2>
     55a:	17 c0       	rjmp	.+46     	; 0x58a <LCD_Clear+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     55c:	6d 81       	ldd	r22, Y+5	; 0x05
     55e:	7e 81       	ldd	r23, Y+6	; 0x06
     560:	8f 81       	ldd	r24, Y+7	; 0x07
     562:	98 85       	ldd	r25, Y+8	; 0x08
     564:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fixunssfsi>
     568:	dc 01       	movw	r26, r24
     56a:	cb 01       	movw	r24, r22
     56c:	9a 87       	std	Y+10, r25	; 0x0a
     56e:	89 87       	std	Y+9, r24	; 0x09
     570:	89 85       	ldd	r24, Y+9	; 0x09
     572:	9a 85       	ldd	r25, Y+10	; 0x0a
     574:	9e 87       	std	Y+14, r25	; 0x0e
     576:	8d 87       	std	Y+13, r24	; 0x0d
     578:	8d 85       	ldd	r24, Y+13	; 0x0d
     57a:	9e 85       	ldd	r25, Y+14	; 0x0e
     57c:	8c 01       	movw	r16, r24
     57e:	c8 01       	movw	r24, r16
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	f1 f7       	brne	.-4      	; 0x580 <LCD_Clear+0x114>
     584:	8c 01       	movw	r16, r24
     586:	1e 87       	std	Y+14, r17	; 0x0e
     588:	0d 87       	std	Y+13, r16	; 0x0d
_delay_ms(2);
}
     58a:	2e 96       	adiw	r28, 0x0e	; 14
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	de bf       	out	0x3e, r29	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	cd bf       	out	0x3d, r28	; 61
     596:	cf 91       	pop	r28
     598:	df 91       	pop	r29
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	08 95       	ret

000005a0 <LCD_Home>:
//
// Funkcja przywrócenia pocz¹tkowych wspó³rzêdnych wywietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Home(void)
{
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	df 93       	push	r29
     5a6:	cf 93       	push	r28
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
     5ac:	2e 97       	sbiw	r28, 0x0e	; 14
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	f8 94       	cli
     5b2:	de bf       	out	0x3e, r29	; 62
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	cd bf       	out	0x3d, r28	; 61
LCD_WriteCommand(HD44780_HOME);
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_WriteCommand>
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	a0 e0       	ldi	r26, 0x00	; 0
     5c4:	b0 e4       	ldi	r27, 0x40	; 64
     5c6:	89 83       	std	Y+1, r24	; 0x01
     5c8:	9a 83       	std	Y+2, r25	; 0x02
     5ca:	ab 83       	std	Y+3, r26	; 0x03
     5cc:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     5ce:	69 81       	ldd	r22, Y+1	; 0x01
     5d0:	7a 81       	ldd	r23, Y+2	; 0x02
     5d2:	8b 81       	ldd	r24, Y+3	; 0x03
     5d4:	9c 81       	ldd	r25, Y+4	; 0x04
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	4a e7       	ldi	r20, 0x7A	; 122
     5dc:	53 e4       	ldi	r21, 0x43	; 67
     5de:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
     5e2:	dc 01       	movw	r26, r24
     5e4:	cb 01       	movw	r24, r22
     5e6:	8d 83       	std	Y+5, r24	; 0x05
     5e8:	9e 83       	std	Y+6, r25	; 0x06
     5ea:	af 83       	std	Y+7, r26	; 0x07
     5ec:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     5ee:	11 e0       	ldi	r17, 0x01	; 1
     5f0:	6d 81       	ldd	r22, Y+5	; 0x05
     5f2:	7e 81       	ldd	r23, Y+6	; 0x06
     5f4:	8f 81       	ldd	r24, Y+7	; 0x07
     5f6:	98 85       	ldd	r25, Y+8	; 0x08
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	40 e8       	ldi	r20, 0x80	; 128
     5fe:	5f e3       	ldi	r21, 0x3F	; 63
     600:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__ltsf2>
     604:	88 23       	and	r24, r24
     606:	0c f0       	brlt	.+2      	; 0x60a <LCD_Home+0x6a>
     608:	10 e0       	ldi	r17, 0x00	; 0
     60a:	11 23       	and	r17, r17
     60c:	29 f0       	breq	.+10     	; 0x618 <LCD_Home+0x78>
		__ticks = 1;
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	9a 87       	std	Y+10, r25	; 0x0a
     614:	89 87       	std	Y+9, r24	; 0x09
     616:	46 c0       	rjmp	.+140    	; 0x6a4 <LCD_Home+0x104>
	else if (__tmp > 65535)
     618:	11 e0       	ldi	r17, 0x01	; 1
     61a:	6d 81       	ldd	r22, Y+5	; 0x05
     61c:	7e 81       	ldd	r23, Y+6	; 0x06
     61e:	8f 81       	ldd	r24, Y+7	; 0x07
     620:	98 85       	ldd	r25, Y+8	; 0x08
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	3f ef       	ldi	r19, 0xFF	; 255
     626:	4f e7       	ldi	r20, 0x7F	; 127
     628:	57 e4       	ldi	r21, 0x47	; 71
     62a:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__gtsf2>
     62e:	18 16       	cp	r1, r24
     630:	0c f0       	brlt	.+2      	; 0x634 <LCD_Home+0x94>
     632:	10 e0       	ldi	r17, 0x00	; 0
     634:	11 23       	and	r17, r17
     636:	61 f1       	breq	.+88     	; 0x690 <LCD_Home+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     638:	69 81       	ldd	r22, Y+1	; 0x01
     63a:	7a 81       	ldd	r23, Y+2	; 0x02
     63c:	8b 81       	ldd	r24, Y+3	; 0x03
     63e:	9c 81       	ldd	r25, Y+4	; 0x04
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	40 e2       	ldi	r20, 0x20	; 32
     646:	51 e4       	ldi	r21, 0x41	; 65
     648:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
     64c:	dc 01       	movw	r26, r24
     64e:	cb 01       	movw	r24, r22
     650:	bc 01       	movw	r22, r24
     652:	cd 01       	movw	r24, r26
     654:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fixunssfsi>
     658:	dc 01       	movw	r26, r24
     65a:	cb 01       	movw	r24, r22
     65c:	9a 87       	std	Y+10, r25	; 0x0a
     65e:	89 87       	std	Y+9, r24	; 0x09
     660:	12 c0       	rjmp	.+36     	; 0x686 <LCD_Home+0xe6>
     662:	89 e1       	ldi	r24, 0x19	; 25
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	9c 87       	std	Y+12, r25	; 0x0c
     668:	8b 87       	std	Y+11, r24	; 0x0b
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	8c 01       	movw	r16, r24
     670:	c8 01       	movw	r24, r16
     672:	01 97       	sbiw	r24, 0x01	; 1
     674:	f1 f7       	brne	.-4      	; 0x672 <LCD_Home+0xd2>
     676:	8c 01       	movw	r16, r24
     678:	1c 87       	std	Y+12, r17	; 0x0c
     67a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     67c:	89 85       	ldd	r24, Y+9	; 0x09
     67e:	9a 85       	ldd	r25, Y+10	; 0x0a
     680:	01 97       	sbiw	r24, 0x01	; 1
     682:	9a 87       	std	Y+10, r25	; 0x0a
     684:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     686:	89 85       	ldd	r24, Y+9	; 0x09
     688:	9a 85       	ldd	r25, Y+10	; 0x0a
     68a:	00 97       	sbiw	r24, 0x00	; 0
     68c:	51 f7       	brne	.-44     	; 0x662 <LCD_Home+0xc2>
     68e:	17 c0       	rjmp	.+46     	; 0x6be <LCD_Home+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     690:	6d 81       	ldd	r22, Y+5	; 0x05
     692:	7e 81       	ldd	r23, Y+6	; 0x06
     694:	8f 81       	ldd	r24, Y+7	; 0x07
     696:	98 85       	ldd	r25, Y+8	; 0x08
     698:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fixunssfsi>
     69c:	dc 01       	movw	r26, r24
     69e:	cb 01       	movw	r24, r22
     6a0:	9a 87       	std	Y+10, r25	; 0x0a
     6a2:	89 87       	std	Y+9, r24	; 0x09
     6a4:	89 85       	ldd	r24, Y+9	; 0x09
     6a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6a8:	9e 87       	std	Y+14, r25	; 0x0e
     6aa:	8d 87       	std	Y+13, r24	; 0x0d
     6ac:	8d 85       	ldd	r24, Y+13	; 0x0d
     6ae:	9e 85       	ldd	r25, Y+14	; 0x0e
     6b0:	8c 01       	movw	r16, r24
     6b2:	c8 01       	movw	r24, r16
     6b4:	01 97       	sbiw	r24, 0x01	; 1
     6b6:	f1 f7       	brne	.-4      	; 0x6b4 <LCD_Home+0x114>
     6b8:	8c 01       	movw	r16, r24
     6ba:	1e 87       	std	Y+14, r17	; 0x0e
     6bc:	0d 87       	std	Y+13, r16	; 0x0d
_delay_ms(2);
}
     6be:	2e 96       	adiw	r28, 0x0e	; 14
     6c0:	0f b6       	in	r0, 0x3f	; 63
     6c2:	f8 94       	cli
     6c4:	de bf       	out	0x3e, r29	; 62
     6c6:	0f be       	out	0x3f, r0	; 63
     6c8:	cd bf       	out	0x3d, r28	; 61
     6ca:	cf 91       	pop	r28
     6cc:	df 91       	pop	r29
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	08 95       	ret

000006d4 <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	df 93       	push	r29
     6da:	cf 93       	push	r28
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
     6e0:	e9 97       	sbiw	r28, 0x39	; 57
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	f8 94       	cli
     6e6:	de bf       	out	0x3e, r29	; 62
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	cd bf       	out	0x3d, r28	; 61
unsigned char i;
LCD_DB4_DIR |= LCD_DB4; // Konfiguracja kierunku pracy wyprowadzeñ
     6ec:	81 e3       	ldi	r24, 0x31	; 49
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	21 e3       	ldi	r18, 0x31	; 49
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	f9 01       	movw	r30, r18
     6f6:	20 81       	ld	r18, Z
     6f8:	24 60       	ori	r18, 0x04	; 4
     6fa:	fc 01       	movw	r30, r24
     6fc:	20 83       	st	Z, r18
LCD_DB5_DIR |= LCD_DB5; //
     6fe:	81 e3       	ldi	r24, 0x31	; 49
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	21 e3       	ldi	r18, 0x31	; 49
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	f9 01       	movw	r30, r18
     708:	20 81       	ld	r18, Z
     70a:	28 60       	ori	r18, 0x08	; 8
     70c:	fc 01       	movw	r30, r24
     70e:	20 83       	st	Z, r18
LCD_DB6_DIR |= LCD_DB6; //
     710:	81 e3       	ldi	r24, 0x31	; 49
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	21 e3       	ldi	r18, 0x31	; 49
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	f9 01       	movw	r30, r18
     71a:	20 81       	ld	r18, Z
     71c:	20 61       	ori	r18, 0x10	; 16
     71e:	fc 01       	movw	r30, r24
     720:	20 83       	st	Z, r18
LCD_DB7_DIR |= LCD_DB7; //
     722:	81 e3       	ldi	r24, 0x31	; 49
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	21 e3       	ldi	r18, 0x31	; 49
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	f9 01       	movw	r30, r18
     72c:	20 81       	ld	r18, Z
     72e:	20 62       	ori	r18, 0x20	; 32
     730:	fc 01       	movw	r30, r24
     732:	20 83       	st	Z, r18
LCD_E_DIR 	|= LCD_E;   //
     734:	81 e3       	ldi	r24, 0x31	; 49
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	21 e3       	ldi	r18, 0x31	; 49
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	f9 01       	movw	r30, r18
     73e:	20 81       	ld	r18, Z
     740:	22 60       	ori	r18, 0x02	; 2
     742:	fc 01       	movw	r30, r24
     744:	20 83       	st	Z, r18
LCD_RS_DIR 	|= LCD_RS;  //
     746:	81 e3       	ldi	r24, 0x31	; 49
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	21 e3       	ldi	r18, 0x31	; 49
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	f9 01       	movw	r30, r18
     750:	20 81       	ld	r18, Z
     752:	21 60       	ori	r18, 0x01	; 1
     754:	fc 01       	movw	r30, r24
     756:	20 83       	st	Z, r18
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	a0 e7       	ldi	r26, 0x70	; 112
     75e:	b1 e4       	ldi	r27, 0x41	; 65
     760:	8a 83       	std	Y+2, r24	; 0x02
     762:	9b 83       	std	Y+3, r25	; 0x03
     764:	ac 83       	std	Y+4, r26	; 0x04
     766:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     768:	6a 81       	ldd	r22, Y+2	; 0x02
     76a:	7b 81       	ldd	r23, Y+3	; 0x03
     76c:	8c 81       	ldd	r24, Y+4	; 0x04
     76e:	9d 81       	ldd	r25, Y+5	; 0x05
     770:	20 e0       	ldi	r18, 0x00	; 0
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	4a e7       	ldi	r20, 0x7A	; 122
     776:	53 e4       	ldi	r21, 0x43	; 67
     778:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
     77c:	dc 01       	movw	r26, r24
     77e:	cb 01       	movw	r24, r22
     780:	8e 83       	std	Y+6, r24	; 0x06
     782:	9f 83       	std	Y+7, r25	; 0x07
     784:	a8 87       	std	Y+8, r26	; 0x08
     786:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     788:	11 e0       	ldi	r17, 0x01	; 1
     78a:	6e 81       	ldd	r22, Y+6	; 0x06
     78c:	7f 81       	ldd	r23, Y+7	; 0x07
     78e:	88 85       	ldd	r24, Y+8	; 0x08
     790:	99 85       	ldd	r25, Y+9	; 0x09
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	40 e8       	ldi	r20, 0x80	; 128
     798:	5f e3       	ldi	r21, 0x3F	; 63
     79a:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__ltsf2>
     79e:	88 23       	and	r24, r24
     7a0:	0c f0       	brlt	.+2      	; 0x7a4 <LCD_Initalize+0xd0>
     7a2:	10 e0       	ldi	r17, 0x00	; 0
     7a4:	11 23       	and	r17, r17
     7a6:	29 f0       	breq	.+10     	; 0x7b2 <LCD_Initalize+0xde>
		__ticks = 1;
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	9b 87       	std	Y+11, r25	; 0x0b
     7ae:	8a 87       	std	Y+10, r24	; 0x0a
     7b0:	46 c0       	rjmp	.+140    	; 0x83e <LCD_Initalize+0x16a>
	else if (__tmp > 65535)
     7b2:	11 e0       	ldi	r17, 0x01	; 1
     7b4:	6e 81       	ldd	r22, Y+6	; 0x06
     7b6:	7f 81       	ldd	r23, Y+7	; 0x07
     7b8:	88 85       	ldd	r24, Y+8	; 0x08
     7ba:	99 85       	ldd	r25, Y+9	; 0x09
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	3f ef       	ldi	r19, 0xFF	; 255
     7c0:	4f e7       	ldi	r20, 0x7F	; 127
     7c2:	57 e4       	ldi	r21, 0x47	; 71
     7c4:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__gtsf2>
     7c8:	18 16       	cp	r1, r24
     7ca:	0c f0       	brlt	.+2      	; 0x7ce <LCD_Initalize+0xfa>
     7cc:	10 e0       	ldi	r17, 0x00	; 0
     7ce:	11 23       	and	r17, r17
     7d0:	61 f1       	breq	.+88     	; 0x82a <LCD_Initalize+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7d2:	6a 81       	ldd	r22, Y+2	; 0x02
     7d4:	7b 81       	ldd	r23, Y+3	; 0x03
     7d6:	8c 81       	ldd	r24, Y+4	; 0x04
     7d8:	9d 81       	ldd	r25, Y+5	; 0x05
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	40 e2       	ldi	r20, 0x20	; 32
     7e0:	51 e4       	ldi	r21, 0x41	; 65
     7e2:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
     7e6:	dc 01       	movw	r26, r24
     7e8:	cb 01       	movw	r24, r22
     7ea:	bc 01       	movw	r22, r24
     7ec:	cd 01       	movw	r24, r26
     7ee:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fixunssfsi>
     7f2:	dc 01       	movw	r26, r24
     7f4:	cb 01       	movw	r24, r22
     7f6:	9b 87       	std	Y+11, r25	; 0x0b
     7f8:	8a 87       	std	Y+10, r24	; 0x0a
     7fa:	12 c0       	rjmp	.+36     	; 0x820 <LCD_Initalize+0x14c>
     7fc:	89 e1       	ldi	r24, 0x19	; 25
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	9d 87       	std	Y+13, r25	; 0x0d
     802:	8c 87       	std	Y+12, r24	; 0x0c
     804:	8c 85       	ldd	r24, Y+12	; 0x0c
     806:	9d 85       	ldd	r25, Y+13	; 0x0d
     808:	8c 01       	movw	r16, r24
     80a:	c8 01       	movw	r24, r16
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	f1 f7       	brne	.-4      	; 0x80c <LCD_Initalize+0x138>
     810:	8c 01       	movw	r16, r24
     812:	1d 87       	std	Y+13, r17	; 0x0d
     814:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     816:	8a 85       	ldd	r24, Y+10	; 0x0a
     818:	9b 85       	ldd	r25, Y+11	; 0x0b
     81a:	01 97       	sbiw	r24, 0x01	; 1
     81c:	9b 87       	std	Y+11, r25	; 0x0b
     81e:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     820:	8a 85       	ldd	r24, Y+10	; 0x0a
     822:	9b 85       	ldd	r25, Y+11	; 0x0b
     824:	00 97       	sbiw	r24, 0x00	; 0
     826:	51 f7       	brne	.-44     	; 0x7fc <LCD_Initalize+0x128>
     828:	17 c0       	rjmp	.+46     	; 0x858 <LCD_Initalize+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	7f 81       	ldd	r23, Y+7	; 0x07
     82e:	88 85       	ldd	r24, Y+8	; 0x08
     830:	99 85       	ldd	r25, Y+9	; 0x09
     832:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fixunssfsi>
     836:	dc 01       	movw	r26, r24
     838:	cb 01       	movw	r24, r22
     83a:	9b 87       	std	Y+11, r25	; 0x0b
     83c:	8a 87       	std	Y+10, r24	; 0x0a
     83e:	8a 85       	ldd	r24, Y+10	; 0x0a
     840:	9b 85       	ldd	r25, Y+11	; 0x0b
     842:	9f 87       	std	Y+15, r25	; 0x0f
     844:	8e 87       	std	Y+14, r24	; 0x0e
     846:	8e 85       	ldd	r24, Y+14	; 0x0e
     848:	9f 85       	ldd	r25, Y+15	; 0x0f
     84a:	8c 01       	movw	r16, r24
     84c:	f8 01       	movw	r30, r16
     84e:	31 97       	sbiw	r30, 0x01	; 1
     850:	f1 f7       	brne	.-4      	; 0x84e <LCD_Initalize+0x17a>
     852:	8f 01       	movw	r16, r30
     854:	1f 87       	std	Y+15, r17	; 0x0f
     856:	0e 87       	std	Y+14, r16	; 0x0e
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
     858:	82 e3       	ldi	r24, 0x32	; 50
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	22 e3       	ldi	r18, 0x32	; 50
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	f9 01       	movw	r30, r18
     862:	20 81       	ld	r18, Z
     864:	2e 7f       	andi	r18, 0xFE	; 254
     866:	fc 01       	movw	r30, r24
     868:	20 83       	st	Z, r18
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
     86a:	82 e3       	ldi	r24, 0x32	; 50
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	22 e3       	ldi	r18, 0x32	; 50
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	f9 01       	movw	r30, r18
     874:	20 81       	ld	r18, Z
     876:	2d 7f       	andi	r18, 0xFD	; 253
     878:	fc 01       	movw	r30, r24
     87a:	20 83       	st	Z, r18

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
     87c:	19 82       	std	Y+1, r1	; 0x01
     87e:	98 c0       	rjmp	.+304    	; 0x9b0 <__stack+0x151>
  {
  LCD_E_PORT |= LCD_E; //  E = 1
     880:	82 e3       	ldi	r24, 0x32	; 50
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	22 e3       	ldi	r18, 0x32	; 50
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	f9 01       	movw	r30, r18
     88a:	20 81       	ld	r18, Z
     88c:	22 60       	ori	r18, 0x02	; 2
     88e:	fc 01       	movw	r30, r24
     890:	20 83       	st	Z, r18
  _LCD_OutNibble(0x03); // tryb 8-bitowy
     892:	83 e0       	ldi	r24, 0x03	; 3
     894:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E; // E = 0
     898:	82 e3       	ldi	r24, 0x32	; 50
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	22 e3       	ldi	r18, 0x32	; 50
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	f9 01       	movw	r30, r18
     8a2:	20 81       	ld	r18, Z
     8a4:	2d 7f       	andi	r18, 0xFD	; 253
     8a6:	fc 01       	movw	r30, r24
     8a8:	20 83       	st	Z, r18
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	a0 ea       	ldi	r26, 0xA0	; 160
     8b0:	b0 e4       	ldi	r27, 0x40	; 64
     8b2:	88 8b       	std	Y+16, r24	; 0x10
     8b4:	99 8b       	std	Y+17, r25	; 0x11
     8b6:	aa 8b       	std	Y+18, r26	; 0x12
     8b8:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     8ba:	68 89       	ldd	r22, Y+16	; 0x10
     8bc:	79 89       	ldd	r23, Y+17	; 0x11
     8be:	8a 89       	ldd	r24, Y+18	; 0x12
     8c0:	9b 89       	ldd	r25, Y+19	; 0x13
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	4a e7       	ldi	r20, 0x7A	; 122
     8c8:	53 e4       	ldi	r21, 0x43	; 67
     8ca:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
     8ce:	dc 01       	movw	r26, r24
     8d0:	cb 01       	movw	r24, r22
     8d2:	8c 8b       	std	Y+20, r24	; 0x14
     8d4:	9d 8b       	std	Y+21, r25	; 0x15
     8d6:	ae 8b       	std	Y+22, r26	; 0x16
     8d8:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
     8da:	11 e0       	ldi	r17, 0x01	; 1
     8dc:	6c 89       	ldd	r22, Y+20	; 0x14
     8de:	7d 89       	ldd	r23, Y+21	; 0x15
     8e0:	8e 89       	ldd	r24, Y+22	; 0x16
     8e2:	9f 89       	ldd	r25, Y+23	; 0x17
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	40 e8       	ldi	r20, 0x80	; 128
     8ea:	5f e3       	ldi	r21, 0x3F	; 63
     8ec:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__ltsf2>
     8f0:	88 23       	and	r24, r24
     8f2:	0c f0       	brlt	.+2      	; 0x8f6 <__stack+0x97>
     8f4:	10 e0       	ldi	r17, 0x00	; 0
     8f6:	11 23       	and	r17, r17
     8f8:	29 f0       	breq	.+10     	; 0x904 <__stack+0xa5>
		__ticks = 1;
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	99 8f       	std	Y+25, r25	; 0x19
     900:	88 8f       	std	Y+24, r24	; 0x18
     902:	46 c0       	rjmp	.+140    	; 0x990 <__stack+0x131>
	else if (__tmp > 65535)
     904:	11 e0       	ldi	r17, 0x01	; 1
     906:	6c 89       	ldd	r22, Y+20	; 0x14
     908:	7d 89       	ldd	r23, Y+21	; 0x15
     90a:	8e 89       	ldd	r24, Y+22	; 0x16
     90c:	9f 89       	ldd	r25, Y+23	; 0x17
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	3f ef       	ldi	r19, 0xFF	; 255
     912:	4f e7       	ldi	r20, 0x7F	; 127
     914:	57 e4       	ldi	r21, 0x47	; 71
     916:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__gtsf2>
     91a:	18 16       	cp	r1, r24
     91c:	0c f0       	brlt	.+2      	; 0x920 <__stack+0xc1>
     91e:	10 e0       	ldi	r17, 0x00	; 0
     920:	11 23       	and	r17, r17
     922:	61 f1       	breq	.+88     	; 0x97c <__stack+0x11d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     924:	68 89       	ldd	r22, Y+16	; 0x10
     926:	79 89       	ldd	r23, Y+17	; 0x11
     928:	8a 89       	ldd	r24, Y+18	; 0x12
     92a:	9b 89       	ldd	r25, Y+19	; 0x13
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	40 e2       	ldi	r20, 0x20	; 32
     932:	51 e4       	ldi	r21, 0x41	; 65
     934:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
     938:	dc 01       	movw	r26, r24
     93a:	cb 01       	movw	r24, r22
     93c:	bc 01       	movw	r22, r24
     93e:	cd 01       	movw	r24, r26
     940:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fixunssfsi>
     944:	dc 01       	movw	r26, r24
     946:	cb 01       	movw	r24, r22
     948:	99 8f       	std	Y+25, r25	; 0x19
     94a:	88 8f       	std	Y+24, r24	; 0x18
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__stack+0x113>
     94e:	89 e1       	ldi	r24, 0x19	; 25
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	9b 8f       	std	Y+27, r25	; 0x1b
     954:	8a 8f       	std	Y+26, r24	; 0x1a
     956:	8a 8d       	ldd	r24, Y+26	; 0x1a
     958:	9b 8d       	ldd	r25, Y+27	; 0x1b
     95a:	8c 01       	movw	r16, r24
     95c:	c8 01       	movw	r24, r16
     95e:	01 97       	sbiw	r24, 0x01	; 1
     960:	f1 f7       	brne	.-4      	; 0x95e <__stack+0xff>
     962:	8c 01       	movw	r16, r24
     964:	1b 8f       	std	Y+27, r17	; 0x1b
     966:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     968:	88 8d       	ldd	r24, Y+24	; 0x18
     96a:	99 8d       	ldd	r25, Y+25	; 0x19
     96c:	01 97       	sbiw	r24, 0x01	; 1
     96e:	99 8f       	std	Y+25, r25	; 0x19
     970:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     972:	88 8d       	ldd	r24, Y+24	; 0x18
     974:	99 8d       	ldd	r25, Y+25	; 0x19
     976:	00 97       	sbiw	r24, 0x00	; 0
     978:	51 f7       	brne	.-44     	; 0x94e <__stack+0xef>
     97a:	17 c0       	rjmp	.+46     	; 0x9aa <__stack+0x14b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     97c:	6c 89       	ldd	r22, Y+20	; 0x14
     97e:	7d 89       	ldd	r23, Y+21	; 0x15
     980:	8e 89       	ldd	r24, Y+22	; 0x16
     982:	9f 89       	ldd	r25, Y+23	; 0x17
     984:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fixunssfsi>
     988:	dc 01       	movw	r26, r24
     98a:	cb 01       	movw	r24, r22
     98c:	99 8f       	std	Y+25, r25	; 0x19
     98e:	88 8f       	std	Y+24, r24	; 0x18
     990:	88 8d       	ldd	r24, Y+24	; 0x18
     992:	99 8d       	ldd	r25, Y+25	; 0x19
     994:	9d 8f       	std	Y+29, r25	; 0x1d
     996:	8c 8f       	std	Y+28, r24	; 0x1c
     998:	8c 8d       	ldd	r24, Y+28	; 0x1c
     99a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     99c:	8c 01       	movw	r16, r24
     99e:	f8 01       	movw	r30, r16
     9a0:	31 97       	sbiw	r30, 0x01	; 1
     9a2:	f1 f7       	brne	.-4      	; 0x9a0 <__stack+0x141>
     9a4:	8f 01       	movw	r16, r30
     9a6:	1d 8f       	std	Y+29, r17	; 0x1d
     9a8:	0c 8f       	std	Y+28, r16	; 0x1c
LCD_RS_DIR 	|= LCD_RS;  //
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	8f 5f       	subi	r24, 0xFF	; 255
     9ae:	89 83       	std	Y+1, r24	; 0x01
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	83 30       	cpi	r24, 0x03	; 3
     9b4:	08 f4       	brcc	.+2      	; 0x9b8 <__stack+0x159>
     9b6:	64 cf       	rjmp	.-312    	; 0x880 <__stack+0x21>
  _LCD_OutNibble(0x03); // tryb 8-bitowy
  LCD_E_PORT &= ~LCD_E; // E = 0
  _delay_ms(5); // czekaj 5ms
  }

LCD_E_PORT |= LCD_E; // E = 1
     9b8:	82 e3       	ldi	r24, 0x32	; 50
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	22 e3       	ldi	r18, 0x32	; 50
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	f9 01       	movw	r30, r18
     9c2:	20 81       	ld	r18, Z
     9c4:	22 60       	ori	r18, 0x02	; 2
     9c6:	fc 01       	movw	r30, r24
     9c8:	20 83       	st	Z, r18
_LCD_OutNibble(0x02); // tryb 4-bitowy
     9ca:	82 e0       	ldi	r24, 0x02	; 2
     9cc:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E; // E = 0
     9d0:	82 e3       	ldi	r24, 0x32	; 50
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	22 e3       	ldi	r18, 0x32	; 50
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	f9 01       	movw	r30, r18
     9da:	20 81       	ld	r18, Z
     9dc:	2d 7f       	andi	r18, 0xFD	; 253
     9de:	fc 01       	movw	r30, r24
     9e0:	20 83       	st	Z, r18
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	a0 e8       	ldi	r26, 0x80	; 128
     9e8:	bf e3       	ldi	r27, 0x3F	; 63
     9ea:	8e 8f       	std	Y+30, r24	; 0x1e
     9ec:	9f 8f       	std	Y+31, r25	; 0x1f
     9ee:	a8 a3       	std	Y+32, r26	; 0x20
     9f0:	b9 a3       	std	Y+33, r27	; 0x21
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     9f2:	6e 8d       	ldd	r22, Y+30	; 0x1e
     9f4:	7f 8d       	ldd	r23, Y+31	; 0x1f
     9f6:	88 a1       	ldd	r24, Y+32	; 0x20
     9f8:	99 a1       	ldd	r25, Y+33	; 0x21
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	4a e7       	ldi	r20, 0x7A	; 122
     a00:	53 e4       	ldi	r21, 0x43	; 67
     a02:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
     a06:	dc 01       	movw	r26, r24
     a08:	cb 01       	movw	r24, r22
     a0a:	8a a3       	std	Y+34, r24	; 0x22
     a0c:	9b a3       	std	Y+35, r25	; 0x23
     a0e:	ac a3       	std	Y+36, r26	; 0x24
     a10:	bd a3       	std	Y+37, r27	; 0x25
	if (__tmp < 1.0)
     a12:	11 e0       	ldi	r17, 0x01	; 1
     a14:	6a a1       	ldd	r22, Y+34	; 0x22
     a16:	7b a1       	ldd	r23, Y+35	; 0x23
     a18:	8c a1       	ldd	r24, Y+36	; 0x24
     a1a:	9d a1       	ldd	r25, Y+37	; 0x25
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	40 e8       	ldi	r20, 0x80	; 128
     a22:	5f e3       	ldi	r21, 0x3F	; 63
     a24:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__ltsf2>
     a28:	88 23       	and	r24, r24
     a2a:	0c f0       	brlt	.+2      	; 0xa2e <__stack+0x1cf>
     a2c:	10 e0       	ldi	r17, 0x00	; 0
     a2e:	11 23       	and	r17, r17
     a30:	29 f0       	breq	.+10     	; 0xa3c <__stack+0x1dd>
		__ticks = 1;
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	9f a3       	std	Y+39, r25	; 0x27
     a38:	8e a3       	std	Y+38, r24	; 0x26
     a3a:	46 c0       	rjmp	.+140    	; 0xac8 <__stack+0x269>
	else if (__tmp > 65535)
     a3c:	11 e0       	ldi	r17, 0x01	; 1
     a3e:	6a a1       	ldd	r22, Y+34	; 0x22
     a40:	7b a1       	ldd	r23, Y+35	; 0x23
     a42:	8c a1       	ldd	r24, Y+36	; 0x24
     a44:	9d a1       	ldd	r25, Y+37	; 0x25
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	3f ef       	ldi	r19, 0xFF	; 255
     a4a:	4f e7       	ldi	r20, 0x7F	; 127
     a4c:	57 e4       	ldi	r21, 0x47	; 71
     a4e:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__gtsf2>
     a52:	18 16       	cp	r1, r24
     a54:	0c f0       	brlt	.+2      	; 0xa58 <__stack+0x1f9>
     a56:	10 e0       	ldi	r17, 0x00	; 0
     a58:	11 23       	and	r17, r17
     a5a:	61 f1       	breq	.+88     	; 0xab4 <__stack+0x255>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a5c:	6e 8d       	ldd	r22, Y+30	; 0x1e
     a5e:	7f 8d       	ldd	r23, Y+31	; 0x1f
     a60:	88 a1       	ldd	r24, Y+32	; 0x20
     a62:	99 a1       	ldd	r25, Y+33	; 0x21
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	40 e2       	ldi	r20, 0x20	; 32
     a6a:	51 e4       	ldi	r21, 0x41	; 65
     a6c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
     a70:	dc 01       	movw	r26, r24
     a72:	cb 01       	movw	r24, r22
     a74:	bc 01       	movw	r22, r24
     a76:	cd 01       	movw	r24, r26
     a78:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fixunssfsi>
     a7c:	dc 01       	movw	r26, r24
     a7e:	cb 01       	movw	r24, r22
     a80:	9f a3       	std	Y+39, r25	; 0x27
     a82:	8e a3       	std	Y+38, r24	; 0x26
     a84:	12 c0       	rjmp	.+36     	; 0xaaa <__stack+0x24b>
     a86:	89 e1       	ldi	r24, 0x19	; 25
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	99 a7       	std	Y+41, r25	; 0x29
     a8c:	88 a7       	std	Y+40, r24	; 0x28
     a8e:	88 a5       	ldd	r24, Y+40	; 0x28
     a90:	99 a5       	ldd	r25, Y+41	; 0x29
     a92:	8c 01       	movw	r16, r24
     a94:	c8 01       	movw	r24, r16
     a96:	01 97       	sbiw	r24, 0x01	; 1
     a98:	f1 f7       	brne	.-4      	; 0xa96 <__stack+0x237>
     a9a:	8c 01       	movw	r16, r24
     a9c:	19 a7       	std	Y+41, r17	; 0x29
     a9e:	08 a7       	std	Y+40, r16	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aa0:	8e a1       	ldd	r24, Y+38	; 0x26
     aa2:	9f a1       	ldd	r25, Y+39	; 0x27
     aa4:	01 97       	sbiw	r24, 0x01	; 1
     aa6:	9f a3       	std	Y+39, r25	; 0x27
     aa8:	8e a3       	std	Y+38, r24	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aaa:	8e a1       	ldd	r24, Y+38	; 0x26
     aac:	9f a1       	ldd	r25, Y+39	; 0x27
     aae:	00 97       	sbiw	r24, 0x00	; 0
     ab0:	51 f7       	brne	.-44     	; 0xa86 <__stack+0x227>
     ab2:	17 c0       	rjmp	.+46     	; 0xae2 <__stack+0x283>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ab4:	6a a1       	ldd	r22, Y+34	; 0x22
     ab6:	7b a1       	ldd	r23, Y+35	; 0x23
     ab8:	8c a1       	ldd	r24, Y+36	; 0x24
     aba:	9d a1       	ldd	r25, Y+37	; 0x25
     abc:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fixunssfsi>
     ac0:	dc 01       	movw	r26, r24
     ac2:	cb 01       	movw	r24, r22
     ac4:	9f a3       	std	Y+39, r25	; 0x27
     ac6:	8e a3       	std	Y+38, r24	; 0x26
     ac8:	8e a1       	ldd	r24, Y+38	; 0x26
     aca:	9f a1       	ldd	r25, Y+39	; 0x27
     acc:	9b a7       	std	Y+43, r25	; 0x2b
     ace:	8a a7       	std	Y+42, r24	; 0x2a
     ad0:	8a a5       	ldd	r24, Y+42	; 0x2a
     ad2:	9b a5       	ldd	r25, Y+43	; 0x2b
     ad4:	8c 01       	movw	r16, r24
     ad6:	f8 01       	movw	r30, r16
     ad8:	31 97       	sbiw	r30, 0x01	; 1
     ada:	f1 f7       	brne	.-4      	; 0xad8 <__stack+0x279>
     adc:	8f 01       	movw	r16, r30
     ade:	1b a7       	std	Y+43, r17	; 0x2b
     ae0:	0a a7       	std	Y+42, r16	; 0x2a

_delay_ms(1); // czekaj 1ms
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
     ae2:	88 e2       	ldi	r24, 0x28	; 40
     ae4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
     ae8:	88 e0       	ldi	r24, 0x08	; 8
     aea:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_WriteCommand>
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	a0 e0       	ldi	r26, 0x00	; 0
     afa:	b0 e4       	ldi	r27, 0x40	; 64
     afc:	8c a7       	std	Y+44, r24	; 0x2c
     afe:	9d a7       	std	Y+45, r25	; 0x2d
     b00:	ae a7       	std	Y+46, r26	; 0x2e
     b02:	bf a7       	std	Y+47, r27	; 0x2f
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     b04:	6c a5       	ldd	r22, Y+44	; 0x2c
     b06:	7d a5       	ldd	r23, Y+45	; 0x2d
     b08:	8e a5       	ldd	r24, Y+46	; 0x2e
     b0a:	9f a5       	ldd	r25, Y+47	; 0x2f
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	4a e7       	ldi	r20, 0x7A	; 122
     b12:	53 e4       	ldi	r21, 0x43	; 67
     b14:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
     b18:	dc 01       	movw	r26, r24
     b1a:	cb 01       	movw	r24, r22
     b1c:	88 ab       	std	Y+48, r24	; 0x30
     b1e:	99 ab       	std	Y+49, r25	; 0x31
     b20:	aa ab       	std	Y+50, r26	; 0x32
     b22:	bb ab       	std	Y+51, r27	; 0x33
	if (__tmp < 1.0)
     b24:	11 e0       	ldi	r17, 0x01	; 1
     b26:	68 a9       	ldd	r22, Y+48	; 0x30
     b28:	79 a9       	ldd	r23, Y+49	; 0x31
     b2a:	8a a9       	ldd	r24, Y+50	; 0x32
     b2c:	9b a9       	ldd	r25, Y+51	; 0x33
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	40 e8       	ldi	r20, 0x80	; 128
     b34:	5f e3       	ldi	r21, 0x3F	; 63
     b36:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__ltsf2>
     b3a:	88 23       	and	r24, r24
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__stack+0x2e1>
     b3e:	10 e0       	ldi	r17, 0x00	; 0
     b40:	11 23       	and	r17, r17
     b42:	29 f0       	breq	.+10     	; 0xb4e <__stack+0x2ef>
		__ticks = 1;
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	9d ab       	std	Y+53, r25	; 0x35
     b4a:	8c ab       	std	Y+52, r24	; 0x34
     b4c:	46 c0       	rjmp	.+140    	; 0xbda <__stack+0x37b>
	else if (__tmp > 65535)
     b4e:	11 e0       	ldi	r17, 0x01	; 1
     b50:	68 a9       	ldd	r22, Y+48	; 0x30
     b52:	79 a9       	ldd	r23, Y+49	; 0x31
     b54:	8a a9       	ldd	r24, Y+50	; 0x32
     b56:	9b a9       	ldd	r25, Y+51	; 0x33
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	3f ef       	ldi	r19, 0xFF	; 255
     b5c:	4f e7       	ldi	r20, 0x7F	; 127
     b5e:	57 e4       	ldi	r21, 0x47	; 71
     b60:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__gtsf2>
     b64:	18 16       	cp	r1, r24
     b66:	0c f0       	brlt	.+2      	; 0xb6a <__stack+0x30b>
     b68:	10 e0       	ldi	r17, 0x00	; 0
     b6a:	11 23       	and	r17, r17
     b6c:	61 f1       	breq	.+88     	; 0xbc6 <__stack+0x367>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b6e:	6c a5       	ldd	r22, Y+44	; 0x2c
     b70:	7d a5       	ldd	r23, Y+45	; 0x2d
     b72:	8e a5       	ldd	r24, Y+46	; 0x2e
     b74:	9f a5       	ldd	r25, Y+47	; 0x2f
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	40 e2       	ldi	r20, 0x20	; 32
     b7c:	51 e4       	ldi	r21, 0x41	; 65
     b7e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
     b86:	bc 01       	movw	r22, r24
     b88:	cd 01       	movw	r24, r26
     b8a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fixunssfsi>
     b8e:	dc 01       	movw	r26, r24
     b90:	cb 01       	movw	r24, r22
     b92:	9d ab       	std	Y+53, r25	; 0x35
     b94:	8c ab       	std	Y+52, r24	; 0x34
     b96:	12 c0       	rjmp	.+36     	; 0xbbc <__stack+0x35d>
     b98:	89 e1       	ldi	r24, 0x19	; 25
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	9f ab       	std	Y+55, r25	; 0x37
     b9e:	8e ab       	std	Y+54, r24	; 0x36
     ba0:	8e a9       	ldd	r24, Y+54	; 0x36
     ba2:	9f a9       	ldd	r25, Y+55	; 0x37
     ba4:	8c 01       	movw	r16, r24
     ba6:	c8 01       	movw	r24, r16
     ba8:	01 97       	sbiw	r24, 0x01	; 1
     baa:	f1 f7       	brne	.-4      	; 0xba8 <__stack+0x349>
     bac:	8c 01       	movw	r16, r24
     bae:	1f ab       	std	Y+55, r17	; 0x37
     bb0:	0e ab       	std	Y+54, r16	; 0x36
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bb2:	8c a9       	ldd	r24, Y+52	; 0x34
     bb4:	9d a9       	ldd	r25, Y+53	; 0x35
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	9d ab       	std	Y+53, r25	; 0x35
     bba:	8c ab       	std	Y+52, r24	; 0x34
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bbc:	8c a9       	ldd	r24, Y+52	; 0x34
     bbe:	9d a9       	ldd	r25, Y+53	; 0x35
     bc0:	00 97       	sbiw	r24, 0x00	; 0
     bc2:	51 f7       	brne	.-44     	; 0xb98 <__stack+0x339>
     bc4:	17 c0       	rjmp	.+46     	; 0xbf4 <__stack+0x395>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bc6:	68 a9       	ldd	r22, Y+48	; 0x30
     bc8:	79 a9       	ldd	r23, Y+49	; 0x31
     bca:	8a a9       	ldd	r24, Y+50	; 0x32
     bcc:	9b a9       	ldd	r25, Y+51	; 0x33
     bce:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fixunssfsi>
     bd2:	dc 01       	movw	r26, r24
     bd4:	cb 01       	movw	r24, r22
     bd6:	9d ab       	std	Y+53, r25	; 0x35
     bd8:	8c ab       	std	Y+52, r24	; 0x34
     bda:	8c a9       	ldd	r24, Y+52	; 0x34
     bdc:	9d a9       	ldd	r25, Y+53	; 0x35
     bde:	99 af       	std	Y+57, r25	; 0x39
     be0:	88 af       	std	Y+56, r24	; 0x38
     be2:	88 ad       	ldd	r24, Y+56	; 0x38
     be4:	99 ad       	ldd	r25, Y+57	; 0x39
     be6:	8c 01       	movw	r16, r24
     be8:	f8 01       	movw	r30, r16
     bea:	31 97       	sbiw	r30, 0x01	; 1
     bec:	f1 f7       	brne	.-4      	; 0xbea <__stack+0x38b>
     bee:	8f 01       	movw	r16, r30
     bf0:	19 af       	std	Y+57, r17	; 0x39
     bf2:	08 af       	std	Y+56, r16	; 0x38
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
     bf4:	86 e0       	ldi	r24, 0x06	; 6
     bf6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
     bfa:	8c e0       	ldi	r24, 0x0C	; 12
     bfc:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_WriteCommand>
}
     c00:	e9 96       	adiw	r28, 0x39	; 57
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	08 95       	ret

00000c16 <main>:
volatile uint8_t flaga=0;
volatile uint32_t dlugosc;
void sygnal(void);

int main(void)
{
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
        LCD_Initalize();
     c1e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_Initalize>

        DDRB|=(1<<PB1);//TRIG
     c22:	87 e3       	ldi	r24, 0x37	; 55
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	27 e3       	ldi	r18, 0x37	; 55
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	f9 01       	movw	r30, r18
     c2c:	20 81       	ld	r18, Z
     c2e:	22 60       	ori	r18, 0x02	; 2
     c30:	fc 01       	movw	r30, r24
     c32:	20 83       	st	Z, r18
        DDRB&=~(1<<PB0);//ECHO
     c34:	87 e3       	ldi	r24, 0x37	; 55
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	27 e3       	ldi	r18, 0x37	; 55
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	f9 01       	movw	r30, r18
     c3e:	20 81       	ld	r18, Z
     c40:	2e 7f       	andi	r18, 0xFE	; 254
     c42:	fc 01       	movw	r30, r24
     c44:	20 83       	st	Z, r18
        PORTB &= ~(1<<PB0);
     c46:	88 e3       	ldi	r24, 0x38	; 56
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	28 e3       	ldi	r18, 0x38	; 56
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	f9 01       	movw	r30, r18
     c50:	20 81       	ld	r18, Z
     c52:	2e 7f       	andi	r18, 0xFE	; 254
     c54:	fc 01       	movw	r30, r24
     c56:	20 83       	st	Z, r18

        TCCR0|=(1<<CS02);//PRESK 256
     c58:	83 e5       	ldi	r24, 0x53	; 83
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	23 e5       	ldi	r18, 0x53	; 83
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	f9 01       	movw	r30, r18
     c62:	20 81       	ld	r18, Z
     c64:	24 60       	ori	r18, 0x04	; 4
     c66:	fc 01       	movw	r30, r24
     c68:	20 83       	st	Z, r18
        TIMSK|=(1<<TOIE0);
     c6a:	89 e5       	ldi	r24, 0x59	; 89
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	29 e5       	ldi	r18, 0x59	; 89
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	f9 01       	movw	r30, r18
     c74:	20 81       	ld	r18, Z
     c76:	21 60       	ori	r18, 0x01	; 1
     c78:	fc 01       	movw	r30, r24
     c7a:	20 83       	st	Z, r18
        TCNT0=6;
     c7c:	82 e5       	ldi	r24, 0x52	; 82
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	26 e0       	ldi	r18, 0x06	; 6
     c82:	fc 01       	movw	r30, r24
     c84:	20 83       	st	Z, r18

        TCCR1B|=(1<<ICES1);//NARASTAJACE
     c86:	8e e4       	ldi	r24, 0x4E	; 78
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	2e e4       	ldi	r18, 0x4E	; 78
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	f9 01       	movw	r30, r18
     c90:	20 81       	ld	r18, Z
     c92:	20 64       	ori	r18, 0x40	; 64
     c94:	fc 01       	movw	r30, r24
     c96:	20 83       	st	Z, r18
        TCCR1B |= (1<<CS11); //PRESKALER 8
     c98:	8e e4       	ldi	r24, 0x4E	; 78
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	2e e4       	ldi	r18, 0x4E	; 78
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	f9 01       	movw	r30, r18
     ca2:	20 81       	ld	r18, Z
     ca4:	22 60       	ori	r18, 0x02	; 2
     ca6:	fc 01       	movw	r30, r24
     ca8:	20 83       	st	Z, r18
        TIMSK |=  (1<<TICIE1); //PRZERWANIE WL
     caa:	89 e5       	ldi	r24, 0x59	; 89
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	29 e5       	ldi	r18, 0x59	; 89
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	f9 01       	movw	r30, r18
     cb4:	20 81       	ld	r18, Z
     cb6:	20 62       	ori	r18, 0x20	; 32
     cb8:	fc 01       	movw	r30, r24
     cba:	20 83       	st	Z, r18

        sei();
     cbc:	78 94       	sei
     cbe:	01 c0       	rjmp	.+2      	; 0xcc2 <main+0xac>
                        LCD_Home();

                        printf("Liczba: %i", dlugosc/58  );
                        flaga=0;
                }
        }
     cc0:	00 00       	nop

        sei();

        while(1)
        {
                if(flaga) //25 na sek
     cc2:	80 91 74 00 	lds	r24, 0x0074
     cc6:	88 23       	and	r24, r24
     cc8:	d9 f3       	breq	.-10     	; 0xcc0 <main+0xaa>
                {
                        sygnal();//rozpocznij
     cca:	0e 94 1b 07 	call	0xe36	; 0xe36 <sygnal>
                        LCD_Clear();
     cce:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_Clear>
                        LCD_Home();
     cd2:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LCD_Home>

                        printf("Liczba: %i", dlugosc/58  );
     cd6:	80 91 76 00 	lds	r24, 0x0076
     cda:	90 91 77 00 	lds	r25, 0x0077
     cde:	a0 91 78 00 	lds	r26, 0x0078
     ce2:	b0 91 79 00 	lds	r27, 0x0079
     ce6:	2a e3       	ldi	r18, 0x3A	; 58
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	bc 01       	movw	r22, r24
     cf0:	cd 01       	movw	r24, r26
     cf2:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__udivmodsi4>
     cf6:	da 01       	movw	r26, r20
     cf8:	c9 01       	movw	r24, r18
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <main+0xe6>
     cfc:	00 d0       	rcall	.+0      	; 0xcfe <main+0xe8>
     cfe:	00 d0       	rcall	.+0      	; 0xd00 <main+0xea>
     d00:	2d b7       	in	r18, 0x3d	; 61
     d02:	3e b7       	in	r19, 0x3e	; 62
     d04:	2f 5f       	subi	r18, 0xFF	; 255
     d06:	3f 4f       	sbci	r19, 0xFF	; 255
     d08:	40 e6       	ldi	r20, 0x60	; 96
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	f9 01       	movw	r30, r18
     d0e:	51 83       	std	Z+1, r21	; 0x01
     d10:	40 83       	st	Z, r20
     d12:	f9 01       	movw	r30, r18
     d14:	82 83       	std	Z+2, r24	; 0x02
     d16:	93 83       	std	Z+3, r25	; 0x03
     d18:	a4 83       	std	Z+4, r26	; 0x04
     d1a:	b5 83       	std	Z+5, r27	; 0x05
     d1c:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <printf>
     d20:	8d b7       	in	r24, 0x3d	; 61
     d22:	9e b7       	in	r25, 0x3e	; 62
     d24:	06 96       	adiw	r24, 0x06	; 6
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	9e bf       	out	0x3e, r25	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	8d bf       	out	0x3d, r24	; 61
                        flaga=0;
     d30:	10 92 74 00 	sts	0x0074, r1
                }
        }
     d34:	c6 cf       	rjmp	.-116    	; 0xcc2 <main+0xac>

00000d36 <__vector_11>:


}

ISR(TIMER0_OVF_vect)//125 NA SEK
{
     d36:	1f 92       	push	r1
     d38:	0f 92       	push	r0
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	0f 92       	push	r0
     d3e:	11 24       	eor	r1, r1
     d40:	2f 93       	push	r18
     d42:	8f 93       	push	r24
     d44:	9f 93       	push	r25
     d46:	ef 93       	push	r30
     d48:	ff 93       	push	r31
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
        static uint8_t i=0;
        if(i==25)
     d52:	80 91 75 00 	lds	r24, 0x0075
     d56:	89 31       	cpi	r24, 0x19	; 25
     d58:	31 f4       	brne	.+12     	; 0xd66 <__vector_11+0x30>
        {//co sek
                flaga=1;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	80 93 74 00 	sts	0x0074, r24
                i=0;
     d60:	10 92 75 00 	sts	0x0075, r1
     d64:	05 c0       	rjmp	.+10     	; 0xd70 <__vector_11+0x3a>
        }
        else
        {
                i++;
     d66:	80 91 75 00 	lds	r24, 0x0075
     d6a:	8f 5f       	subi	r24, 0xFF	; 255
     d6c:	80 93 75 00 	sts	0x0075, r24
        }
        TCNT0=6;
     d70:	82 e5       	ldi	r24, 0x52	; 82
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	26 e0       	ldi	r18, 0x06	; 6
     d76:	fc 01       	movw	r30, r24
     d78:	20 83       	st	Z, r18
}
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	ff 91       	pop	r31
     d80:	ef 91       	pop	r30
     d82:	9f 91       	pop	r25
     d84:	8f 91       	pop	r24
     d86:	2f 91       	pop	r18
     d88:	0f 90       	pop	r0
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	0f 90       	pop	r0
     d8e:	1f 90       	pop	r1
     d90:	18 95       	reti

00000d92 <__vector_6>:

ISR(TIMER1_CAPT_vect)//OCZYWISCIE WSZYSTKO PRZY CZESTOTLIWOSCI 1MHZ (8MHZ/8 PRESKALER)
{
     d92:	1f 92       	push	r1
     d94:	0f 92       	push	r0
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	0f 92       	push	r0
     d9a:	11 24       	eor	r1, r1
     d9c:	2f 93       	push	r18
     d9e:	3f 93       	push	r19
     da0:	8f 93       	push	r24
     da2:	9f 93       	push	r25
     da4:	af 93       	push	r26
     da6:	bf 93       	push	r27
     da8:	ef 93       	push	r30
     daa:	ff 93       	push	r31
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
        //static uint16_t ostatniazmiana;
        if( (TCCR1B & (1<<ICES1)) )//jezeli narastajace zbocze
     db4:	8e e4       	ldi	r24, 0x4E	; 78
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	fc 01       	movw	r30, r24
     dba:	80 81       	ld	r24, Z
     dbc:	88 2f       	mov	r24, r24
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	80 74       	andi	r24, 0x40	; 64
     dc2:	90 70       	andi	r25, 0x00	; 0
     dc4:	00 97       	sbiw	r24, 0x00	; 0
     dc6:	79 f0       	breq	.+30     	; 0xde6 <__vector_6+0x54>
        {
                TCNT1=0;//WYZERUJ LICZNIK
     dc8:	8c e4       	ldi	r24, 0x4C	; 76
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	fc 01       	movw	r30, r24
     dce:	11 82       	std	Z+1, r1	; 0x01
     dd0:	10 82       	st	Z, r1
                TCCR1B &= ~(1<<ICES1);//ZMIEN ZBOCZE NA OPADAJACE
     dd2:	8e e4       	ldi	r24, 0x4E	; 78
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	2e e4       	ldi	r18, 0x4E	; 78
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	f9 01       	movw	r30, r18
     ddc:	20 81       	ld	r18, Z
     dde:	2f 7b       	andi	r18, 0xBF	; 191
     de0:	fc 01       	movw	r30, r24
     de2:	20 83       	st	Z, r18
     de4:	19 c0       	rjmp	.+50     	; 0xe18 <__vector_6+0x86>
        }else
        {
                dlugosc=ICR1;//ODCZYT DLUGOSCI
     de6:	86 e4       	ldi	r24, 0x46	; 70
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	fc 01       	movw	r30, r24
     dec:	80 81       	ld	r24, Z
     dee:	91 81       	ldd	r25, Z+1	; 0x01
     df0:	cc 01       	movw	r24, r24
     df2:	a0 e0       	ldi	r26, 0x00	; 0
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	80 93 76 00 	sts	0x0076, r24
     dfa:	90 93 77 00 	sts	0x0077, r25
     dfe:	a0 93 78 00 	sts	0x0078, r26
     e02:	b0 93 79 00 	sts	0x0079, r27
                TCCR1B |= (1<<ICES1);//ZMIEN ZBOCZE NA NARASTAJACE
     e06:	8e e4       	ldi	r24, 0x4E	; 78
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	2e e4       	ldi	r18, 0x4E	; 78
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	f9 01       	movw	r30, r18
     e10:	20 81       	ld	r18, Z
     e12:	20 64       	ori	r18, 0x40	; 64
     e14:	fc 01       	movw	r30, r24
     e16:	20 83       	st	Z, r18
        }
}
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	ff 91       	pop	r31
     e1e:	ef 91       	pop	r30
     e20:	bf 91       	pop	r27
     e22:	af 91       	pop	r26
     e24:	9f 91       	pop	r25
     e26:	8f 91       	pop	r24
     e28:	3f 91       	pop	r19
     e2a:	2f 91       	pop	r18
     e2c:	0f 90       	pop	r0
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	0f 90       	pop	r0
     e32:	1f 90       	pop	r1
     e34:	18 95       	reti

00000e36 <sygnal>:

void sygnal(void)
{
     e36:	0f 93       	push	r16
     e38:	1f 93       	push	r17
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	e0 97       	sbiw	r28, 0x30	; 48
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
        PORTB&=~(1<<PB1);
     e4e:	88 e3       	ldi	r24, 0x38	; 56
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	28 e3       	ldi	r18, 0x38	; 56
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	f9 01       	movw	r30, r18
     e58:	20 81       	ld	r18, Z
     e5a:	2d 7f       	andi	r18, 0xFD	; 253
     e5c:	fc 01       	movw	r30, r24
     e5e:	20 83       	st	Z, r18
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	a0 e0       	ldi	r26, 0x00	; 0
     e66:	b0 e4       	ldi	r27, 0x40	; 64
     e68:	89 83       	std	Y+1, r24	; 0x01
     e6a:	9a 83       	std	Y+2, r25	; 0x02
     e6c:	ab 83       	std	Y+3, r26	; 0x03
     e6e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     e70:	69 81       	ldd	r22, Y+1	; 0x01
     e72:	7a 81       	ldd	r23, Y+2	; 0x02
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	9c 81       	ldd	r25, Y+4	; 0x04
     e78:	2b ea       	ldi	r18, 0xAB	; 171
     e7a:	3a ea       	ldi	r19, 0xAA	; 170
     e7c:	4a ea       	ldi	r20, 0xAA	; 170
     e7e:	5e e3       	ldi	r21, 0x3E	; 62
     e80:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	8d 83       	std	Y+5, r24	; 0x05
     e8a:	9e 83       	std	Y+6, r25	; 0x06
     e8c:	af 83       	std	Y+7, r26	; 0x07
     e8e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     e90:	11 e0       	ldi	r17, 0x01	; 1
     e92:	6d 81       	ldd	r22, Y+5	; 0x05
     e94:	7e 81       	ldd	r23, Y+6	; 0x06
     e96:	8f 81       	ldd	r24, Y+7	; 0x07
     e98:	98 85       	ldd	r25, Y+8	; 0x08
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e8       	ldi	r20, 0x80	; 128
     ea0:	5f e3       	ldi	r21, 0x3F	; 63
     ea2:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__ltsf2>
     ea6:	88 23       	and	r24, r24
     ea8:	0c f0       	brlt	.+2      	; 0xeac <sygnal+0x76>
     eaa:	10 e0       	ldi	r17, 0x00	; 0
     eac:	11 23       	and	r17, r17
     eae:	19 f0       	breq	.+6      	; 0xeb6 <sygnal+0x80>
		__ticks = 1;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	89 87       	std	Y+9, r24	; 0x09
     eb4:	a3 c0       	rjmp	.+326    	; 0xffc <sygnal+0x1c6>
	else if (__tmp > 255)
     eb6:	11 e0       	ldi	r17, 0x01	; 1
     eb8:	6d 81       	ldd	r22, Y+5	; 0x05
     eba:	7e 81       	ldd	r23, Y+6	; 0x06
     ebc:	8f 81       	ldd	r24, Y+7	; 0x07
     ebe:	98 85       	ldd	r25, Y+8	; 0x08
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	4f e7       	ldi	r20, 0x7F	; 127
     ec6:	53 e4       	ldi	r21, 0x43	; 67
     ec8:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__gtsf2>
     ecc:	18 16       	cp	r1, r24
     ece:	0c f0       	brlt	.+2      	; 0xed2 <sygnal+0x9c>
     ed0:	10 e0       	ldi	r17, 0x00	; 0
     ed2:	11 23       	and	r17, r17
     ed4:	09 f4       	brne	.+2      	; 0xed8 <sygnal+0xa2>
     ed6:	89 c0       	rjmp	.+274    	; 0xfea <sygnal+0x1b4>
	{
		_delay_ms(__us / 1000.0);
     ed8:	69 81       	ldd	r22, Y+1	; 0x01
     eda:	7a 81       	ldd	r23, Y+2	; 0x02
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	9c 81       	ldd	r25, Y+4	; 0x04
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	4a e7       	ldi	r20, 0x7A	; 122
     ee6:	54 e4       	ldi	r21, 0x44	; 68
     ee8:	0e 94 c5 0b 	call	0x178a	; 0x178a <__divsf3>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	8a 87       	std	Y+10, r24	; 0x0a
     ef2:	9b 87       	std	Y+11, r25	; 0x0b
     ef4:	ac 87       	std	Y+12, r26	; 0x0c
     ef6:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     ef8:	6a 85       	ldd	r22, Y+10	; 0x0a
     efa:	7b 85       	ldd	r23, Y+11	; 0x0b
     efc:	8c 85       	ldd	r24, Y+12	; 0x0c
     efe:	9d 85       	ldd	r25, Y+13	; 0x0d
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	4a e7       	ldi	r20, 0x7A	; 122
     f06:	53 e4       	ldi	r21, 0x43	; 67
     f08:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	8e 87       	std	Y+14, r24	; 0x0e
     f12:	9f 87       	std	Y+15, r25	; 0x0f
     f14:	a8 8b       	std	Y+16, r26	; 0x10
     f16:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     f18:	11 e0       	ldi	r17, 0x01	; 1
     f1a:	6e 85       	ldd	r22, Y+14	; 0x0e
     f1c:	7f 85       	ldd	r23, Y+15	; 0x0f
     f1e:	88 89       	ldd	r24, Y+16	; 0x10
     f20:	99 89       	ldd	r25, Y+17	; 0x11
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	40 e8       	ldi	r20, 0x80	; 128
     f28:	5f e3       	ldi	r21, 0x3F	; 63
     f2a:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__ltsf2>
     f2e:	88 23       	and	r24, r24
     f30:	0c f0       	brlt	.+2      	; 0xf34 <sygnal+0xfe>
     f32:	10 e0       	ldi	r17, 0x00	; 0
     f34:	11 23       	and	r17, r17
     f36:	29 f0       	breq	.+10     	; 0xf42 <sygnal+0x10c>
		__ticks = 1;
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	9b 8b       	std	Y+19, r25	; 0x13
     f3e:	8a 8b       	std	Y+18, r24	; 0x12
     f40:	46 c0       	rjmp	.+140    	; 0xfce <sygnal+0x198>
	else if (__tmp > 65535)
     f42:	11 e0       	ldi	r17, 0x01	; 1
     f44:	6e 85       	ldd	r22, Y+14	; 0x0e
     f46:	7f 85       	ldd	r23, Y+15	; 0x0f
     f48:	88 89       	ldd	r24, Y+16	; 0x10
     f4a:	99 89       	ldd	r25, Y+17	; 0x11
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	3f ef       	ldi	r19, 0xFF	; 255
     f50:	4f e7       	ldi	r20, 0x7F	; 127
     f52:	57 e4       	ldi	r21, 0x47	; 71
     f54:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__gtsf2>
     f58:	18 16       	cp	r1, r24
     f5a:	0c f0       	brlt	.+2      	; 0xf5e <sygnal+0x128>
     f5c:	10 e0       	ldi	r17, 0x00	; 0
     f5e:	11 23       	and	r17, r17
     f60:	61 f1       	breq	.+88     	; 0xfba <sygnal+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f62:	6a 85       	ldd	r22, Y+10	; 0x0a
     f64:	7b 85       	ldd	r23, Y+11	; 0x0b
     f66:	8c 85       	ldd	r24, Y+12	; 0x0c
     f68:	9d 85       	ldd	r25, Y+13	; 0x0d
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	40 e2       	ldi	r20, 0x20	; 32
     f70:	51 e4       	ldi	r21, 0x41	; 65
     f72:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	bc 01       	movw	r22, r24
     f7c:	cd 01       	movw	r24, r26
     f7e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fixunssfsi>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	9b 8b       	std	Y+19, r25	; 0x13
     f88:	8a 8b       	std	Y+18, r24	; 0x12
     f8a:	12 c0       	rjmp	.+36     	; 0xfb0 <sygnal+0x17a>
     f8c:	89 e1       	ldi	r24, 0x19	; 25
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	9d 8b       	std	Y+21, r25	; 0x15
     f92:	8c 8b       	std	Y+20, r24	; 0x14
     f94:	8c 89       	ldd	r24, Y+20	; 0x14
     f96:	9d 89       	ldd	r25, Y+21	; 0x15
     f98:	8c 01       	movw	r16, r24
     f9a:	c8 01       	movw	r24, r16
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <sygnal+0x166>
     fa0:	8c 01       	movw	r16, r24
     fa2:	1d 8b       	std	Y+21, r17	; 0x15
     fa4:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa6:	8a 89       	ldd	r24, Y+18	; 0x12
     fa8:	9b 89       	ldd	r25, Y+19	; 0x13
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	9b 8b       	std	Y+19, r25	; 0x13
     fae:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb0:	8a 89       	ldd	r24, Y+18	; 0x12
     fb2:	9b 89       	ldd	r25, Y+19	; 0x13
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	51 f7       	brne	.-44     	; 0xf8c <sygnal+0x156>
     fb8:	28 c0       	rjmp	.+80     	; 0x100a <sygnal+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fba:	6e 85       	ldd	r22, Y+14	; 0x0e
     fbc:	7f 85       	ldd	r23, Y+15	; 0x0f
     fbe:	88 89       	ldd	r24, Y+16	; 0x10
     fc0:	99 89       	ldd	r25, Y+17	; 0x11
     fc2:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fixunssfsi>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	9b 8b       	std	Y+19, r25	; 0x13
     fcc:	8a 8b       	std	Y+18, r24	; 0x12
     fce:	8a 89       	ldd	r24, Y+18	; 0x12
     fd0:	9b 89       	ldd	r25, Y+19	; 0x13
     fd2:	9f 8b       	std	Y+23, r25	; 0x17
     fd4:	8e 8b       	std	Y+22, r24	; 0x16
     fd6:	8e 89       	ldd	r24, Y+22	; 0x16
     fd8:	9f 89       	ldd	r25, Y+23	; 0x17
     fda:	8c 01       	movw	r16, r24
     fdc:	f8 01       	movw	r30, r16
     fde:	31 97       	sbiw	r30, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <sygnal+0x1a8>
     fe2:	8f 01       	movw	r16, r30
     fe4:	1f 8b       	std	Y+23, r17	; 0x17
     fe6:	0e 8b       	std	Y+22, r16	; 0x16
     fe8:	10 c0       	rjmp	.+32     	; 0x100a <sygnal+0x1d4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fea:	6d 81       	ldd	r22, Y+5	; 0x05
     fec:	7e 81       	ldd	r23, Y+6	; 0x06
     fee:	8f 81       	ldd	r24, Y+7	; 0x07
     ff0:	98 85       	ldd	r25, Y+8	; 0x08
     ff2:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	89 87       	std	Y+9, r24	; 0x09
     ffc:	89 85       	ldd	r24, Y+9	; 0x09
     ffe:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1000:	88 8d       	ldd	r24, Y+24	; 0x18
    1002:	18 2f       	mov	r17, r24
    1004:	1a 95       	dec	r17
    1006:	f1 f7       	brne	.-4      	; 0x1004 <sygnal+0x1ce>
    1008:	18 8f       	std	Y+24, r17	; 0x18
        _delay_us(2);
        PORTB|=(1<<PB1);
    100a:	88 e3       	ldi	r24, 0x38	; 56
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	28 e3       	ldi	r18, 0x38	; 56
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	f9 01       	movw	r30, r18
    1014:	20 81       	ld	r18, Z
    1016:	22 60       	ori	r18, 0x02	; 2
    1018:	fc 01       	movw	r30, r24
    101a:	20 83       	st	Z, r18
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	a0 e2       	ldi	r26, 0x20	; 32
    1022:	b1 e4       	ldi	r27, 0x41	; 65
    1024:	89 8f       	std	Y+25, r24	; 0x19
    1026:	9a 8f       	std	Y+26, r25	; 0x1a
    1028:	ab 8f       	std	Y+27, r26	; 0x1b
    102a:	bc 8f       	std	Y+28, r27	; 0x1c
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    102c:	69 8d       	ldd	r22, Y+25	; 0x19
    102e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1030:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1032:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1034:	2b ea       	ldi	r18, 0xAB	; 171
    1036:	3a ea       	ldi	r19, 0xAA	; 170
    1038:	4a ea       	ldi	r20, 0xAA	; 170
    103a:	5e e3       	ldi	r21, 0x3E	; 62
    103c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	8d 8f       	std	Y+29, r24	; 0x1d
    1046:	9e 8f       	std	Y+30, r25	; 0x1e
    1048:	af 8f       	std	Y+31, r26	; 0x1f
    104a:	b8 a3       	std	Y+32, r27	; 0x20
	if (__tmp < 1.0)
    104c:	11 e0       	ldi	r17, 0x01	; 1
    104e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1050:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1052:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1054:	98 a1       	ldd	r25, Y+32	; 0x20
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	40 e8       	ldi	r20, 0x80	; 128
    105c:	5f e3       	ldi	r21, 0x3F	; 63
    105e:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__ltsf2>
    1062:	88 23       	and	r24, r24
    1064:	0c f0       	brlt	.+2      	; 0x1068 <sygnal+0x232>
    1066:	10 e0       	ldi	r17, 0x00	; 0
    1068:	11 23       	and	r17, r17
    106a:	19 f0       	breq	.+6      	; 0x1072 <sygnal+0x23c>
		__ticks = 1;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	89 a3       	std	Y+33, r24	; 0x21
    1070:	a3 c0       	rjmp	.+326    	; 0x11b8 <sygnal+0x382>
	else if (__tmp > 255)
    1072:	11 e0       	ldi	r17, 0x01	; 1
    1074:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1076:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1078:	8f 8d       	ldd	r24, Y+31	; 0x1f
    107a:	98 a1       	ldd	r25, Y+32	; 0x20
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	4f e7       	ldi	r20, 0x7F	; 127
    1082:	53 e4       	ldi	r21, 0x43	; 67
    1084:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__gtsf2>
    1088:	18 16       	cp	r1, r24
    108a:	0c f0       	brlt	.+2      	; 0x108e <sygnal+0x258>
    108c:	10 e0       	ldi	r17, 0x00	; 0
    108e:	11 23       	and	r17, r17
    1090:	09 f4       	brne	.+2      	; 0x1094 <sygnal+0x25e>
    1092:	89 c0       	rjmp	.+274    	; 0x11a6 <sygnal+0x370>
	{
		_delay_ms(__us / 1000.0);
    1094:	69 8d       	ldd	r22, Y+25	; 0x19
    1096:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1098:	8b 8d       	ldd	r24, Y+27	; 0x1b
    109a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	4a e7       	ldi	r20, 0x7A	; 122
    10a2:	54 e4       	ldi	r21, 0x44	; 68
    10a4:	0e 94 c5 0b 	call	0x178a	; 0x178a <__divsf3>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	8a a3       	std	Y+34, r24	; 0x22
    10ae:	9b a3       	std	Y+35, r25	; 0x23
    10b0:	ac a3       	std	Y+36, r26	; 0x24
    10b2:	bd a3       	std	Y+37, r27	; 0x25
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    10b4:	6a a1       	ldd	r22, Y+34	; 0x22
    10b6:	7b a1       	ldd	r23, Y+35	; 0x23
    10b8:	8c a1       	ldd	r24, Y+36	; 0x24
    10ba:	9d a1       	ldd	r25, Y+37	; 0x25
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	4a e7       	ldi	r20, 0x7A	; 122
    10c2:	53 e4       	ldi	r21, 0x43	; 67
    10c4:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	8e a3       	std	Y+38, r24	; 0x26
    10ce:	9f a3       	std	Y+39, r25	; 0x27
    10d0:	a8 a7       	std	Y+40, r26	; 0x28
    10d2:	b9 a7       	std	Y+41, r27	; 0x29
	if (__tmp < 1.0)
    10d4:	11 e0       	ldi	r17, 0x01	; 1
    10d6:	6e a1       	ldd	r22, Y+38	; 0x26
    10d8:	7f a1       	ldd	r23, Y+39	; 0x27
    10da:	88 a5       	ldd	r24, Y+40	; 0x28
    10dc:	99 a5       	ldd	r25, Y+41	; 0x29
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e8       	ldi	r20, 0x80	; 128
    10e4:	5f e3       	ldi	r21, 0x3F	; 63
    10e6:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__ltsf2>
    10ea:	88 23       	and	r24, r24
    10ec:	0c f0       	brlt	.+2      	; 0x10f0 <sygnal+0x2ba>
    10ee:	10 e0       	ldi	r17, 0x00	; 0
    10f0:	11 23       	and	r17, r17
    10f2:	29 f0       	breq	.+10     	; 0x10fe <sygnal+0x2c8>
		__ticks = 1;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	9b a7       	std	Y+43, r25	; 0x2b
    10fa:	8a a7       	std	Y+42, r24	; 0x2a
    10fc:	46 c0       	rjmp	.+140    	; 0x118a <sygnal+0x354>
	else if (__tmp > 65535)
    10fe:	11 e0       	ldi	r17, 0x01	; 1
    1100:	6e a1       	ldd	r22, Y+38	; 0x26
    1102:	7f a1       	ldd	r23, Y+39	; 0x27
    1104:	88 a5       	ldd	r24, Y+40	; 0x28
    1106:	99 a5       	ldd	r25, Y+41	; 0x29
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	3f ef       	ldi	r19, 0xFF	; 255
    110c:	4f e7       	ldi	r20, 0x7F	; 127
    110e:	57 e4       	ldi	r21, 0x47	; 71
    1110:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__gtsf2>
    1114:	18 16       	cp	r1, r24
    1116:	0c f0       	brlt	.+2      	; 0x111a <sygnal+0x2e4>
    1118:	10 e0       	ldi	r17, 0x00	; 0
    111a:	11 23       	and	r17, r17
    111c:	61 f1       	breq	.+88     	; 0x1176 <sygnal+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111e:	6a a1       	ldd	r22, Y+34	; 0x22
    1120:	7b a1       	ldd	r23, Y+35	; 0x23
    1122:	8c a1       	ldd	r24, Y+36	; 0x24
    1124:	9d a1       	ldd	r25, Y+37	; 0x25
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e2       	ldi	r20, 0x20	; 32
    112c:	51 e4       	ldi	r21, 0x41	; 65
    112e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__mulsf3>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9b a7       	std	Y+43, r25	; 0x2b
    1144:	8a a7       	std	Y+42, r24	; 0x2a
    1146:	12 c0       	rjmp	.+36     	; 0x116c <sygnal+0x336>
    1148:	89 e1       	ldi	r24, 0x19	; 25
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	9d a7       	std	Y+45, r25	; 0x2d
    114e:	8c a7       	std	Y+44, r24	; 0x2c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1150:	8c a5       	ldd	r24, Y+44	; 0x2c
    1152:	9d a5       	ldd	r25, Y+45	; 0x2d
    1154:	8c 01       	movw	r16, r24
    1156:	c8 01       	movw	r24, r16
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <sygnal+0x322>
    115c:	8c 01       	movw	r16, r24
    115e:	1d a7       	std	Y+45, r17	; 0x2d
    1160:	0c a7       	std	Y+44, r16	; 0x2c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1162:	8a a5       	ldd	r24, Y+42	; 0x2a
    1164:	9b a5       	ldd	r25, Y+43	; 0x2b
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	9b a7       	std	Y+43, r25	; 0x2b
    116a:	8a a7       	std	Y+42, r24	; 0x2a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    116c:	8a a5       	ldd	r24, Y+42	; 0x2a
    116e:	9b a5       	ldd	r25, Y+43	; 0x2b
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	51 f7       	brne	.-44     	; 0x1148 <sygnal+0x312>
    1174:	28 c0       	rjmp	.+80     	; 0x11c6 <sygnal+0x390>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1176:	6e a1       	ldd	r22, Y+38	; 0x26
    1178:	7f a1       	ldd	r23, Y+39	; 0x27
    117a:	88 a5       	ldd	r24, Y+40	; 0x28
    117c:	99 a5       	ldd	r25, Y+41	; 0x29
    117e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fixunssfsi>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	9b a7       	std	Y+43, r25	; 0x2b
    1188:	8a a7       	std	Y+42, r24	; 0x2a
    118a:	8a a5       	ldd	r24, Y+42	; 0x2a
    118c:	9b a5       	ldd	r25, Y+43	; 0x2b
    118e:	9f a7       	std	Y+47, r25	; 0x2f
    1190:	8e a7       	std	Y+46, r24	; 0x2e
    1192:	8e a5       	ldd	r24, Y+46	; 0x2e
    1194:	9f a5       	ldd	r25, Y+47	; 0x2f
    1196:	8c 01       	movw	r16, r24
    1198:	f8 01       	movw	r30, r16
    119a:	31 97       	sbiw	r30, 0x01	; 1
    119c:	f1 f7       	brne	.-4      	; 0x119a <sygnal+0x364>
    119e:	8f 01       	movw	r16, r30
    11a0:	1f a7       	std	Y+47, r17	; 0x2f
    11a2:	0e a7       	std	Y+46, r16	; 0x2e
    11a4:	10 c0       	rjmp	.+32     	; 0x11c6 <sygnal+0x390>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    11a6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    11a8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    11aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11ac:	98 a1       	ldd	r25, Y+32	; 0x20
    11ae:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__fixunssfsi>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	89 a3       	std	Y+33, r24	; 0x21
    11b8:	89 a1       	ldd	r24, Y+33	; 0x21
    11ba:	88 ab       	std	Y+48, r24	; 0x30
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11bc:	88 a9       	ldd	r24, Y+48	; 0x30
    11be:	18 2f       	mov	r17, r24
    11c0:	1a 95       	dec	r17
    11c2:	f1 f7       	brne	.-4      	; 0x11c0 <sygnal+0x38a>
    11c4:	18 ab       	std	Y+48, r17	; 0x30
        _delay_us(10);
        PORTB&=~(1<<PB1);
    11c6:	88 e3       	ldi	r24, 0x38	; 56
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	28 e3       	ldi	r18, 0x38	; 56
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	f9 01       	movw	r30, r18
    11d0:	20 81       	ld	r18, Z
    11d2:	2d 7f       	andi	r18, 0xFD	; 253
    11d4:	fc 01       	movw	r30, r24
    11d6:	20 83       	st	Z, r18
}
    11d8:	e0 96       	adiw	r28, 0x30	; 48
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	08 95       	ret

000011ee <__fixunssfsi>:
    11ee:	ef 92       	push	r14
    11f0:	ff 92       	push	r15
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	7b 01       	movw	r14, r22
    11f8:	8c 01       	movw	r16, r24
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	5f e4       	ldi	r21, 0x4F	; 79
    1202:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__gesf2>
    1206:	87 fd       	sbrc	r24, 7
    1208:	11 c0       	rjmp	.+34     	; 0x122c <__fixunssfsi+0x3e>
    120a:	c8 01       	movw	r24, r16
    120c:	b7 01       	movw	r22, r14
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	5f e4       	ldi	r21, 0x4F	; 79
    1216:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__subsf3>
    121a:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fixsfsi>
    121e:	9b 01       	movw	r18, r22
    1220:	ac 01       	movw	r20, r24
    1222:	20 50       	subi	r18, 0x00	; 0
    1224:	30 40       	sbci	r19, 0x00	; 0
    1226:	40 40       	sbci	r20, 0x00	; 0
    1228:	50 48       	sbci	r21, 0x80	; 128
    122a:	06 c0       	rjmp	.+12     	; 0x1238 <__fixunssfsi+0x4a>
    122c:	c8 01       	movw	r24, r16
    122e:	b7 01       	movw	r22, r14
    1230:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fixsfsi>
    1234:	9b 01       	movw	r18, r22
    1236:	ac 01       	movw	r20, r24
    1238:	b9 01       	movw	r22, r18
    123a:	ca 01       	movw	r24, r20
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	ff 90       	pop	r15
    1242:	ef 90       	pop	r14
    1244:	08 95       	ret

00001246 <_fpadd_parts>:
    1246:	a0 e0       	ldi	r26, 0x00	; 0
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e9 e2       	ldi	r30, 0x29	; 41
    124c:	f9 e0       	ldi	r31, 0x09	; 9
    124e:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <__prologue_saves__+0x8>
    1252:	fc 01       	movw	r30, r24
    1254:	ea 01       	movw	r28, r20
    1256:	80 81       	ld	r24, Z
    1258:	82 30       	cpi	r24, 0x02	; 2
    125a:	08 f4       	brcc	.+2      	; 0x125e <_fpadd_parts+0x18>
    125c:	38 c1       	rjmp	.+624    	; 0x14ce <_fpadd_parts+0x288>
    125e:	db 01       	movw	r26, r22
    1260:	9c 91       	ld	r25, X
    1262:	92 30       	cpi	r25, 0x02	; 2
    1264:	08 f4       	brcc	.+2      	; 0x1268 <_fpadd_parts+0x22>
    1266:	30 c1       	rjmp	.+608    	; 0x14c8 <_fpadd_parts+0x282>
    1268:	84 30       	cpi	r24, 0x04	; 4
    126a:	59 f4       	brne	.+22     	; 0x1282 <_fpadd_parts+0x3c>
    126c:	94 30       	cpi	r25, 0x04	; 4
    126e:	09 f0       	breq	.+2      	; 0x1272 <_fpadd_parts+0x2c>
    1270:	2e c1       	rjmp	.+604    	; 0x14ce <_fpadd_parts+0x288>
    1272:	91 81       	ldd	r25, Z+1	; 0x01
    1274:	11 96       	adiw	r26, 0x01	; 1
    1276:	8c 91       	ld	r24, X
    1278:	11 97       	sbiw	r26, 0x01	; 1
    127a:	98 17       	cp	r25, r24
    127c:	09 f0       	breq	.+2      	; 0x1280 <_fpadd_parts+0x3a>
    127e:	21 c1       	rjmp	.+578    	; 0x14c2 <_fpadd_parts+0x27c>
    1280:	26 c1       	rjmp	.+588    	; 0x14ce <_fpadd_parts+0x288>
    1282:	94 30       	cpi	r25, 0x04	; 4
    1284:	09 f4       	brne	.+2      	; 0x1288 <_fpadd_parts+0x42>
    1286:	20 c1       	rjmp	.+576    	; 0x14c8 <_fpadd_parts+0x282>
    1288:	92 30       	cpi	r25, 0x02	; 2
    128a:	b1 f4       	brne	.+44     	; 0x12b8 <_fpadd_parts+0x72>
    128c:	82 30       	cpi	r24, 0x02	; 2
    128e:	09 f0       	breq	.+2      	; 0x1292 <_fpadd_parts+0x4c>
    1290:	1e c1       	rjmp	.+572    	; 0x14ce <_fpadd_parts+0x288>
    1292:	ca 01       	movw	r24, r20
    1294:	af 01       	movw	r20, r30
    1296:	28 e0       	ldi	r18, 0x08	; 8
    1298:	da 01       	movw	r26, r20
    129a:	0d 90       	ld	r0, X+
    129c:	ad 01       	movw	r20, r26
    129e:	dc 01       	movw	r26, r24
    12a0:	0d 92       	st	X+, r0
    12a2:	cd 01       	movw	r24, r26
    12a4:	21 50       	subi	r18, 0x01	; 1
    12a6:	c1 f7       	brne	.-16     	; 0x1298 <_fpadd_parts+0x52>
    12a8:	db 01       	movw	r26, r22
    12aa:	11 96       	adiw	r26, 0x01	; 1
    12ac:	8c 91       	ld	r24, X
    12ae:	11 97       	sbiw	r26, 0x01	; 1
    12b0:	91 81       	ldd	r25, Z+1	; 0x01
    12b2:	89 23       	and	r24, r25
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	0a c1       	rjmp	.+532    	; 0x14cc <_fpadd_parts+0x286>
    12b8:	82 30       	cpi	r24, 0x02	; 2
    12ba:	09 f4       	brne	.+2      	; 0x12be <_fpadd_parts+0x78>
    12bc:	05 c1       	rjmp	.+522    	; 0x14c8 <_fpadd_parts+0x282>
    12be:	c2 80       	ldd	r12, Z+2	; 0x02
    12c0:	d3 80       	ldd	r13, Z+3	; 0x03
    12c2:	db 01       	movw	r26, r22
    12c4:	12 96       	adiw	r26, 0x02	; 2
    12c6:	6d 90       	ld	r6, X+
    12c8:	7c 90       	ld	r7, X
    12ca:	13 97       	sbiw	r26, 0x03	; 3
    12cc:	24 81       	ldd	r18, Z+4	; 0x04
    12ce:	35 81       	ldd	r19, Z+5	; 0x05
    12d0:	46 81       	ldd	r20, Z+6	; 0x06
    12d2:	57 81       	ldd	r21, Z+7	; 0x07
    12d4:	14 96       	adiw	r26, 0x04	; 4
    12d6:	ed 90       	ld	r14, X+
    12d8:	fd 90       	ld	r15, X+
    12da:	0d 91       	ld	r16, X+
    12dc:	1c 91       	ld	r17, X
    12de:	17 97       	sbiw	r26, 0x07	; 7
    12e0:	c6 01       	movw	r24, r12
    12e2:	86 19       	sub	r24, r6
    12e4:	97 09       	sbc	r25, r7
    12e6:	5c 01       	movw	r10, r24
    12e8:	97 ff       	sbrs	r25, 7
    12ea:	04 c0       	rjmp	.+8      	; 0x12f4 <_fpadd_parts+0xae>
    12ec:	aa 24       	eor	r10, r10
    12ee:	bb 24       	eor	r11, r11
    12f0:	a8 1a       	sub	r10, r24
    12f2:	b9 0a       	sbc	r11, r25
    12f4:	b0 e2       	ldi	r27, 0x20	; 32
    12f6:	ab 16       	cp	r10, r27
    12f8:	b1 04       	cpc	r11, r1
    12fa:	0c f0       	brlt	.+2      	; 0x12fe <_fpadd_parts+0xb8>
    12fc:	61 c0       	rjmp	.+194    	; 0x13c0 <_fpadd_parts+0x17a>
    12fe:	18 16       	cp	r1, r24
    1300:	19 06       	cpc	r1, r25
    1302:	6c f5       	brge	.+90     	; 0x135e <_fpadd_parts+0x118>
    1304:	37 01       	movw	r6, r14
    1306:	48 01       	movw	r8, r16
    1308:	0a 2c       	mov	r0, r10
    130a:	04 c0       	rjmp	.+8      	; 0x1314 <_fpadd_parts+0xce>
    130c:	96 94       	lsr	r9
    130e:	87 94       	ror	r8
    1310:	77 94       	ror	r7
    1312:	67 94       	ror	r6
    1314:	0a 94       	dec	r0
    1316:	d2 f7       	brpl	.-12     	; 0x130c <_fpadd_parts+0xc6>
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	a0 e0       	ldi	r26, 0x00	; 0
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	0a 2c       	mov	r0, r10
    1322:	04 c0       	rjmp	.+8      	; 0x132c <_fpadd_parts+0xe6>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	aa 1f       	adc	r26, r26
    132a:	bb 1f       	adc	r27, r27
    132c:	0a 94       	dec	r0
    132e:	d2 f7       	brpl	.-12     	; 0x1324 <_fpadd_parts+0xde>
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	a1 09       	sbc	r26, r1
    1334:	b1 09       	sbc	r27, r1
    1336:	8e 21       	and	r24, r14
    1338:	9f 21       	and	r25, r15
    133a:	a0 23       	and	r26, r16
    133c:	b1 23       	and	r27, r17
    133e:	ee 24       	eor	r14, r14
    1340:	ff 24       	eor	r15, r15
    1342:	87 01       	movw	r16, r14
    1344:	e3 94       	inc	r14
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	a1 05       	cpc	r26, r1
    134a:	b1 05       	cpc	r27, r1
    134c:	19 f4       	brne	.+6      	; 0x1354 <_fpadd_parts+0x10e>
    134e:	ee 24       	eor	r14, r14
    1350:	ff 24       	eor	r15, r15
    1352:	87 01       	movw	r16, r14
    1354:	e6 28       	or	r14, r6
    1356:	f7 28       	or	r15, r7
    1358:	08 29       	or	r16, r8
    135a:	19 29       	or	r17, r9
    135c:	3c c0       	rjmp	.+120    	; 0x13d6 <_fpadd_parts+0x190>
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	d1 f1       	breq	.+116    	; 0x13d6 <_fpadd_parts+0x190>
    1362:	ca 0c       	add	r12, r10
    1364:	db 1c       	adc	r13, r11
    1366:	39 01       	movw	r6, r18
    1368:	4a 01       	movw	r8, r20
    136a:	0a 2c       	mov	r0, r10
    136c:	04 c0       	rjmp	.+8      	; 0x1376 <_fpadd_parts+0x130>
    136e:	96 94       	lsr	r9
    1370:	87 94       	ror	r8
    1372:	77 94       	ror	r7
    1374:	67 94       	ror	r6
    1376:	0a 94       	dec	r0
    1378:	d2 f7       	brpl	.-12     	; 0x136e <_fpadd_parts+0x128>
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	a0 e0       	ldi	r26, 0x00	; 0
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	0a 2c       	mov	r0, r10
    1384:	04 c0       	rjmp	.+8      	; 0x138e <_fpadd_parts+0x148>
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	aa 1f       	adc	r26, r26
    138c:	bb 1f       	adc	r27, r27
    138e:	0a 94       	dec	r0
    1390:	d2 f7       	brpl	.-12     	; 0x1386 <_fpadd_parts+0x140>
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	a1 09       	sbc	r26, r1
    1396:	b1 09       	sbc	r27, r1
    1398:	82 23       	and	r24, r18
    139a:	93 23       	and	r25, r19
    139c:	a4 23       	and	r26, r20
    139e:	b5 23       	and	r27, r21
    13a0:	21 e0       	ldi	r18, 0x01	; 1
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e0       	ldi	r20, 0x00	; 0
    13a6:	50 e0       	ldi	r21, 0x00	; 0
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	a1 05       	cpc	r26, r1
    13ac:	b1 05       	cpc	r27, r1
    13ae:	19 f4       	brne	.+6      	; 0x13b6 <_fpadd_parts+0x170>
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	a9 01       	movw	r20, r18
    13b6:	26 29       	or	r18, r6
    13b8:	37 29       	or	r19, r7
    13ba:	48 29       	or	r20, r8
    13bc:	59 29       	or	r21, r9
    13be:	0b c0       	rjmp	.+22     	; 0x13d6 <_fpadd_parts+0x190>
    13c0:	6c 14       	cp	r6, r12
    13c2:	7d 04       	cpc	r7, r13
    13c4:	24 f4       	brge	.+8      	; 0x13ce <_fpadd_parts+0x188>
    13c6:	ee 24       	eor	r14, r14
    13c8:	ff 24       	eor	r15, r15
    13ca:	87 01       	movw	r16, r14
    13cc:	04 c0       	rjmp	.+8      	; 0x13d6 <_fpadd_parts+0x190>
    13ce:	63 01       	movw	r12, r6
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	a9 01       	movw	r20, r18
    13d6:	81 81       	ldd	r24, Z+1	; 0x01
    13d8:	fb 01       	movw	r30, r22
    13da:	91 81       	ldd	r25, Z+1	; 0x01
    13dc:	89 17       	cp	r24, r25
    13de:	09 f4       	brne	.+2      	; 0x13e2 <_fpadd_parts+0x19c>
    13e0:	45 c0       	rjmp	.+138    	; 0x146c <_fpadd_parts+0x226>
    13e2:	88 23       	and	r24, r24
    13e4:	49 f0       	breq	.+18     	; 0x13f8 <_fpadd_parts+0x1b2>
    13e6:	d8 01       	movw	r26, r16
    13e8:	c7 01       	movw	r24, r14
    13ea:	82 1b       	sub	r24, r18
    13ec:	93 0b       	sbc	r25, r19
    13ee:	a4 0b       	sbc	r26, r20
    13f0:	b5 0b       	sbc	r27, r21
    13f2:	9c 01       	movw	r18, r24
    13f4:	ad 01       	movw	r20, r26
    13f6:	04 c0       	rjmp	.+8      	; 0x1400 <_fpadd_parts+0x1ba>
    13f8:	2e 19       	sub	r18, r14
    13fa:	3f 09       	sbc	r19, r15
    13fc:	40 0b       	sbc	r20, r16
    13fe:	51 0b       	sbc	r21, r17
    1400:	57 fd       	sbrc	r21, 7
    1402:	04 c0       	rjmp	.+8      	; 0x140c <_fpadd_parts+0x1c6>
    1404:	19 82       	std	Y+1, r1	; 0x01
    1406:	db 82       	std	Y+3, r13	; 0x03
    1408:	ca 82       	std	Y+2, r12	; 0x02
    140a:	0b c0       	rjmp	.+22     	; 0x1422 <_fpadd_parts+0x1dc>
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	db 82       	std	Y+3, r13	; 0x03
    1412:	ca 82       	std	Y+2, r12	; 0x02
    1414:	50 95       	com	r21
    1416:	40 95       	com	r20
    1418:	30 95       	com	r19
    141a:	21 95       	neg	r18
    141c:	3f 4f       	sbci	r19, 0xFF	; 255
    141e:	4f 4f       	sbci	r20, 0xFF	; 255
    1420:	5f 4f       	sbci	r21, 0xFF	; 255
    1422:	2c 83       	std	Y+4, r18	; 0x04
    1424:	3d 83       	std	Y+5, r19	; 0x05
    1426:	4e 83       	std	Y+6, r20	; 0x06
    1428:	5f 83       	std	Y+7, r21	; 0x07
    142a:	0d c0       	rjmp	.+26     	; 0x1446 <_fpadd_parts+0x200>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	aa 1f       	adc	r26, r26
    1432:	bb 1f       	adc	r27, r27
    1434:	8c 83       	std	Y+4, r24	; 0x04
    1436:	9d 83       	std	Y+5, r25	; 0x05
    1438:	ae 83       	std	Y+6, r26	; 0x06
    143a:	bf 83       	std	Y+7, r27	; 0x07
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	9b 81       	ldd	r25, Y+3	; 0x03
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	9b 83       	std	Y+3, r25	; 0x03
    1444:	8a 83       	std	Y+2, r24	; 0x02
    1446:	8c 81       	ldd	r24, Y+4	; 0x04
    1448:	9d 81       	ldd	r25, Y+5	; 0x05
    144a:	ae 81       	ldd	r26, Y+6	; 0x06
    144c:	bf 81       	ldd	r27, Y+7	; 0x07
    144e:	9c 01       	movw	r18, r24
    1450:	ad 01       	movw	r20, r26
    1452:	21 50       	subi	r18, 0x01	; 1
    1454:	30 40       	sbci	r19, 0x00	; 0
    1456:	40 40       	sbci	r20, 0x00	; 0
    1458:	50 40       	sbci	r21, 0x00	; 0
    145a:	2f 3f       	cpi	r18, 0xFF	; 255
    145c:	ef ef       	ldi	r30, 0xFF	; 255
    145e:	3e 07       	cpc	r19, r30
    1460:	ef ef       	ldi	r30, 0xFF	; 255
    1462:	4e 07       	cpc	r20, r30
    1464:	ef e3       	ldi	r30, 0x3F	; 63
    1466:	5e 07       	cpc	r21, r30
    1468:	08 f3       	brcs	.-62     	; 0x142c <_fpadd_parts+0x1e6>
    146a:	0b c0       	rjmp	.+22     	; 0x1482 <_fpadd_parts+0x23c>
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	db 82       	std	Y+3, r13	; 0x03
    1470:	ca 82       	std	Y+2, r12	; 0x02
    1472:	2e 0d       	add	r18, r14
    1474:	3f 1d       	adc	r19, r15
    1476:	40 1f       	adc	r20, r16
    1478:	51 1f       	adc	r21, r17
    147a:	2c 83       	std	Y+4, r18	; 0x04
    147c:	3d 83       	std	Y+5, r19	; 0x05
    147e:	4e 83       	std	Y+6, r20	; 0x06
    1480:	5f 83       	std	Y+7, r21	; 0x07
    1482:	83 e0       	ldi	r24, 0x03	; 3
    1484:	88 83       	st	Y, r24
    1486:	2c 81       	ldd	r18, Y+4	; 0x04
    1488:	3d 81       	ldd	r19, Y+5	; 0x05
    148a:	4e 81       	ldd	r20, Y+6	; 0x06
    148c:	5f 81       	ldd	r21, Y+7	; 0x07
    148e:	57 ff       	sbrs	r21, 7
    1490:	1d c0       	rjmp	.+58     	; 0x14cc <_fpadd_parts+0x286>
    1492:	da 01       	movw	r26, r20
    1494:	c9 01       	movw	r24, r18
    1496:	81 70       	andi	r24, 0x01	; 1
    1498:	90 70       	andi	r25, 0x00	; 0
    149a:	a0 70       	andi	r26, 0x00	; 0
    149c:	b0 70       	andi	r27, 0x00	; 0
    149e:	56 95       	lsr	r21
    14a0:	47 95       	ror	r20
    14a2:	37 95       	ror	r19
    14a4:	27 95       	ror	r18
    14a6:	82 2b       	or	r24, r18
    14a8:	93 2b       	or	r25, r19
    14aa:	a4 2b       	or	r26, r20
    14ac:	b5 2b       	or	r27, r21
    14ae:	8c 83       	std	Y+4, r24	; 0x04
    14b0:	9d 83       	std	Y+5, r25	; 0x05
    14b2:	ae 83       	std	Y+6, r26	; 0x06
    14b4:	bf 83       	std	Y+7, r27	; 0x07
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	9b 81       	ldd	r25, Y+3	; 0x03
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	9b 83       	std	Y+3, r25	; 0x03
    14be:	8a 83       	std	Y+2, r24	; 0x02
    14c0:	05 c0       	rjmp	.+10     	; 0x14cc <_fpadd_parts+0x286>
    14c2:	eb e6       	ldi	r30, 0x6B	; 107
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	03 c0       	rjmp	.+6      	; 0x14ce <_fpadd_parts+0x288>
    14c8:	fb 01       	movw	r30, r22
    14ca:	01 c0       	rjmp	.+2      	; 0x14ce <_fpadd_parts+0x288>
    14cc:	fe 01       	movw	r30, r28
    14ce:	cf 01       	movw	r24, r30
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	ee e0       	ldi	r30, 0x0E	; 14
    14d6:	0c 94 27 0f 	jmp	0x1e4e	; 0x1e4e <__epilogue_restores__+0x8>

000014da <__addsf3>:
    14da:	a0 e2       	ldi	r26, 0x20	; 32
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e3 e7       	ldi	r30, 0x73	; 115
    14e0:	fa e0       	ldi	r31, 0x0A	; 10
    14e2:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__prologue_saves__+0x18>
    14e6:	69 83       	std	Y+1, r22	; 0x01
    14e8:	7a 83       	std	Y+2, r23	; 0x02
    14ea:	8b 83       	std	Y+3, r24	; 0x03
    14ec:	9c 83       	std	Y+4, r25	; 0x04
    14ee:	2d 83       	std	Y+5, r18	; 0x05
    14f0:	3e 83       	std	Y+6, r19	; 0x06
    14f2:	4f 83       	std	Y+7, r20	; 0x07
    14f4:	58 87       	std	Y+8, r21	; 0x08
    14f6:	89 e0       	ldi	r24, 0x09	; 9
    14f8:	e8 2e       	mov	r14, r24
    14fa:	f1 2c       	mov	r15, r1
    14fc:	ec 0e       	add	r14, r28
    14fe:	fd 1e       	adc	r15, r29
    1500:	ce 01       	movw	r24, r28
    1502:	01 96       	adiw	r24, 0x01	; 1
    1504:	b7 01       	movw	r22, r14
    1506:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__unpack_f>
    150a:	8e 01       	movw	r16, r28
    150c:	0f 5e       	subi	r16, 0xEF	; 239
    150e:	1f 4f       	sbci	r17, 0xFF	; 255
    1510:	ce 01       	movw	r24, r28
    1512:	05 96       	adiw	r24, 0x05	; 5
    1514:	b8 01       	movw	r22, r16
    1516:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__unpack_f>
    151a:	c7 01       	movw	r24, r14
    151c:	b8 01       	movw	r22, r16
    151e:	ae 01       	movw	r20, r28
    1520:	47 5e       	subi	r20, 0xE7	; 231
    1522:	5f 4f       	sbci	r21, 0xFF	; 255
    1524:	0e 94 23 09 	call	0x1246	; 0x1246 <_fpadd_parts>
    1528:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__pack_f>
    152c:	a0 96       	adiw	r28, 0x20	; 32
    152e:	e6 e0       	ldi	r30, 0x06	; 6
    1530:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__epilogue_restores__+0x18>

00001534 <__subsf3>:
    1534:	a0 e2       	ldi	r26, 0x20	; 32
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e0 ea       	ldi	r30, 0xA0	; 160
    153a:	fa e0       	ldi	r31, 0x0A	; 10
    153c:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__prologue_saves__+0x18>
    1540:	69 83       	std	Y+1, r22	; 0x01
    1542:	7a 83       	std	Y+2, r23	; 0x02
    1544:	8b 83       	std	Y+3, r24	; 0x03
    1546:	9c 83       	std	Y+4, r25	; 0x04
    1548:	2d 83       	std	Y+5, r18	; 0x05
    154a:	3e 83       	std	Y+6, r19	; 0x06
    154c:	4f 83       	std	Y+7, r20	; 0x07
    154e:	58 87       	std	Y+8, r21	; 0x08
    1550:	8e 01       	movw	r16, r28
    1552:	07 5f       	subi	r16, 0xF7	; 247
    1554:	1f 4f       	sbci	r17, 0xFF	; 255
    1556:	ce 01       	movw	r24, r28
    1558:	01 96       	adiw	r24, 0x01	; 1
    155a:	b8 01       	movw	r22, r16
    155c:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__unpack_f>
    1560:	91 e1       	ldi	r25, 0x11	; 17
    1562:	e9 2e       	mov	r14, r25
    1564:	f1 2c       	mov	r15, r1
    1566:	ec 0e       	add	r14, r28
    1568:	fd 1e       	adc	r15, r29
    156a:	ce 01       	movw	r24, r28
    156c:	05 96       	adiw	r24, 0x05	; 5
    156e:	b7 01       	movw	r22, r14
    1570:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__unpack_f>
    1574:	8a 89       	ldd	r24, Y+18	; 0x12
    1576:	91 e0       	ldi	r25, 0x01	; 1
    1578:	89 27       	eor	r24, r25
    157a:	8a 8b       	std	Y+18, r24	; 0x12
    157c:	c8 01       	movw	r24, r16
    157e:	b7 01       	movw	r22, r14
    1580:	ae 01       	movw	r20, r28
    1582:	47 5e       	subi	r20, 0xE7	; 231
    1584:	5f 4f       	sbci	r21, 0xFF	; 255
    1586:	0e 94 23 09 	call	0x1246	; 0x1246 <_fpadd_parts>
    158a:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__pack_f>
    158e:	a0 96       	adiw	r28, 0x20	; 32
    1590:	e6 e0       	ldi	r30, 0x06	; 6
    1592:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__epilogue_restores__+0x18>

00001596 <__mulsf3>:
    1596:	a0 e2       	ldi	r26, 0x20	; 32
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e1 ed       	ldi	r30, 0xD1	; 209
    159c:	fa e0       	ldi	r31, 0x0A	; 10
    159e:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__prologue_saves__>
    15a2:	69 83       	std	Y+1, r22	; 0x01
    15a4:	7a 83       	std	Y+2, r23	; 0x02
    15a6:	8b 83       	std	Y+3, r24	; 0x03
    15a8:	9c 83       	std	Y+4, r25	; 0x04
    15aa:	2d 83       	std	Y+5, r18	; 0x05
    15ac:	3e 83       	std	Y+6, r19	; 0x06
    15ae:	4f 83       	std	Y+7, r20	; 0x07
    15b0:	58 87       	std	Y+8, r21	; 0x08
    15b2:	ce 01       	movw	r24, r28
    15b4:	01 96       	adiw	r24, 0x01	; 1
    15b6:	be 01       	movw	r22, r28
    15b8:	67 5f       	subi	r22, 0xF7	; 247
    15ba:	7f 4f       	sbci	r23, 0xFF	; 255
    15bc:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__unpack_f>
    15c0:	ce 01       	movw	r24, r28
    15c2:	05 96       	adiw	r24, 0x05	; 5
    15c4:	be 01       	movw	r22, r28
    15c6:	6f 5e       	subi	r22, 0xEF	; 239
    15c8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ca:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__unpack_f>
    15ce:	99 85       	ldd	r25, Y+9	; 0x09
    15d0:	92 30       	cpi	r25, 0x02	; 2
    15d2:	78 f0       	brcs	.+30     	; 0x15f2 <__mulsf3+0x5c>
    15d4:	89 89       	ldd	r24, Y+17	; 0x11
    15d6:	82 30       	cpi	r24, 0x02	; 2
    15d8:	c0 f0       	brcs	.+48     	; 0x160a <__mulsf3+0x74>
    15da:	94 30       	cpi	r25, 0x04	; 4
    15dc:	19 f4       	brne	.+6      	; 0x15e4 <__mulsf3+0x4e>
    15de:	82 30       	cpi	r24, 0x02	; 2
    15e0:	41 f4       	brne	.+16     	; 0x15f2 <__mulsf3+0x5c>
    15e2:	cb c0       	rjmp	.+406    	; 0x177a <__mulsf3+0x1e4>
    15e4:	84 30       	cpi	r24, 0x04	; 4
    15e6:	19 f4       	brne	.+6      	; 0x15ee <__mulsf3+0x58>
    15e8:	92 30       	cpi	r25, 0x02	; 2
    15ea:	79 f4       	brne	.+30     	; 0x160a <__mulsf3+0x74>
    15ec:	c6 c0       	rjmp	.+396    	; 0x177a <__mulsf3+0x1e4>
    15ee:	92 30       	cpi	r25, 0x02	; 2
    15f0:	51 f4       	brne	.+20     	; 0x1606 <__mulsf3+0x70>
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	2a 85       	ldd	r18, Y+10	; 0x0a
    15f6:	9a 89       	ldd	r25, Y+18	; 0x12
    15f8:	29 17       	cp	r18, r25
    15fa:	09 f4       	brne	.+2      	; 0x15fe <__mulsf3+0x68>
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	8a 87       	std	Y+10, r24	; 0x0a
    1600:	ce 01       	movw	r24, r28
    1602:	09 96       	adiw	r24, 0x09	; 9
    1604:	bc c0       	rjmp	.+376    	; 0x177e <__mulsf3+0x1e8>
    1606:	82 30       	cpi	r24, 0x02	; 2
    1608:	51 f4       	brne	.+20     	; 0x161e <__mulsf3+0x88>
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	2a 85       	ldd	r18, Y+10	; 0x0a
    160e:	9a 89       	ldd	r25, Y+18	; 0x12
    1610:	29 17       	cp	r18, r25
    1612:	09 f4       	brne	.+2      	; 0x1616 <__mulsf3+0x80>
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	8a 8b       	std	Y+18, r24	; 0x12
    1618:	ce 01       	movw	r24, r28
    161a:	41 96       	adiw	r24, 0x11	; 17
    161c:	b0 c0       	rjmp	.+352    	; 0x177e <__mulsf3+0x1e8>
    161e:	6d 84       	ldd	r6, Y+13	; 0x0d
    1620:	7e 84       	ldd	r7, Y+14	; 0x0e
    1622:	8f 84       	ldd	r8, Y+15	; 0x0f
    1624:	98 88       	ldd	r9, Y+16	; 0x10
    1626:	ed 88       	ldd	r14, Y+21	; 0x15
    1628:	fe 88       	ldd	r15, Y+22	; 0x16
    162a:	0f 89       	ldd	r16, Y+23	; 0x17
    162c:	18 8d       	ldd	r17, Y+24	; 0x18
    162e:	e0 e2       	ldi	r30, 0x20	; 32
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	dc 01       	movw	r26, r24
    1638:	aa 24       	eor	r10, r10
    163a:	bb 24       	eor	r11, r11
    163c:	65 01       	movw	r12, r10
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	a9 01       	movw	r20, r18
    1644:	b3 01       	movw	r22, r6
    1646:	61 70       	andi	r22, 0x01	; 1
    1648:	70 70       	andi	r23, 0x00	; 0
    164a:	61 15       	cp	r22, r1
    164c:	71 05       	cpc	r23, r1
    164e:	d1 f0       	breq	.+52     	; 0x1684 <__mulsf3+0xee>
    1650:	2e 0d       	add	r18, r14
    1652:	3f 1d       	adc	r19, r15
    1654:	40 1f       	adc	r20, r16
    1656:	51 1f       	adc	r21, r17
    1658:	15 01       	movw	r2, r10
    165a:	26 01       	movw	r4, r12
    165c:	28 0e       	add	r2, r24
    165e:	39 1e       	adc	r3, r25
    1660:	4a 1e       	adc	r4, r26
    1662:	5b 1e       	adc	r5, r27
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	a0 e0       	ldi	r26, 0x00	; 0
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	2e 15       	cp	r18, r14
    166e:	3f 05       	cpc	r19, r15
    1670:	40 07       	cpc	r20, r16
    1672:	51 07       	cpc	r21, r17
    1674:	18 f0       	brcs	.+6      	; 0x167c <__mulsf3+0xe6>
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	dc 01       	movw	r26, r24
    167c:	82 0d       	add	r24, r2
    167e:	93 1d       	adc	r25, r3
    1680:	a4 1d       	adc	r26, r4
    1682:	b5 1d       	adc	r27, r5
    1684:	aa 0c       	add	r10, r10
    1686:	bb 1c       	adc	r11, r11
    1688:	cc 1c       	adc	r12, r12
    168a:	dd 1c       	adc	r13, r13
    168c:	17 ff       	sbrs	r17, 7
    168e:	09 c0       	rjmp	.+18     	; 0x16a2 <__mulsf3+0x10c>
    1690:	61 e0       	ldi	r22, 0x01	; 1
    1692:	26 2e       	mov	r2, r22
    1694:	31 2c       	mov	r3, r1
    1696:	41 2c       	mov	r4, r1
    1698:	51 2c       	mov	r5, r1
    169a:	a2 28       	or	r10, r2
    169c:	b3 28       	or	r11, r3
    169e:	c4 28       	or	r12, r4
    16a0:	d5 28       	or	r13, r5
    16a2:	31 97       	sbiw	r30, 0x01	; 1
    16a4:	49 f0       	breq	.+18     	; 0x16b8 <__mulsf3+0x122>
    16a6:	ee 0c       	add	r14, r14
    16a8:	ff 1c       	adc	r15, r15
    16aa:	00 1f       	adc	r16, r16
    16ac:	11 1f       	adc	r17, r17
    16ae:	96 94       	lsr	r9
    16b0:	87 94       	ror	r8
    16b2:	77 94       	ror	r7
    16b4:	67 94       	ror	r6
    16b6:	c6 cf       	rjmp	.-116    	; 0x1644 <__mulsf3+0xae>
    16b8:	6b 89       	ldd	r22, Y+19	; 0x13
    16ba:	7c 89       	ldd	r23, Y+20	; 0x14
    16bc:	eb 85       	ldd	r30, Y+11	; 0x0b
    16be:	fc 85       	ldd	r31, Y+12	; 0x0c
    16c0:	6e 0f       	add	r22, r30
    16c2:	7f 1f       	adc	r23, r31
    16c4:	6e 5f       	subi	r22, 0xFE	; 254
    16c6:	7f 4f       	sbci	r23, 0xFF	; 255
    16c8:	7c 8f       	std	Y+28, r23	; 0x1c
    16ca:	6b 8f       	std	Y+27, r22	; 0x1b
    16cc:	61 e0       	ldi	r22, 0x01	; 1
    16ce:	ea 85       	ldd	r30, Y+10	; 0x0a
    16d0:	7a 89       	ldd	r23, Y+18	; 0x12
    16d2:	e7 17       	cp	r30, r23
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <__mulsf3+0x142>
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	6a 8f       	std	Y+26, r22	; 0x1a
    16da:	6b 8d       	ldd	r22, Y+27	; 0x1b
    16dc:	7c 8d       	ldd	r23, Y+28	; 0x1c
    16de:	10 c0       	rjmp	.+32     	; 0x1700 <__mulsf3+0x16a>
    16e0:	fc 01       	movw	r30, r24
    16e2:	e1 70       	andi	r30, 0x01	; 1
    16e4:	f0 70       	andi	r31, 0x00	; 0
    16e6:	30 97       	sbiw	r30, 0x00	; 0
    16e8:	29 f0       	breq	.+10     	; 0x16f4 <__mulsf3+0x15e>
    16ea:	56 95       	lsr	r21
    16ec:	47 95       	ror	r20
    16ee:	37 95       	ror	r19
    16f0:	27 95       	ror	r18
    16f2:	50 68       	ori	r21, 0x80	; 128
    16f4:	b6 95       	lsr	r27
    16f6:	a7 95       	ror	r26
    16f8:	97 95       	ror	r25
    16fa:	87 95       	ror	r24
    16fc:	6f 5f       	subi	r22, 0xFF	; 255
    16fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1700:	b7 fd       	sbrc	r27, 7
    1702:	ee cf       	rjmp	.-36     	; 0x16e0 <__mulsf3+0x14a>
    1704:	0c c0       	rjmp	.+24     	; 0x171e <__mulsf3+0x188>
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	aa 1f       	adc	r26, r26
    170c:	bb 1f       	adc	r27, r27
    170e:	57 fd       	sbrc	r21, 7
    1710:	81 60       	ori	r24, 0x01	; 1
    1712:	22 0f       	add	r18, r18
    1714:	33 1f       	adc	r19, r19
    1716:	44 1f       	adc	r20, r20
    1718:	55 1f       	adc	r21, r21
    171a:	61 50       	subi	r22, 0x01	; 1
    171c:	70 40       	sbci	r23, 0x00	; 0
    171e:	80 30       	cpi	r24, 0x00	; 0
    1720:	e0 e0       	ldi	r30, 0x00	; 0
    1722:	9e 07       	cpc	r25, r30
    1724:	e0 e0       	ldi	r30, 0x00	; 0
    1726:	ae 07       	cpc	r26, r30
    1728:	e0 e4       	ldi	r30, 0x40	; 64
    172a:	be 07       	cpc	r27, r30
    172c:	60 f3       	brcs	.-40     	; 0x1706 <__mulsf3+0x170>
    172e:	6b 8f       	std	Y+27, r22	; 0x1b
    1730:	7c 8f       	std	Y+28, r23	; 0x1c
    1732:	6f e7       	ldi	r22, 0x7F	; 127
    1734:	e6 2e       	mov	r14, r22
    1736:	f1 2c       	mov	r15, r1
    1738:	01 2d       	mov	r16, r1
    173a:	11 2d       	mov	r17, r1
    173c:	e8 22       	and	r14, r24
    173e:	f9 22       	and	r15, r25
    1740:	0a 23       	and	r16, r26
    1742:	1b 23       	and	r17, r27
    1744:	60 e4       	ldi	r22, 0x40	; 64
    1746:	e6 16       	cp	r14, r22
    1748:	f1 04       	cpc	r15, r1
    174a:	01 05       	cpc	r16, r1
    174c:	11 05       	cpc	r17, r1
    174e:	61 f4       	brne	.+24     	; 0x1768 <__mulsf3+0x1d2>
    1750:	87 fd       	sbrc	r24, 7
    1752:	0a c0       	rjmp	.+20     	; 0x1768 <__mulsf3+0x1d2>
    1754:	21 15       	cp	r18, r1
    1756:	31 05       	cpc	r19, r1
    1758:	41 05       	cpc	r20, r1
    175a:	51 05       	cpc	r21, r1
    175c:	29 f0       	breq	.+10     	; 0x1768 <__mulsf3+0x1d2>
    175e:	80 5c       	subi	r24, 0xC0	; 192
    1760:	9f 4f       	sbci	r25, 0xFF	; 255
    1762:	af 4f       	sbci	r26, 0xFF	; 255
    1764:	bf 4f       	sbci	r27, 0xFF	; 255
    1766:	80 78       	andi	r24, 0x80	; 128
    1768:	8d 8f       	std	Y+29, r24	; 0x1d
    176a:	9e 8f       	std	Y+30, r25	; 0x1e
    176c:	af 8f       	std	Y+31, r26	; 0x1f
    176e:	b8 a3       	std	Y+32, r27	; 0x20
    1770:	83 e0       	ldi	r24, 0x03	; 3
    1772:	89 8f       	std	Y+25, r24	; 0x19
    1774:	ce 01       	movw	r24, r28
    1776:	49 96       	adiw	r24, 0x19	; 25
    1778:	02 c0       	rjmp	.+4      	; 0x177e <__mulsf3+0x1e8>
    177a:	8b e6       	ldi	r24, 0x6B	; 107
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__pack_f>
    1782:	a0 96       	adiw	r28, 0x20	; 32
    1784:	e2 e1       	ldi	r30, 0x12	; 18
    1786:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__epilogue_restores__>

0000178a <__divsf3>:
    178a:	a8 e1       	ldi	r26, 0x18	; 24
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	eb ec       	ldi	r30, 0xCB	; 203
    1790:	fb e0       	ldi	r31, 0x0B	; 11
    1792:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__prologue_saves__+0x10>
    1796:	69 83       	std	Y+1, r22	; 0x01
    1798:	7a 83       	std	Y+2, r23	; 0x02
    179a:	8b 83       	std	Y+3, r24	; 0x03
    179c:	9c 83       	std	Y+4, r25	; 0x04
    179e:	2d 83       	std	Y+5, r18	; 0x05
    17a0:	3e 83       	std	Y+6, r19	; 0x06
    17a2:	4f 83       	std	Y+7, r20	; 0x07
    17a4:	58 87       	std	Y+8, r21	; 0x08
    17a6:	8e 01       	movw	r16, r28
    17a8:	07 5f       	subi	r16, 0xF7	; 247
    17aa:	1f 4f       	sbci	r17, 0xFF	; 255
    17ac:	ce 01       	movw	r24, r28
    17ae:	01 96       	adiw	r24, 0x01	; 1
    17b0:	b8 01       	movw	r22, r16
    17b2:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__unpack_f>
    17b6:	81 e1       	ldi	r24, 0x11	; 17
    17b8:	e8 2e       	mov	r14, r24
    17ba:	f1 2c       	mov	r15, r1
    17bc:	ec 0e       	add	r14, r28
    17be:	fd 1e       	adc	r15, r29
    17c0:	ce 01       	movw	r24, r28
    17c2:	05 96       	adiw	r24, 0x05	; 5
    17c4:	b7 01       	movw	r22, r14
    17c6:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__unpack_f>
    17ca:	99 85       	ldd	r25, Y+9	; 0x09
    17cc:	92 30       	cpi	r25, 0x02	; 2
    17ce:	08 f4       	brcc	.+2      	; 0x17d2 <__divsf3+0x48>
    17d0:	83 c0       	rjmp	.+262    	; 0x18d8 <__divsf3+0x14e>
    17d2:	89 89       	ldd	r24, Y+17	; 0x11
    17d4:	82 30       	cpi	r24, 0x02	; 2
    17d6:	08 f4       	brcc	.+2      	; 0x17da <__divsf3+0x50>
    17d8:	7b c0       	rjmp	.+246    	; 0x18d0 <__divsf3+0x146>
    17da:	2a 85       	ldd	r18, Y+10	; 0x0a
    17dc:	3a 89       	ldd	r19, Y+18	; 0x12
    17de:	23 27       	eor	r18, r19
    17e0:	2a 87       	std	Y+10, r18	; 0x0a
    17e2:	94 30       	cpi	r25, 0x04	; 4
    17e4:	11 f0       	breq	.+4      	; 0x17ea <__divsf3+0x60>
    17e6:	92 30       	cpi	r25, 0x02	; 2
    17e8:	21 f4       	brne	.+8      	; 0x17f2 <__divsf3+0x68>
    17ea:	98 17       	cp	r25, r24
    17ec:	09 f0       	breq	.+2      	; 0x17f0 <__divsf3+0x66>
    17ee:	6c c0       	rjmp	.+216    	; 0x18c8 <__divsf3+0x13e>
    17f0:	71 c0       	rjmp	.+226    	; 0x18d4 <__divsf3+0x14a>
    17f2:	84 30       	cpi	r24, 0x04	; 4
    17f4:	39 f4       	brne	.+14     	; 0x1804 <__divsf3+0x7a>
    17f6:	1d 86       	std	Y+13, r1	; 0x0d
    17f8:	1e 86       	std	Y+14, r1	; 0x0e
    17fa:	1f 86       	std	Y+15, r1	; 0x0f
    17fc:	18 8a       	std	Y+16, r1	; 0x10
    17fe:	1c 86       	std	Y+12, r1	; 0x0c
    1800:	1b 86       	std	Y+11, r1	; 0x0b
    1802:	6a c0       	rjmp	.+212    	; 0x18d8 <__divsf3+0x14e>
    1804:	82 30       	cpi	r24, 0x02	; 2
    1806:	19 f4       	brne	.+6      	; 0x180e <__divsf3+0x84>
    1808:	84 e0       	ldi	r24, 0x04	; 4
    180a:	89 87       	std	Y+9, r24	; 0x09
    180c:	65 c0       	rjmp	.+202    	; 0x18d8 <__divsf3+0x14e>
    180e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1810:	9c 85       	ldd	r25, Y+12	; 0x0c
    1812:	2b 89       	ldd	r18, Y+19	; 0x13
    1814:	3c 89       	ldd	r19, Y+20	; 0x14
    1816:	82 1b       	sub	r24, r18
    1818:	93 0b       	sbc	r25, r19
    181a:	9c 87       	std	Y+12, r25	; 0x0c
    181c:	8b 87       	std	Y+11, r24	; 0x0b
    181e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1820:	3e 85       	ldd	r19, Y+14	; 0x0e
    1822:	4f 85       	ldd	r20, Y+15	; 0x0f
    1824:	58 89       	ldd	r21, Y+16	; 0x10
    1826:	ed 88       	ldd	r14, Y+21	; 0x15
    1828:	fe 88       	ldd	r15, Y+22	; 0x16
    182a:	0f 89       	ldd	r16, Y+23	; 0x17
    182c:	18 8d       	ldd	r17, Y+24	; 0x18
    182e:	2e 15       	cp	r18, r14
    1830:	3f 05       	cpc	r19, r15
    1832:	40 07       	cpc	r20, r16
    1834:	51 07       	cpc	r21, r17
    1836:	38 f4       	brcc	.+14     	; 0x1846 <__divsf3+0xbc>
    1838:	22 0f       	add	r18, r18
    183a:	33 1f       	adc	r19, r19
    183c:	44 1f       	adc	r20, r20
    183e:	55 1f       	adc	r21, r21
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	9c 87       	std	Y+12, r25	; 0x0c
    1844:	8b 87       	std	Y+11, r24	; 0x0b
    1846:	6f e1       	ldi	r22, 0x1F	; 31
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	a1 2c       	mov	r10, r1
    184c:	b1 2c       	mov	r11, r1
    184e:	c1 2c       	mov	r12, r1
    1850:	a0 e4       	ldi	r26, 0x40	; 64
    1852:	da 2e       	mov	r13, r26
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	dc 01       	movw	r26, r24
    185a:	2e 15       	cp	r18, r14
    185c:	3f 05       	cpc	r19, r15
    185e:	40 07       	cpc	r20, r16
    1860:	51 07       	cpc	r21, r17
    1862:	40 f0       	brcs	.+16     	; 0x1874 <__divsf3+0xea>
    1864:	8a 29       	or	r24, r10
    1866:	9b 29       	or	r25, r11
    1868:	ac 29       	or	r26, r12
    186a:	bd 29       	or	r27, r13
    186c:	2e 19       	sub	r18, r14
    186e:	3f 09       	sbc	r19, r15
    1870:	40 0b       	sbc	r20, r16
    1872:	51 0b       	sbc	r21, r17
    1874:	d6 94       	lsr	r13
    1876:	c7 94       	ror	r12
    1878:	b7 94       	ror	r11
    187a:	a7 94       	ror	r10
    187c:	22 0f       	add	r18, r18
    187e:	33 1f       	adc	r19, r19
    1880:	44 1f       	adc	r20, r20
    1882:	55 1f       	adc	r21, r21
    1884:	61 50       	subi	r22, 0x01	; 1
    1886:	70 40       	sbci	r23, 0x00	; 0
    1888:	41 f7       	brne	.-48     	; 0x185a <__divsf3+0xd0>
    188a:	6f e7       	ldi	r22, 0x7F	; 127
    188c:	e6 2e       	mov	r14, r22
    188e:	f1 2c       	mov	r15, r1
    1890:	01 2d       	mov	r16, r1
    1892:	11 2d       	mov	r17, r1
    1894:	e8 22       	and	r14, r24
    1896:	f9 22       	and	r15, r25
    1898:	0a 23       	and	r16, r26
    189a:	1b 23       	and	r17, r27
    189c:	60 e4       	ldi	r22, 0x40	; 64
    189e:	e6 16       	cp	r14, r22
    18a0:	f1 04       	cpc	r15, r1
    18a2:	01 05       	cpc	r16, r1
    18a4:	11 05       	cpc	r17, r1
    18a6:	61 f4       	brne	.+24     	; 0x18c0 <__divsf3+0x136>
    18a8:	87 fd       	sbrc	r24, 7
    18aa:	0a c0       	rjmp	.+20     	; 0x18c0 <__divsf3+0x136>
    18ac:	21 15       	cp	r18, r1
    18ae:	31 05       	cpc	r19, r1
    18b0:	41 05       	cpc	r20, r1
    18b2:	51 05       	cpc	r21, r1
    18b4:	29 f0       	breq	.+10     	; 0x18c0 <__divsf3+0x136>
    18b6:	80 5c       	subi	r24, 0xC0	; 192
    18b8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ba:	af 4f       	sbci	r26, 0xFF	; 255
    18bc:	bf 4f       	sbci	r27, 0xFF	; 255
    18be:	80 78       	andi	r24, 0x80	; 128
    18c0:	8d 87       	std	Y+13, r24	; 0x0d
    18c2:	9e 87       	std	Y+14, r25	; 0x0e
    18c4:	af 87       	std	Y+15, r26	; 0x0f
    18c6:	b8 8b       	std	Y+16, r27	; 0x10
    18c8:	8e 01       	movw	r16, r28
    18ca:	07 5f       	subi	r16, 0xF7	; 247
    18cc:	1f 4f       	sbci	r17, 0xFF	; 255
    18ce:	04 c0       	rjmp	.+8      	; 0x18d8 <__divsf3+0x14e>
    18d0:	87 01       	movw	r16, r14
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <__divsf3+0x14e>
    18d4:	0b e6       	ldi	r16, 0x6B	; 107
    18d6:	10 e0       	ldi	r17, 0x00	; 0
    18d8:	c8 01       	movw	r24, r16
    18da:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__pack_f>
    18de:	68 96       	adiw	r28, 0x18	; 24
    18e0:	ea e0       	ldi	r30, 0x0A	; 10
    18e2:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__epilogue_restores__+0x10>

000018e6 <__gtsf2>:
    18e6:	a8 e1       	ldi	r26, 0x18	; 24
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e9 e7       	ldi	r30, 0x79	; 121
    18ec:	fc e0       	ldi	r31, 0x0C	; 12
    18ee:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__prologue_saves__+0x18>
    18f2:	69 83       	std	Y+1, r22	; 0x01
    18f4:	7a 83       	std	Y+2, r23	; 0x02
    18f6:	8b 83       	std	Y+3, r24	; 0x03
    18f8:	9c 83       	std	Y+4, r25	; 0x04
    18fa:	2d 83       	std	Y+5, r18	; 0x05
    18fc:	3e 83       	std	Y+6, r19	; 0x06
    18fe:	4f 83       	std	Y+7, r20	; 0x07
    1900:	58 87       	std	Y+8, r21	; 0x08
    1902:	8e 01       	movw	r16, r28
    1904:	07 5f       	subi	r16, 0xF7	; 247
    1906:	1f 4f       	sbci	r17, 0xFF	; 255
    1908:	ce 01       	movw	r24, r28
    190a:	01 96       	adiw	r24, 0x01	; 1
    190c:	b8 01       	movw	r22, r16
    190e:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__unpack_f>
    1912:	81 e1       	ldi	r24, 0x11	; 17
    1914:	e8 2e       	mov	r14, r24
    1916:	f1 2c       	mov	r15, r1
    1918:	ec 0e       	add	r14, r28
    191a:	fd 1e       	adc	r15, r29
    191c:	ce 01       	movw	r24, r28
    191e:	05 96       	adiw	r24, 0x05	; 5
    1920:	b7 01       	movw	r22, r14
    1922:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__unpack_f>
    1926:	89 85       	ldd	r24, Y+9	; 0x09
    1928:	82 30       	cpi	r24, 0x02	; 2
    192a:	40 f0       	brcs	.+16     	; 0x193c <__gtsf2+0x56>
    192c:	89 89       	ldd	r24, Y+17	; 0x11
    192e:	82 30       	cpi	r24, 0x02	; 2
    1930:	28 f0       	brcs	.+10     	; 0x193c <__gtsf2+0x56>
    1932:	c8 01       	movw	r24, r16
    1934:	b7 01       	movw	r22, r14
    1936:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__fpcmp_parts_f>
    193a:	01 c0       	rjmp	.+2      	; 0x193e <__gtsf2+0x58>
    193c:	8f ef       	ldi	r24, 0xFF	; 255
    193e:	68 96       	adiw	r28, 0x18	; 24
    1940:	e6 e0       	ldi	r30, 0x06	; 6
    1942:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__epilogue_restores__+0x18>

00001946 <__gesf2>:
    1946:	a8 e1       	ldi	r26, 0x18	; 24
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	e9 ea       	ldi	r30, 0xA9	; 169
    194c:	fc e0       	ldi	r31, 0x0C	; 12
    194e:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__prologue_saves__+0x18>
    1952:	69 83       	std	Y+1, r22	; 0x01
    1954:	7a 83       	std	Y+2, r23	; 0x02
    1956:	8b 83       	std	Y+3, r24	; 0x03
    1958:	9c 83       	std	Y+4, r25	; 0x04
    195a:	2d 83       	std	Y+5, r18	; 0x05
    195c:	3e 83       	std	Y+6, r19	; 0x06
    195e:	4f 83       	std	Y+7, r20	; 0x07
    1960:	58 87       	std	Y+8, r21	; 0x08
    1962:	8e 01       	movw	r16, r28
    1964:	07 5f       	subi	r16, 0xF7	; 247
    1966:	1f 4f       	sbci	r17, 0xFF	; 255
    1968:	ce 01       	movw	r24, r28
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	b8 01       	movw	r22, r16
    196e:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__unpack_f>
    1972:	81 e1       	ldi	r24, 0x11	; 17
    1974:	e8 2e       	mov	r14, r24
    1976:	f1 2c       	mov	r15, r1
    1978:	ec 0e       	add	r14, r28
    197a:	fd 1e       	adc	r15, r29
    197c:	ce 01       	movw	r24, r28
    197e:	05 96       	adiw	r24, 0x05	; 5
    1980:	b7 01       	movw	r22, r14
    1982:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__unpack_f>
    1986:	89 85       	ldd	r24, Y+9	; 0x09
    1988:	82 30       	cpi	r24, 0x02	; 2
    198a:	40 f0       	brcs	.+16     	; 0x199c <__gesf2+0x56>
    198c:	89 89       	ldd	r24, Y+17	; 0x11
    198e:	82 30       	cpi	r24, 0x02	; 2
    1990:	28 f0       	brcs	.+10     	; 0x199c <__gesf2+0x56>
    1992:	c8 01       	movw	r24, r16
    1994:	b7 01       	movw	r22, r14
    1996:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__fpcmp_parts_f>
    199a:	01 c0       	rjmp	.+2      	; 0x199e <__gesf2+0x58>
    199c:	8f ef       	ldi	r24, 0xFF	; 255
    199e:	68 96       	adiw	r28, 0x18	; 24
    19a0:	e6 e0       	ldi	r30, 0x06	; 6
    19a2:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__epilogue_restores__+0x18>

000019a6 <__ltsf2>:
    19a6:	a8 e1       	ldi	r26, 0x18	; 24
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e9 ed       	ldi	r30, 0xD9	; 217
    19ac:	fc e0       	ldi	r31, 0x0C	; 12
    19ae:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__prologue_saves__+0x18>
    19b2:	69 83       	std	Y+1, r22	; 0x01
    19b4:	7a 83       	std	Y+2, r23	; 0x02
    19b6:	8b 83       	std	Y+3, r24	; 0x03
    19b8:	9c 83       	std	Y+4, r25	; 0x04
    19ba:	2d 83       	std	Y+5, r18	; 0x05
    19bc:	3e 83       	std	Y+6, r19	; 0x06
    19be:	4f 83       	std	Y+7, r20	; 0x07
    19c0:	58 87       	std	Y+8, r21	; 0x08
    19c2:	8e 01       	movw	r16, r28
    19c4:	07 5f       	subi	r16, 0xF7	; 247
    19c6:	1f 4f       	sbci	r17, 0xFF	; 255
    19c8:	ce 01       	movw	r24, r28
    19ca:	01 96       	adiw	r24, 0x01	; 1
    19cc:	b8 01       	movw	r22, r16
    19ce:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__unpack_f>
    19d2:	81 e1       	ldi	r24, 0x11	; 17
    19d4:	e8 2e       	mov	r14, r24
    19d6:	f1 2c       	mov	r15, r1
    19d8:	ec 0e       	add	r14, r28
    19da:	fd 1e       	adc	r15, r29
    19dc:	ce 01       	movw	r24, r28
    19de:	05 96       	adiw	r24, 0x05	; 5
    19e0:	b7 01       	movw	r22, r14
    19e2:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__unpack_f>
    19e6:	89 85       	ldd	r24, Y+9	; 0x09
    19e8:	82 30       	cpi	r24, 0x02	; 2
    19ea:	40 f0       	brcs	.+16     	; 0x19fc <__ltsf2+0x56>
    19ec:	89 89       	ldd	r24, Y+17	; 0x11
    19ee:	82 30       	cpi	r24, 0x02	; 2
    19f0:	28 f0       	brcs	.+10     	; 0x19fc <__ltsf2+0x56>
    19f2:	c8 01       	movw	r24, r16
    19f4:	b7 01       	movw	r22, r14
    19f6:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__fpcmp_parts_f>
    19fa:	01 c0       	rjmp	.+2      	; 0x19fe <__ltsf2+0x58>
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	68 96       	adiw	r28, 0x18	; 24
    1a00:	e6 e0       	ldi	r30, 0x06	; 6
    1a02:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__epilogue_restores__+0x18>

00001a06 <__fixsfsi>:
    1a06:	ac e0       	ldi	r26, 0x0C	; 12
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e9 e0       	ldi	r30, 0x09	; 9
    1a0c:	fd e0       	ldi	r31, 0x0D	; 13
    1a0e:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__prologue_saves__+0x20>
    1a12:	69 83       	std	Y+1, r22	; 0x01
    1a14:	7a 83       	std	Y+2, r23	; 0x02
    1a16:	8b 83       	std	Y+3, r24	; 0x03
    1a18:	9c 83       	std	Y+4, r25	; 0x04
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	01 96       	adiw	r24, 0x01	; 1
    1a1e:	be 01       	movw	r22, r28
    1a20:	6b 5f       	subi	r22, 0xFB	; 251
    1a22:	7f 4f       	sbci	r23, 0xFF	; 255
    1a24:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__unpack_f>
    1a28:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2a:	82 30       	cpi	r24, 0x02	; 2
    1a2c:	81 f1       	breq	.+96     	; 0x1a8e <__fixsfsi+0x88>
    1a2e:	82 30       	cpi	r24, 0x02	; 2
    1a30:	70 f1       	brcs	.+92     	; 0x1a8e <__fixsfsi+0x88>
    1a32:	84 30       	cpi	r24, 0x04	; 4
    1a34:	21 f4       	brne	.+8      	; 0x1a3e <__fixsfsi+0x38>
    1a36:	8e 81       	ldd	r24, Y+6	; 0x06
    1a38:	88 23       	and	r24, r24
    1a3a:	69 f1       	breq	.+90     	; 0x1a96 <__fixsfsi+0x90>
    1a3c:	0a c0       	rjmp	.+20     	; 0x1a52 <__fixsfsi+0x4c>
    1a3e:	2f 81       	ldd	r18, Y+7	; 0x07
    1a40:	38 85       	ldd	r19, Y+8	; 0x08
    1a42:	37 fd       	sbrc	r19, 7
    1a44:	24 c0       	rjmp	.+72     	; 0x1a8e <__fixsfsi+0x88>
    1a46:	6e 81       	ldd	r22, Y+6	; 0x06
    1a48:	2f 31       	cpi	r18, 0x1F	; 31
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	3c f0       	brlt	.+14     	; 0x1a5c <__fixsfsi+0x56>
    1a4e:	66 23       	and	r22, r22
    1a50:	11 f1       	breq	.+68     	; 0x1a96 <__fixsfsi+0x90>
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	50 e8       	ldi	r21, 0x80	; 128
    1a5a:	21 c0       	rjmp	.+66     	; 0x1a9e <__fixsfsi+0x98>
    1a5c:	8e e1       	ldi	r24, 0x1E	; 30
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	82 1b       	sub	r24, r18
    1a62:	93 0b       	sbc	r25, r19
    1a64:	29 85       	ldd	r18, Y+9	; 0x09
    1a66:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a68:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a6a:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a6c:	04 c0       	rjmp	.+8      	; 0x1a76 <__fixsfsi+0x70>
    1a6e:	56 95       	lsr	r21
    1a70:	47 95       	ror	r20
    1a72:	37 95       	ror	r19
    1a74:	27 95       	ror	r18
    1a76:	8a 95       	dec	r24
    1a78:	d2 f7       	brpl	.-12     	; 0x1a6e <__fixsfsi+0x68>
    1a7a:	66 23       	and	r22, r22
    1a7c:	81 f0       	breq	.+32     	; 0x1a9e <__fixsfsi+0x98>
    1a7e:	50 95       	com	r21
    1a80:	40 95       	com	r20
    1a82:	30 95       	com	r19
    1a84:	21 95       	neg	r18
    1a86:	3f 4f       	sbci	r19, 0xFF	; 255
    1a88:	4f 4f       	sbci	r20, 0xFF	; 255
    1a8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a8c:	08 c0       	rjmp	.+16     	; 0x1a9e <__fixsfsi+0x98>
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	a9 01       	movw	r20, r18
    1a94:	04 c0       	rjmp	.+8      	; 0x1a9e <__fixsfsi+0x98>
    1a96:	2f ef       	ldi	r18, 0xFF	; 255
    1a98:	3f ef       	ldi	r19, 0xFF	; 255
    1a9a:	4f ef       	ldi	r20, 0xFF	; 255
    1a9c:	5f e7       	ldi	r21, 0x7F	; 127
    1a9e:	b9 01       	movw	r22, r18
    1aa0:	ca 01       	movw	r24, r20
    1aa2:	2c 96       	adiw	r28, 0x0c	; 12
    1aa4:	e2 e0       	ldi	r30, 0x02	; 2
    1aa6:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <__epilogue_restores__+0x20>

00001aaa <__pack_f>:
    1aaa:	ef 92       	push	r14
    1aac:	ff 92       	push	r15
    1aae:	0f 93       	push	r16
    1ab0:	1f 93       	push	r17
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	24 81       	ldd	r18, Z+4	; 0x04
    1aba:	35 81       	ldd	r19, Z+5	; 0x05
    1abc:	46 81       	ldd	r20, Z+6	; 0x06
    1abe:	57 81       	ldd	r21, Z+7	; 0x07
    1ac0:	61 81       	ldd	r22, Z+1	; 0x01
    1ac2:	80 81       	ld	r24, Z
    1ac4:	82 30       	cpi	r24, 0x02	; 2
    1ac6:	20 f4       	brcc	.+8      	; 0x1ad0 <__pack_f+0x26>
    1ac8:	40 61       	ori	r20, 0x10	; 16
    1aca:	ef ef       	ldi	r30, 0xFF	; 255
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	a3 c0       	rjmp	.+326    	; 0x1c16 <__pack_f+0x16c>
    1ad0:	84 30       	cpi	r24, 0x04	; 4
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <__pack_f+0x2c>
    1ad4:	9b c0       	rjmp	.+310    	; 0x1c0c <__pack_f+0x162>
    1ad6:	82 30       	cpi	r24, 0x02	; 2
    1ad8:	09 f4       	brne	.+2      	; 0x1adc <__pack_f+0x32>
    1ada:	92 c0       	rjmp	.+292    	; 0x1c00 <__pack_f+0x156>
    1adc:	21 15       	cp	r18, r1
    1ade:	31 05       	cpc	r19, r1
    1ae0:	41 05       	cpc	r20, r1
    1ae2:	51 05       	cpc	r21, r1
    1ae4:	09 f4       	brne	.+2      	; 0x1ae8 <__pack_f+0x3e>
    1ae6:	8f c0       	rjmp	.+286    	; 0x1c06 <__pack_f+0x15c>
    1ae8:	02 80       	ldd	r0, Z+2	; 0x02
    1aea:	f3 81       	ldd	r31, Z+3	; 0x03
    1aec:	e0 2d       	mov	r30, r0
    1aee:	8f ef       	ldi	r24, 0xFF	; 255
    1af0:	e2 38       	cpi	r30, 0x82	; 130
    1af2:	f8 07       	cpc	r31, r24
    1af4:	0c f0       	brlt	.+2      	; 0x1af8 <__pack_f+0x4e>
    1af6:	5a c0       	rjmp	.+180    	; 0x1bac <__pack_f+0x102>
    1af8:	c2 e8       	ldi	r28, 0x82	; 130
    1afa:	df ef       	ldi	r29, 0xFF	; 255
    1afc:	ce 1b       	sub	r28, r30
    1afe:	df 0b       	sbc	r29, r31
    1b00:	ca 31       	cpi	r28, 0x1A	; 26
    1b02:	d1 05       	cpc	r29, r1
    1b04:	6c f5       	brge	.+90     	; 0x1b60 <__pack_f+0xb6>
    1b06:	79 01       	movw	r14, r18
    1b08:	8a 01       	movw	r16, r20
    1b0a:	0c 2e       	mov	r0, r28
    1b0c:	04 c0       	rjmp	.+8      	; 0x1b16 <__pack_f+0x6c>
    1b0e:	16 95       	lsr	r17
    1b10:	07 95       	ror	r16
    1b12:	f7 94       	ror	r15
    1b14:	e7 94       	ror	r14
    1b16:	0a 94       	dec	r0
    1b18:	d2 f7       	brpl	.-12     	; 0x1b0e <__pack_f+0x64>
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	a0 e0       	ldi	r26, 0x00	; 0
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	0c 2e       	mov	r0, r28
    1b24:	04 c0       	rjmp	.+8      	; 0x1b2e <__pack_f+0x84>
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	aa 1f       	adc	r26, r26
    1b2c:	bb 1f       	adc	r27, r27
    1b2e:	0a 94       	dec	r0
    1b30:	d2 f7       	brpl	.-12     	; 0x1b26 <__pack_f+0x7c>
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	a1 09       	sbc	r26, r1
    1b36:	b1 09       	sbc	r27, r1
    1b38:	82 23       	and	r24, r18
    1b3a:	93 23       	and	r25, r19
    1b3c:	a4 23       	and	r26, r20
    1b3e:	b5 23       	and	r27, r21
    1b40:	21 e0       	ldi	r18, 0x01	; 1
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e0       	ldi	r20, 0x00	; 0
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	a1 05       	cpc	r26, r1
    1b4c:	b1 05       	cpc	r27, r1
    1b4e:	19 f4       	brne	.+6      	; 0x1b56 <__pack_f+0xac>
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	a9 01       	movw	r20, r18
    1b56:	2e 29       	or	r18, r14
    1b58:	3f 29       	or	r19, r15
    1b5a:	40 2b       	or	r20, r16
    1b5c:	51 2b       	or	r21, r17
    1b5e:	03 c0       	rjmp	.+6      	; 0x1b66 <__pack_f+0xbc>
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	a9 01       	movw	r20, r18
    1b66:	da 01       	movw	r26, r20
    1b68:	c9 01       	movw	r24, r18
    1b6a:	8f 77       	andi	r24, 0x7F	; 127
    1b6c:	90 70       	andi	r25, 0x00	; 0
    1b6e:	a0 70       	andi	r26, 0x00	; 0
    1b70:	b0 70       	andi	r27, 0x00	; 0
    1b72:	80 34       	cpi	r24, 0x40	; 64
    1b74:	91 05       	cpc	r25, r1
    1b76:	a1 05       	cpc	r26, r1
    1b78:	b1 05       	cpc	r27, r1
    1b7a:	39 f4       	brne	.+14     	; 0x1b8a <__pack_f+0xe0>
    1b7c:	27 ff       	sbrs	r18, 7
    1b7e:	09 c0       	rjmp	.+18     	; 0x1b92 <__pack_f+0xe8>
    1b80:	20 5c       	subi	r18, 0xC0	; 192
    1b82:	3f 4f       	sbci	r19, 0xFF	; 255
    1b84:	4f 4f       	sbci	r20, 0xFF	; 255
    1b86:	5f 4f       	sbci	r21, 0xFF	; 255
    1b88:	04 c0       	rjmp	.+8      	; 0x1b92 <__pack_f+0xe8>
    1b8a:	21 5c       	subi	r18, 0xC1	; 193
    1b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8e:	4f 4f       	sbci	r20, 0xFF	; 255
    1b90:	5f 4f       	sbci	r21, 0xFF	; 255
    1b92:	e1 e0       	ldi	r30, 0x01	; 1
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	20 30       	cpi	r18, 0x00	; 0
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	38 07       	cpc	r19, r24
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	48 07       	cpc	r20, r24
    1ba0:	80 e4       	ldi	r24, 0x40	; 64
    1ba2:	58 07       	cpc	r21, r24
    1ba4:	28 f5       	brcc	.+74     	; 0x1bf0 <__pack_f+0x146>
    1ba6:	e0 e0       	ldi	r30, 0x00	; 0
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	22 c0       	rjmp	.+68     	; 0x1bf0 <__pack_f+0x146>
    1bac:	e0 38       	cpi	r30, 0x80	; 128
    1bae:	f1 05       	cpc	r31, r1
    1bb0:	6c f5       	brge	.+90     	; 0x1c0c <__pack_f+0x162>
    1bb2:	e1 58       	subi	r30, 0x81	; 129
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	da 01       	movw	r26, r20
    1bb8:	c9 01       	movw	r24, r18
    1bba:	8f 77       	andi	r24, 0x7F	; 127
    1bbc:	90 70       	andi	r25, 0x00	; 0
    1bbe:	a0 70       	andi	r26, 0x00	; 0
    1bc0:	b0 70       	andi	r27, 0x00	; 0
    1bc2:	80 34       	cpi	r24, 0x40	; 64
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	a1 05       	cpc	r26, r1
    1bc8:	b1 05       	cpc	r27, r1
    1bca:	39 f4       	brne	.+14     	; 0x1bda <__pack_f+0x130>
    1bcc:	27 ff       	sbrs	r18, 7
    1bce:	09 c0       	rjmp	.+18     	; 0x1be2 <__pack_f+0x138>
    1bd0:	20 5c       	subi	r18, 0xC0	; 192
    1bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd4:	4f 4f       	sbci	r20, 0xFF	; 255
    1bd6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bd8:	04 c0       	rjmp	.+8      	; 0x1be2 <__pack_f+0x138>
    1bda:	21 5c       	subi	r18, 0xC1	; 193
    1bdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bde:	4f 4f       	sbci	r20, 0xFF	; 255
    1be0:	5f 4f       	sbci	r21, 0xFF	; 255
    1be2:	57 ff       	sbrs	r21, 7
    1be4:	05 c0       	rjmp	.+10     	; 0x1bf0 <__pack_f+0x146>
    1be6:	56 95       	lsr	r21
    1be8:	47 95       	ror	r20
    1bea:	37 95       	ror	r19
    1bec:	27 95       	ror	r18
    1bee:	31 96       	adiw	r30, 0x01	; 1
    1bf0:	87 e0       	ldi	r24, 0x07	; 7
    1bf2:	56 95       	lsr	r21
    1bf4:	47 95       	ror	r20
    1bf6:	37 95       	ror	r19
    1bf8:	27 95       	ror	r18
    1bfa:	8a 95       	dec	r24
    1bfc:	d1 f7       	brne	.-12     	; 0x1bf2 <__pack_f+0x148>
    1bfe:	0b c0       	rjmp	.+22     	; 0x1c16 <__pack_f+0x16c>
    1c00:	e0 e0       	ldi	r30, 0x00	; 0
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	05 c0       	rjmp	.+10     	; 0x1c10 <__pack_f+0x166>
    1c06:	e0 e0       	ldi	r30, 0x00	; 0
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	05 c0       	rjmp	.+10     	; 0x1c16 <__pack_f+0x16c>
    1c0c:	ef ef       	ldi	r30, 0xFF	; 255
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	a9 01       	movw	r20, r18
    1c16:	8e 2f       	mov	r24, r30
    1c18:	87 95       	ror	r24
    1c1a:	88 27       	eor	r24, r24
    1c1c:	87 95       	ror	r24
    1c1e:	94 2f       	mov	r25, r20
    1c20:	9f 77       	andi	r25, 0x7F	; 127
    1c22:	67 95       	ror	r22
    1c24:	66 27       	eor	r22, r22
    1c26:	67 95       	ror	r22
    1c28:	e6 95       	lsr	r30
    1c2a:	e2 2e       	mov	r14, r18
    1c2c:	a9 2f       	mov	r26, r25
    1c2e:	a8 2b       	or	r26, r24
    1c30:	fe 2f       	mov	r31, r30
    1c32:	f6 2b       	or	r31, r22
    1c34:	62 2f       	mov	r22, r18
    1c36:	73 2f       	mov	r23, r19
    1c38:	8a 2f       	mov	r24, r26
    1c3a:	9f 2f       	mov	r25, r31
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	e6 e0       	ldi	r30, 0x06	; 6
    1c42:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__epilogue_restores__+0x18>

00001c46 <__unpack_f>:
    1c46:	dc 01       	movw	r26, r24
    1c48:	fb 01       	movw	r30, r22
    1c4a:	2c 91       	ld	r18, X
    1c4c:	11 96       	adiw	r26, 0x01	; 1
    1c4e:	3c 91       	ld	r19, X
    1c50:	11 97       	sbiw	r26, 0x01	; 1
    1c52:	12 96       	adiw	r26, 0x02	; 2
    1c54:	8c 91       	ld	r24, X
    1c56:	12 97       	sbiw	r26, 0x02	; 2
    1c58:	48 2f       	mov	r20, r24
    1c5a:	4f 77       	andi	r20, 0x7F	; 127
    1c5c:	50 e0       	ldi	r21, 0x00	; 0
    1c5e:	98 2f       	mov	r25, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	99 27       	eor	r25, r25
    1c64:	99 1f       	adc	r25, r25
    1c66:	13 96       	adiw	r26, 0x03	; 3
    1c68:	6c 91       	ld	r22, X
    1c6a:	13 97       	sbiw	r26, 0x03	; 3
    1c6c:	86 2f       	mov	r24, r22
    1c6e:	88 0f       	add	r24, r24
    1c70:	89 2b       	or	r24, r25
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	66 1f       	adc	r22, r22
    1c76:	66 27       	eor	r22, r22
    1c78:	66 1f       	adc	r22, r22
    1c7a:	61 83       	std	Z+1, r22	; 0x01
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	39 f5       	brne	.+78     	; 0x1cce <__unpack_f+0x88>
    1c80:	21 15       	cp	r18, r1
    1c82:	31 05       	cpc	r19, r1
    1c84:	41 05       	cpc	r20, r1
    1c86:	51 05       	cpc	r21, r1
    1c88:	11 f4       	brne	.+4      	; 0x1c8e <__unpack_f+0x48>
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	29 c0       	rjmp	.+82     	; 0x1ce0 <__unpack_f+0x9a>
    1c8e:	82 e8       	ldi	r24, 0x82	; 130
    1c90:	9f ef       	ldi	r25, 0xFF	; 255
    1c92:	93 83       	std	Z+3, r25	; 0x03
    1c94:	82 83       	std	Z+2, r24	; 0x02
    1c96:	67 e0       	ldi	r22, 0x07	; 7
    1c98:	22 0f       	add	r18, r18
    1c9a:	33 1f       	adc	r19, r19
    1c9c:	44 1f       	adc	r20, r20
    1c9e:	55 1f       	adc	r21, r21
    1ca0:	6a 95       	dec	r22
    1ca2:	d1 f7       	brne	.-12     	; 0x1c98 <__unpack_f+0x52>
    1ca4:	83 e0       	ldi	r24, 0x03	; 3
    1ca6:	80 83       	st	Z, r24
    1ca8:	09 c0       	rjmp	.+18     	; 0x1cbc <__unpack_f+0x76>
    1caa:	22 0f       	add	r18, r18
    1cac:	33 1f       	adc	r19, r19
    1cae:	44 1f       	adc	r20, r20
    1cb0:	55 1f       	adc	r21, r21
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	93 81       	ldd	r25, Z+3	; 0x03
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	93 83       	std	Z+3, r25	; 0x03
    1cba:	82 83       	std	Z+2, r24	; 0x02
    1cbc:	20 30       	cpi	r18, 0x00	; 0
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	38 07       	cpc	r19, r24
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	48 07       	cpc	r20, r24
    1cc6:	80 e4       	ldi	r24, 0x40	; 64
    1cc8:	58 07       	cpc	r21, r24
    1cca:	78 f3       	brcs	.-34     	; 0x1caa <__unpack_f+0x64>
    1ccc:	20 c0       	rjmp	.+64     	; 0x1d0e <__unpack_f+0xc8>
    1cce:	8f 3f       	cpi	r24, 0xFF	; 255
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	79 f4       	brne	.+30     	; 0x1cf2 <__unpack_f+0xac>
    1cd4:	21 15       	cp	r18, r1
    1cd6:	31 05       	cpc	r19, r1
    1cd8:	41 05       	cpc	r20, r1
    1cda:	51 05       	cpc	r21, r1
    1cdc:	19 f4       	brne	.+6      	; 0x1ce4 <__unpack_f+0x9e>
    1cde:	84 e0       	ldi	r24, 0x04	; 4
    1ce0:	80 83       	st	Z, r24
    1ce2:	08 95       	ret
    1ce4:	44 ff       	sbrs	r20, 4
    1ce6:	03 c0       	rjmp	.+6      	; 0x1cee <__unpack_f+0xa8>
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	80 83       	st	Z, r24
    1cec:	10 c0       	rjmp	.+32     	; 0x1d0e <__unpack_f+0xc8>
    1cee:	10 82       	st	Z, r1
    1cf0:	0e c0       	rjmp	.+28     	; 0x1d0e <__unpack_f+0xc8>
    1cf2:	8f 57       	subi	r24, 0x7F	; 127
    1cf4:	90 40       	sbci	r25, 0x00	; 0
    1cf6:	93 83       	std	Z+3, r25	; 0x03
    1cf8:	82 83       	std	Z+2, r24	; 0x02
    1cfa:	83 e0       	ldi	r24, 0x03	; 3
    1cfc:	80 83       	st	Z, r24
    1cfe:	87 e0       	ldi	r24, 0x07	; 7
    1d00:	22 0f       	add	r18, r18
    1d02:	33 1f       	adc	r19, r19
    1d04:	44 1f       	adc	r20, r20
    1d06:	55 1f       	adc	r21, r21
    1d08:	8a 95       	dec	r24
    1d0a:	d1 f7       	brne	.-12     	; 0x1d00 <__unpack_f+0xba>
    1d0c:	50 64       	ori	r21, 0x40	; 64
    1d0e:	24 83       	std	Z+4, r18	; 0x04
    1d10:	35 83       	std	Z+5, r19	; 0x05
    1d12:	46 83       	std	Z+6, r20	; 0x06
    1d14:	57 83       	std	Z+7, r21	; 0x07
    1d16:	08 95       	ret

00001d18 <__fpcmp_parts_f>:
    1d18:	fc 01       	movw	r30, r24
    1d1a:	db 01       	movw	r26, r22
    1d1c:	90 81       	ld	r25, Z
    1d1e:	92 30       	cpi	r25, 0x02	; 2
    1d20:	08 f4       	brcc	.+2      	; 0x1d24 <__fpcmp_parts_f+0xc>
    1d22:	49 c0       	rjmp	.+146    	; 0x1db6 <__fpcmp_parts_f+0x9e>
    1d24:	8c 91       	ld	r24, X
    1d26:	82 30       	cpi	r24, 0x02	; 2
    1d28:	08 f4       	brcc	.+2      	; 0x1d2c <__fpcmp_parts_f+0x14>
    1d2a:	45 c0       	rjmp	.+138    	; 0x1db6 <__fpcmp_parts_f+0x9e>
    1d2c:	94 30       	cpi	r25, 0x04	; 4
    1d2e:	51 f4       	brne	.+20     	; 0x1d44 <__fpcmp_parts_f+0x2c>
    1d30:	61 81       	ldd	r22, Z+1	; 0x01
    1d32:	84 30       	cpi	r24, 0x04	; 4
    1d34:	b1 f5       	brne	.+108    	; 0x1da2 <__fpcmp_parts_f+0x8a>
    1d36:	11 96       	adiw	r26, 0x01	; 1
    1d38:	2c 91       	ld	r18, X
    1d3a:	11 97       	sbiw	r26, 0x01	; 1
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	26 1b       	sub	r18, r22
    1d40:	31 09       	sbc	r19, r1
    1d42:	41 c0       	rjmp	.+130    	; 0x1dc6 <__fpcmp_parts_f+0xae>
    1d44:	84 30       	cpi	r24, 0x04	; 4
    1d46:	21 f0       	breq	.+8      	; 0x1d50 <__fpcmp_parts_f+0x38>
    1d48:	92 30       	cpi	r25, 0x02	; 2
    1d4a:	41 f4       	brne	.+16     	; 0x1d5c <__fpcmp_parts_f+0x44>
    1d4c:	82 30       	cpi	r24, 0x02	; 2
    1d4e:	b1 f1       	breq	.+108    	; 0x1dbc <__fpcmp_parts_f+0xa4>
    1d50:	11 96       	adiw	r26, 0x01	; 1
    1d52:	8c 91       	ld	r24, X
    1d54:	11 97       	sbiw	r26, 0x01	; 1
    1d56:	88 23       	and	r24, r24
    1d58:	a1 f1       	breq	.+104    	; 0x1dc2 <__fpcmp_parts_f+0xaa>
    1d5a:	2d c0       	rjmp	.+90     	; 0x1db6 <__fpcmp_parts_f+0x9e>
    1d5c:	61 81       	ldd	r22, Z+1	; 0x01
    1d5e:	82 30       	cpi	r24, 0x02	; 2
    1d60:	01 f1       	breq	.+64     	; 0x1da2 <__fpcmp_parts_f+0x8a>
    1d62:	11 96       	adiw	r26, 0x01	; 1
    1d64:	8c 91       	ld	r24, X
    1d66:	11 97       	sbiw	r26, 0x01	; 1
    1d68:	68 17       	cp	r22, r24
    1d6a:	d9 f4       	brne	.+54     	; 0x1da2 <__fpcmp_parts_f+0x8a>
    1d6c:	22 81       	ldd	r18, Z+2	; 0x02
    1d6e:	33 81       	ldd	r19, Z+3	; 0x03
    1d70:	12 96       	adiw	r26, 0x02	; 2
    1d72:	8d 91       	ld	r24, X+
    1d74:	9c 91       	ld	r25, X
    1d76:	13 97       	sbiw	r26, 0x03	; 3
    1d78:	82 17       	cp	r24, r18
    1d7a:	93 07       	cpc	r25, r19
    1d7c:	94 f0       	brlt	.+36     	; 0x1da2 <__fpcmp_parts_f+0x8a>
    1d7e:	28 17       	cp	r18, r24
    1d80:	39 07       	cpc	r19, r25
    1d82:	bc f0       	brlt	.+46     	; 0x1db2 <__fpcmp_parts_f+0x9a>
    1d84:	24 81       	ldd	r18, Z+4	; 0x04
    1d86:	35 81       	ldd	r19, Z+5	; 0x05
    1d88:	46 81       	ldd	r20, Z+6	; 0x06
    1d8a:	57 81       	ldd	r21, Z+7	; 0x07
    1d8c:	14 96       	adiw	r26, 0x04	; 4
    1d8e:	8d 91       	ld	r24, X+
    1d90:	9d 91       	ld	r25, X+
    1d92:	0d 90       	ld	r0, X+
    1d94:	bc 91       	ld	r27, X
    1d96:	a0 2d       	mov	r26, r0
    1d98:	82 17       	cp	r24, r18
    1d9a:	93 07       	cpc	r25, r19
    1d9c:	a4 07       	cpc	r26, r20
    1d9e:	b5 07       	cpc	r27, r21
    1da0:	18 f4       	brcc	.+6      	; 0x1da8 <__fpcmp_parts_f+0x90>
    1da2:	66 23       	and	r22, r22
    1da4:	41 f0       	breq	.+16     	; 0x1db6 <__fpcmp_parts_f+0x9e>
    1da6:	0d c0       	rjmp	.+26     	; 0x1dc2 <__fpcmp_parts_f+0xaa>
    1da8:	28 17       	cp	r18, r24
    1daa:	39 07       	cpc	r19, r25
    1dac:	4a 07       	cpc	r20, r26
    1dae:	5b 07       	cpc	r21, r27
    1db0:	28 f4       	brcc	.+10     	; 0x1dbc <__fpcmp_parts_f+0xa4>
    1db2:	66 23       	and	r22, r22
    1db4:	31 f0       	breq	.+12     	; 0x1dc2 <__fpcmp_parts_f+0xaa>
    1db6:	21 e0       	ldi	r18, 0x01	; 1
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	05 c0       	rjmp	.+10     	; 0x1dc6 <__fpcmp_parts_f+0xae>
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <__fpcmp_parts_f+0xae>
    1dc2:	2f ef       	ldi	r18, 0xFF	; 255
    1dc4:	3f ef       	ldi	r19, 0xFF	; 255
    1dc6:	c9 01       	movw	r24, r18
    1dc8:	08 95       	ret

00001dca <__udivmodsi4>:
    1dca:	a1 e2       	ldi	r26, 0x21	; 33
    1dcc:	1a 2e       	mov	r1, r26
    1dce:	aa 1b       	sub	r26, r26
    1dd0:	bb 1b       	sub	r27, r27
    1dd2:	fd 01       	movw	r30, r26
    1dd4:	0d c0       	rjmp	.+26     	; 0x1df0 <__udivmodsi4_ep>

00001dd6 <__udivmodsi4_loop>:
    1dd6:	aa 1f       	adc	r26, r26
    1dd8:	bb 1f       	adc	r27, r27
    1dda:	ee 1f       	adc	r30, r30
    1ddc:	ff 1f       	adc	r31, r31
    1dde:	a2 17       	cp	r26, r18
    1de0:	b3 07       	cpc	r27, r19
    1de2:	e4 07       	cpc	r30, r20
    1de4:	f5 07       	cpc	r31, r21
    1de6:	20 f0       	brcs	.+8      	; 0x1df0 <__udivmodsi4_ep>
    1de8:	a2 1b       	sub	r26, r18
    1dea:	b3 0b       	sbc	r27, r19
    1dec:	e4 0b       	sbc	r30, r20
    1dee:	f5 0b       	sbc	r31, r21

00001df0 <__udivmodsi4_ep>:
    1df0:	66 1f       	adc	r22, r22
    1df2:	77 1f       	adc	r23, r23
    1df4:	88 1f       	adc	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	1a 94       	dec	r1
    1dfa:	69 f7       	brne	.-38     	; 0x1dd6 <__udivmodsi4_loop>
    1dfc:	60 95       	com	r22
    1dfe:	70 95       	com	r23
    1e00:	80 95       	com	r24
    1e02:	90 95       	com	r25
    1e04:	9b 01       	movw	r18, r22
    1e06:	ac 01       	movw	r20, r24
    1e08:	bd 01       	movw	r22, r26
    1e0a:	cf 01       	movw	r24, r30
    1e0c:	08 95       	ret

00001e0e <__prologue_saves__>:
    1e0e:	2f 92       	push	r2
    1e10:	3f 92       	push	r3
    1e12:	4f 92       	push	r4
    1e14:	5f 92       	push	r5
    1e16:	6f 92       	push	r6
    1e18:	7f 92       	push	r7
    1e1a:	8f 92       	push	r8
    1e1c:	9f 92       	push	r9
    1e1e:	af 92       	push	r10
    1e20:	bf 92       	push	r11
    1e22:	cf 92       	push	r12
    1e24:	df 92       	push	r13
    1e26:	ef 92       	push	r14
    1e28:	ff 92       	push	r15
    1e2a:	0f 93       	push	r16
    1e2c:	1f 93       	push	r17
    1e2e:	cf 93       	push	r28
    1e30:	df 93       	push	r29
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	ca 1b       	sub	r28, r26
    1e38:	db 0b       	sbc	r29, r27
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	09 94       	ijmp

00001e46 <__epilogue_restores__>:
    1e46:	2a 88       	ldd	r2, Y+18	; 0x12
    1e48:	39 88       	ldd	r3, Y+17	; 0x11
    1e4a:	48 88       	ldd	r4, Y+16	; 0x10
    1e4c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e4e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e50:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e52:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e54:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e56:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e58:	b9 84       	ldd	r11, Y+9	; 0x09
    1e5a:	c8 84       	ldd	r12, Y+8	; 0x08
    1e5c:	df 80       	ldd	r13, Y+7	; 0x07
    1e5e:	ee 80       	ldd	r14, Y+6	; 0x06
    1e60:	fd 80       	ldd	r15, Y+5	; 0x05
    1e62:	0c 81       	ldd	r16, Y+4	; 0x04
    1e64:	1b 81       	ldd	r17, Y+3	; 0x03
    1e66:	aa 81       	ldd	r26, Y+2	; 0x02
    1e68:	b9 81       	ldd	r27, Y+1	; 0x01
    1e6a:	ce 0f       	add	r28, r30
    1e6c:	d1 1d       	adc	r29, r1
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	ed 01       	movw	r28, r26
    1e7a:	08 95       	ret

00001e7c <printf>:
    1e7c:	a0 e0       	ldi	r26, 0x00	; 0
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e4 e4       	ldi	r30, 0x44	; 68
    1e82:	ff e0       	ldi	r31, 0x0F	; 15
    1e84:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__prologue_saves__+0x20>
    1e88:	fe 01       	movw	r30, r28
    1e8a:	35 96       	adiw	r30, 0x05	; 5
    1e8c:	61 91       	ld	r22, Z+
    1e8e:	71 91       	ld	r23, Z+
    1e90:	80 91 7c 00 	lds	r24, 0x007C
    1e94:	90 91 7d 00 	lds	r25, 0x007D
    1e98:	af 01       	movw	r20, r30
    1e9a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <vfprintf>
    1e9e:	20 96       	adiw	r28, 0x00	; 0
    1ea0:	e2 e0       	ldi	r30, 0x02	; 2
    1ea2:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <__epilogue_restores__+0x20>

00001ea6 <vfprintf>:
    1ea6:	ac e0       	ldi	r26, 0x0C	; 12
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e9 e5       	ldi	r30, 0x59	; 89
    1eac:	ff e0       	ldi	r31, 0x0F	; 15
    1eae:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__prologue_saves__>
    1eb2:	6c 01       	movw	r12, r24
    1eb4:	1b 01       	movw	r2, r22
    1eb6:	8a 01       	movw	r16, r20
    1eb8:	fc 01       	movw	r30, r24
    1eba:	17 82       	std	Z+7, r1	; 0x07
    1ebc:	16 82       	std	Z+6, r1	; 0x06
    1ebe:	83 81       	ldd	r24, Z+3	; 0x03
    1ec0:	81 ff       	sbrs	r24, 1
    1ec2:	d1 c1       	rjmp	.+930    	; 0x2266 <vfprintf+0x3c0>
    1ec4:	2e 01       	movw	r4, r28
    1ec6:	08 94       	sec
    1ec8:	41 1c       	adc	r4, r1
    1eca:	51 1c       	adc	r5, r1
    1ecc:	f6 01       	movw	r30, r12
    1ece:	93 81       	ldd	r25, Z+3	; 0x03
    1ed0:	f1 01       	movw	r30, r2
    1ed2:	93 fd       	sbrc	r25, 3
    1ed4:	85 91       	lpm	r24, Z+
    1ed6:	93 ff       	sbrs	r25, 3
    1ed8:	81 91       	ld	r24, Z+
    1eda:	1f 01       	movw	r2, r30
    1edc:	88 23       	and	r24, r24
    1ede:	09 f4       	brne	.+2      	; 0x1ee2 <vfprintf+0x3c>
    1ee0:	be c1       	rjmp	.+892    	; 0x225e <vfprintf+0x3b8>
    1ee2:	85 32       	cpi	r24, 0x25	; 37
    1ee4:	39 f4       	brne	.+14     	; 0x1ef4 <vfprintf+0x4e>
    1ee6:	93 fd       	sbrc	r25, 3
    1ee8:	85 91       	lpm	r24, Z+
    1eea:	93 ff       	sbrs	r25, 3
    1eec:	81 91       	ld	r24, Z+
    1eee:	1f 01       	movw	r2, r30
    1ef0:	85 32       	cpi	r24, 0x25	; 37
    1ef2:	29 f4       	brne	.+10     	; 0x1efe <vfprintf+0x58>
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	b6 01       	movw	r22, r12
    1ef8:	0e 94 50 11 	call	0x22a0	; 0x22a0 <fputc>
    1efc:	e7 cf       	rjmp	.-50     	; 0x1ecc <vfprintf+0x26>
    1efe:	ee 24       	eor	r14, r14
    1f00:	ff 24       	eor	r15, r15
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	20 32       	cpi	r18, 0x20	; 32
    1f06:	b0 f4       	brcc	.+44     	; 0x1f34 <vfprintf+0x8e>
    1f08:	8b 32       	cpi	r24, 0x2B	; 43
    1f0a:	69 f0       	breq	.+26     	; 0x1f26 <vfprintf+0x80>
    1f0c:	8c 32       	cpi	r24, 0x2C	; 44
    1f0e:	28 f4       	brcc	.+10     	; 0x1f1a <vfprintf+0x74>
    1f10:	80 32       	cpi	r24, 0x20	; 32
    1f12:	51 f0       	breq	.+20     	; 0x1f28 <vfprintf+0x82>
    1f14:	83 32       	cpi	r24, 0x23	; 35
    1f16:	71 f4       	brne	.+28     	; 0x1f34 <vfprintf+0x8e>
    1f18:	0b c0       	rjmp	.+22     	; 0x1f30 <vfprintf+0x8a>
    1f1a:	8d 32       	cpi	r24, 0x2D	; 45
    1f1c:	39 f0       	breq	.+14     	; 0x1f2c <vfprintf+0x86>
    1f1e:	80 33       	cpi	r24, 0x30	; 48
    1f20:	49 f4       	brne	.+18     	; 0x1f34 <vfprintf+0x8e>
    1f22:	21 60       	ori	r18, 0x01	; 1
    1f24:	2c c0       	rjmp	.+88     	; 0x1f7e <vfprintf+0xd8>
    1f26:	22 60       	ori	r18, 0x02	; 2
    1f28:	24 60       	ori	r18, 0x04	; 4
    1f2a:	29 c0       	rjmp	.+82     	; 0x1f7e <vfprintf+0xd8>
    1f2c:	28 60       	ori	r18, 0x08	; 8
    1f2e:	27 c0       	rjmp	.+78     	; 0x1f7e <vfprintf+0xd8>
    1f30:	20 61       	ori	r18, 0x10	; 16
    1f32:	25 c0       	rjmp	.+74     	; 0x1f7e <vfprintf+0xd8>
    1f34:	27 fd       	sbrc	r18, 7
    1f36:	2c c0       	rjmp	.+88     	; 0x1f90 <vfprintf+0xea>
    1f38:	38 2f       	mov	r19, r24
    1f3a:	30 53       	subi	r19, 0x30	; 48
    1f3c:	3a 30       	cpi	r19, 0x0A	; 10
    1f3e:	98 f4       	brcc	.+38     	; 0x1f66 <vfprintf+0xc0>
    1f40:	26 ff       	sbrs	r18, 6
    1f42:	08 c0       	rjmp	.+16     	; 0x1f54 <vfprintf+0xae>
    1f44:	8e 2d       	mov	r24, r14
    1f46:	88 0f       	add	r24, r24
    1f48:	e8 2e       	mov	r14, r24
    1f4a:	ee 0c       	add	r14, r14
    1f4c:	ee 0c       	add	r14, r14
    1f4e:	e8 0e       	add	r14, r24
    1f50:	e3 0e       	add	r14, r19
    1f52:	15 c0       	rjmp	.+42     	; 0x1f7e <vfprintf+0xd8>
    1f54:	8f 2d       	mov	r24, r15
    1f56:	88 0f       	add	r24, r24
    1f58:	f8 2e       	mov	r15, r24
    1f5a:	ff 0c       	add	r15, r15
    1f5c:	ff 0c       	add	r15, r15
    1f5e:	f8 0e       	add	r15, r24
    1f60:	f3 0e       	add	r15, r19
    1f62:	20 62       	ori	r18, 0x20	; 32
    1f64:	0c c0       	rjmp	.+24     	; 0x1f7e <vfprintf+0xd8>
    1f66:	8e 32       	cpi	r24, 0x2E	; 46
    1f68:	21 f4       	brne	.+8      	; 0x1f72 <vfprintf+0xcc>
    1f6a:	26 fd       	sbrc	r18, 6
    1f6c:	78 c1       	rjmp	.+752    	; 0x225e <vfprintf+0x3b8>
    1f6e:	20 64       	ori	r18, 0x40	; 64
    1f70:	06 c0       	rjmp	.+12     	; 0x1f7e <vfprintf+0xd8>
    1f72:	8c 36       	cpi	r24, 0x6C	; 108
    1f74:	11 f4       	brne	.+4      	; 0x1f7a <vfprintf+0xd4>
    1f76:	20 68       	ori	r18, 0x80	; 128
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <vfprintf+0xd8>
    1f7a:	88 36       	cpi	r24, 0x68	; 104
    1f7c:	49 f4       	brne	.+18     	; 0x1f90 <vfprintf+0xea>
    1f7e:	f1 01       	movw	r30, r2
    1f80:	93 fd       	sbrc	r25, 3
    1f82:	85 91       	lpm	r24, Z+
    1f84:	93 ff       	sbrs	r25, 3
    1f86:	81 91       	ld	r24, Z+
    1f88:	1f 01       	movw	r2, r30
    1f8a:	88 23       	and	r24, r24
    1f8c:	09 f0       	breq	.+2      	; 0x1f90 <vfprintf+0xea>
    1f8e:	ba cf       	rjmp	.-140    	; 0x1f04 <vfprintf+0x5e>
    1f90:	98 2f       	mov	r25, r24
    1f92:	95 54       	subi	r25, 0x45	; 69
    1f94:	93 30       	cpi	r25, 0x03	; 3
    1f96:	18 f0       	brcs	.+6      	; 0x1f9e <vfprintf+0xf8>
    1f98:	90 52       	subi	r25, 0x20	; 32
    1f9a:	93 30       	cpi	r25, 0x03	; 3
    1f9c:	28 f4       	brcc	.+10     	; 0x1fa8 <vfprintf+0x102>
    1f9e:	0c 5f       	subi	r16, 0xFC	; 252
    1fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa2:	ff e3       	ldi	r31, 0x3F	; 63
    1fa4:	f9 83       	std	Y+1, r31	; 0x01
    1fa6:	0d c0       	rjmp	.+26     	; 0x1fc2 <vfprintf+0x11c>
    1fa8:	83 36       	cpi	r24, 0x63	; 99
    1faa:	31 f0       	breq	.+12     	; 0x1fb8 <vfprintf+0x112>
    1fac:	83 37       	cpi	r24, 0x73	; 115
    1fae:	71 f0       	breq	.+28     	; 0x1fcc <vfprintf+0x126>
    1fb0:	83 35       	cpi	r24, 0x53	; 83
    1fb2:	09 f0       	breq	.+2      	; 0x1fb6 <vfprintf+0x110>
    1fb4:	60 c0       	rjmp	.+192    	; 0x2076 <vfprintf+0x1d0>
    1fb6:	22 c0       	rjmp	.+68     	; 0x1ffc <vfprintf+0x156>
    1fb8:	f8 01       	movw	r30, r16
    1fba:	80 81       	ld	r24, Z
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	0e 5f       	subi	r16, 0xFE	; 254
    1fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc2:	42 01       	movw	r8, r4
    1fc4:	71 e0       	ldi	r23, 0x01	; 1
    1fc6:	a7 2e       	mov	r10, r23
    1fc8:	b1 2c       	mov	r11, r1
    1fca:	16 c0       	rjmp	.+44     	; 0x1ff8 <vfprintf+0x152>
    1fcc:	62 e0       	ldi	r22, 0x02	; 2
    1fce:	66 2e       	mov	r6, r22
    1fd0:	71 2c       	mov	r7, r1
    1fd2:	60 0e       	add	r6, r16
    1fd4:	71 1e       	adc	r7, r17
    1fd6:	f8 01       	movw	r30, r16
    1fd8:	80 80       	ld	r8, Z
    1fda:	91 80       	ldd	r9, Z+1	; 0x01
    1fdc:	26 ff       	sbrs	r18, 6
    1fde:	03 c0       	rjmp	.+6      	; 0x1fe6 <vfprintf+0x140>
    1fe0:	6e 2d       	mov	r22, r14
    1fe2:	70 e0       	ldi	r23, 0x00	; 0
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <vfprintf+0x144>
    1fe6:	6f ef       	ldi	r22, 0xFF	; 255
    1fe8:	7f ef       	ldi	r23, 0xFF	; 255
    1fea:	c4 01       	movw	r24, r8
    1fec:	2c 87       	std	Y+12, r18	; 0x0c
    1fee:	0e 94 45 11 	call	0x228a	; 0x228a <strnlen>
    1ff2:	5c 01       	movw	r10, r24
    1ff4:	83 01       	movw	r16, r6
    1ff6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ff8:	2f 77       	andi	r18, 0x7F	; 127
    1ffa:	17 c0       	rjmp	.+46     	; 0x202a <vfprintf+0x184>
    1ffc:	52 e0       	ldi	r21, 0x02	; 2
    1ffe:	65 2e       	mov	r6, r21
    2000:	71 2c       	mov	r7, r1
    2002:	60 0e       	add	r6, r16
    2004:	71 1e       	adc	r7, r17
    2006:	f8 01       	movw	r30, r16
    2008:	80 80       	ld	r8, Z
    200a:	91 80       	ldd	r9, Z+1	; 0x01
    200c:	26 ff       	sbrs	r18, 6
    200e:	03 c0       	rjmp	.+6      	; 0x2016 <vfprintf+0x170>
    2010:	6e 2d       	mov	r22, r14
    2012:	70 e0       	ldi	r23, 0x00	; 0
    2014:	02 c0       	rjmp	.+4      	; 0x201a <vfprintf+0x174>
    2016:	6f ef       	ldi	r22, 0xFF	; 255
    2018:	7f ef       	ldi	r23, 0xFF	; 255
    201a:	c4 01       	movw	r24, r8
    201c:	2c 87       	std	Y+12, r18	; 0x0c
    201e:	0e 94 3a 11 	call	0x2274	; 0x2274 <strnlen_P>
    2022:	5c 01       	movw	r10, r24
    2024:	2c 85       	ldd	r18, Y+12	; 0x0c
    2026:	20 68       	ori	r18, 0x80	; 128
    2028:	83 01       	movw	r16, r6
    202a:	23 fd       	sbrc	r18, 3
    202c:	20 c0       	rjmp	.+64     	; 0x206e <vfprintf+0x1c8>
    202e:	08 c0       	rjmp	.+16     	; 0x2040 <vfprintf+0x19a>
    2030:	80 e2       	ldi	r24, 0x20	; 32
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	b6 01       	movw	r22, r12
    2036:	2c 87       	std	Y+12, r18	; 0x0c
    2038:	0e 94 50 11 	call	0x22a0	; 0x22a0 <fputc>
    203c:	fa 94       	dec	r15
    203e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2040:	8f 2d       	mov	r24, r15
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	a8 16       	cp	r10, r24
    2046:	b9 06       	cpc	r11, r25
    2048:	98 f3       	brcs	.-26     	; 0x2030 <vfprintf+0x18a>
    204a:	11 c0       	rjmp	.+34     	; 0x206e <vfprintf+0x1c8>
    204c:	f4 01       	movw	r30, r8
    204e:	27 fd       	sbrc	r18, 7
    2050:	85 91       	lpm	r24, Z+
    2052:	27 ff       	sbrs	r18, 7
    2054:	81 91       	ld	r24, Z+
    2056:	4f 01       	movw	r8, r30
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	b6 01       	movw	r22, r12
    205c:	2c 87       	std	Y+12, r18	; 0x0c
    205e:	0e 94 50 11 	call	0x22a0	; 0x22a0 <fputc>
    2062:	2c 85       	ldd	r18, Y+12	; 0x0c
    2064:	f1 10       	cpse	r15, r1
    2066:	fa 94       	dec	r15
    2068:	08 94       	sec
    206a:	a1 08       	sbc	r10, r1
    206c:	b1 08       	sbc	r11, r1
    206e:	a1 14       	cp	r10, r1
    2070:	b1 04       	cpc	r11, r1
    2072:	61 f7       	brne	.-40     	; 0x204c <vfprintf+0x1a6>
    2074:	f1 c0       	rjmp	.+482    	; 0x2258 <vfprintf+0x3b2>
    2076:	84 36       	cpi	r24, 0x64	; 100
    2078:	11 f0       	breq	.+4      	; 0x207e <vfprintf+0x1d8>
    207a:	89 36       	cpi	r24, 0x69	; 105
    207c:	49 f5       	brne	.+82     	; 0x20d0 <vfprintf+0x22a>
    207e:	27 ff       	sbrs	r18, 7
    2080:	08 c0       	rjmp	.+16     	; 0x2092 <vfprintf+0x1ec>
    2082:	f8 01       	movw	r30, r16
    2084:	60 81       	ld	r22, Z
    2086:	71 81       	ldd	r23, Z+1	; 0x01
    2088:	82 81       	ldd	r24, Z+2	; 0x02
    208a:	93 81       	ldd	r25, Z+3	; 0x03
    208c:	0c 5f       	subi	r16, 0xFC	; 252
    208e:	1f 4f       	sbci	r17, 0xFF	; 255
    2090:	09 c0       	rjmp	.+18     	; 0x20a4 <vfprintf+0x1fe>
    2092:	f8 01       	movw	r30, r16
    2094:	60 81       	ld	r22, Z
    2096:	71 81       	ldd	r23, Z+1	; 0x01
    2098:	88 27       	eor	r24, r24
    209a:	77 fd       	sbrc	r23, 7
    209c:	80 95       	com	r24
    209e:	98 2f       	mov	r25, r24
    20a0:	0e 5f       	subi	r16, 0xFE	; 254
    20a2:	1f 4f       	sbci	r17, 0xFF	; 255
    20a4:	4f e6       	ldi	r20, 0x6F	; 111
    20a6:	b4 2e       	mov	r11, r20
    20a8:	b2 22       	and	r11, r18
    20aa:	97 ff       	sbrs	r25, 7
    20ac:	09 c0       	rjmp	.+18     	; 0x20c0 <vfprintf+0x21a>
    20ae:	90 95       	com	r25
    20b0:	80 95       	com	r24
    20b2:	70 95       	com	r23
    20b4:	61 95       	neg	r22
    20b6:	7f 4f       	sbci	r23, 0xFF	; 255
    20b8:	8f 4f       	sbci	r24, 0xFF	; 255
    20ba:	9f 4f       	sbci	r25, 0xFF	; 255
    20bc:	f0 e8       	ldi	r31, 0x80	; 128
    20be:	bf 2a       	or	r11, r31
    20c0:	a2 01       	movw	r20, r4
    20c2:	2a e0       	ldi	r18, 0x0A	; 10
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__ultoa_invert>
    20ca:	78 2e       	mov	r7, r24
    20cc:	74 18       	sub	r7, r4
    20ce:	45 c0       	rjmp	.+138    	; 0x215a <vfprintf+0x2b4>
    20d0:	85 37       	cpi	r24, 0x75	; 117
    20d2:	31 f4       	brne	.+12     	; 0x20e0 <vfprintf+0x23a>
    20d4:	3f ee       	ldi	r19, 0xEF	; 239
    20d6:	b3 2e       	mov	r11, r19
    20d8:	b2 22       	and	r11, r18
    20da:	2a e0       	ldi	r18, 0x0A	; 10
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	25 c0       	rjmp	.+74     	; 0x212a <vfprintf+0x284>
    20e0:	99 ef       	ldi	r25, 0xF9	; 249
    20e2:	b9 2e       	mov	r11, r25
    20e4:	b2 22       	and	r11, r18
    20e6:	8f 36       	cpi	r24, 0x6F	; 111
    20e8:	c1 f0       	breq	.+48     	; 0x211a <vfprintf+0x274>
    20ea:	80 37       	cpi	r24, 0x70	; 112
    20ec:	20 f4       	brcc	.+8      	; 0x20f6 <vfprintf+0x250>
    20ee:	88 35       	cpi	r24, 0x58	; 88
    20f0:	09 f0       	breq	.+2      	; 0x20f4 <vfprintf+0x24e>
    20f2:	b5 c0       	rjmp	.+362    	; 0x225e <vfprintf+0x3b8>
    20f4:	0d c0       	rjmp	.+26     	; 0x2110 <vfprintf+0x26a>
    20f6:	80 37       	cpi	r24, 0x70	; 112
    20f8:	21 f0       	breq	.+8      	; 0x2102 <vfprintf+0x25c>
    20fa:	88 37       	cpi	r24, 0x78	; 120
    20fc:	09 f0       	breq	.+2      	; 0x2100 <vfprintf+0x25a>
    20fe:	af c0       	rjmp	.+350    	; 0x225e <vfprintf+0x3b8>
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <vfprintf+0x260>
    2102:	20 e1       	ldi	r18, 0x10	; 16
    2104:	b2 2a       	or	r11, r18
    2106:	b4 fe       	sbrs	r11, 4
    2108:	0b c0       	rjmp	.+22     	; 0x2120 <vfprintf+0x27a>
    210a:	84 e0       	ldi	r24, 0x04	; 4
    210c:	b8 2a       	or	r11, r24
    210e:	08 c0       	rjmp	.+16     	; 0x2120 <vfprintf+0x27a>
    2110:	b4 fe       	sbrs	r11, 4
    2112:	09 c0       	rjmp	.+18     	; 0x2126 <vfprintf+0x280>
    2114:	e6 e0       	ldi	r30, 0x06	; 6
    2116:	be 2a       	or	r11, r30
    2118:	06 c0       	rjmp	.+12     	; 0x2126 <vfprintf+0x280>
    211a:	28 e0       	ldi	r18, 0x08	; 8
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	05 c0       	rjmp	.+10     	; 0x212a <vfprintf+0x284>
    2120:	20 e1       	ldi	r18, 0x10	; 16
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	02 c0       	rjmp	.+4      	; 0x212a <vfprintf+0x284>
    2126:	20 e1       	ldi	r18, 0x10	; 16
    2128:	32 e0       	ldi	r19, 0x02	; 2
    212a:	b7 fe       	sbrs	r11, 7
    212c:	08 c0       	rjmp	.+16     	; 0x213e <vfprintf+0x298>
    212e:	f8 01       	movw	r30, r16
    2130:	60 81       	ld	r22, Z
    2132:	71 81       	ldd	r23, Z+1	; 0x01
    2134:	82 81       	ldd	r24, Z+2	; 0x02
    2136:	93 81       	ldd	r25, Z+3	; 0x03
    2138:	0c 5f       	subi	r16, 0xFC	; 252
    213a:	1f 4f       	sbci	r17, 0xFF	; 255
    213c:	07 c0       	rjmp	.+14     	; 0x214c <vfprintf+0x2a6>
    213e:	f8 01       	movw	r30, r16
    2140:	60 81       	ld	r22, Z
    2142:	71 81       	ldd	r23, Z+1	; 0x01
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	0e 5f       	subi	r16, 0xFE	; 254
    214a:	1f 4f       	sbci	r17, 0xFF	; 255
    214c:	a2 01       	movw	r20, r4
    214e:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__ultoa_invert>
    2152:	78 2e       	mov	r7, r24
    2154:	74 18       	sub	r7, r4
    2156:	ff e7       	ldi	r31, 0x7F	; 127
    2158:	bf 22       	and	r11, r31
    215a:	b6 fe       	sbrs	r11, 6
    215c:	0b c0       	rjmp	.+22     	; 0x2174 <vfprintf+0x2ce>
    215e:	2e ef       	ldi	r18, 0xFE	; 254
    2160:	b2 22       	and	r11, r18
    2162:	7e 14       	cp	r7, r14
    2164:	38 f4       	brcc	.+14     	; 0x2174 <vfprintf+0x2ce>
    2166:	b4 fe       	sbrs	r11, 4
    2168:	07 c0       	rjmp	.+14     	; 0x2178 <vfprintf+0x2d2>
    216a:	b2 fc       	sbrc	r11, 2
    216c:	05 c0       	rjmp	.+10     	; 0x2178 <vfprintf+0x2d2>
    216e:	8f ee       	ldi	r24, 0xEF	; 239
    2170:	b8 22       	and	r11, r24
    2172:	02 c0       	rjmp	.+4      	; 0x2178 <vfprintf+0x2d2>
    2174:	a7 2c       	mov	r10, r7
    2176:	01 c0       	rjmp	.+2      	; 0x217a <vfprintf+0x2d4>
    2178:	ae 2c       	mov	r10, r14
    217a:	8b 2d       	mov	r24, r11
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	b4 fe       	sbrs	r11, 4
    2180:	0d c0       	rjmp	.+26     	; 0x219c <vfprintf+0x2f6>
    2182:	fe 01       	movw	r30, r28
    2184:	e7 0d       	add	r30, r7
    2186:	f1 1d       	adc	r31, r1
    2188:	20 81       	ld	r18, Z
    218a:	20 33       	cpi	r18, 0x30	; 48
    218c:	19 f4       	brne	.+6      	; 0x2194 <vfprintf+0x2ee>
    218e:	e9 ee       	ldi	r30, 0xE9	; 233
    2190:	be 22       	and	r11, r30
    2192:	09 c0       	rjmp	.+18     	; 0x21a6 <vfprintf+0x300>
    2194:	a3 94       	inc	r10
    2196:	b2 fe       	sbrs	r11, 2
    2198:	06 c0       	rjmp	.+12     	; 0x21a6 <vfprintf+0x300>
    219a:	04 c0       	rjmp	.+8      	; 0x21a4 <vfprintf+0x2fe>
    219c:	86 78       	andi	r24, 0x86	; 134
    219e:	90 70       	andi	r25, 0x00	; 0
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	09 f0       	breq	.+2      	; 0x21a6 <vfprintf+0x300>
    21a4:	a3 94       	inc	r10
    21a6:	8b 2c       	mov	r8, r11
    21a8:	99 24       	eor	r9, r9
    21aa:	b3 fc       	sbrc	r11, 3
    21ac:	14 c0       	rjmp	.+40     	; 0x21d6 <vfprintf+0x330>
    21ae:	b0 fe       	sbrs	r11, 0
    21b0:	0f c0       	rjmp	.+30     	; 0x21d0 <vfprintf+0x32a>
    21b2:	af 14       	cp	r10, r15
    21b4:	28 f4       	brcc	.+10     	; 0x21c0 <vfprintf+0x31a>
    21b6:	e7 2c       	mov	r14, r7
    21b8:	ef 0c       	add	r14, r15
    21ba:	ea 18       	sub	r14, r10
    21bc:	af 2c       	mov	r10, r15
    21be:	08 c0       	rjmp	.+16     	; 0x21d0 <vfprintf+0x32a>
    21c0:	e7 2c       	mov	r14, r7
    21c2:	06 c0       	rjmp	.+12     	; 0x21d0 <vfprintf+0x32a>
    21c4:	80 e2       	ldi	r24, 0x20	; 32
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	b6 01       	movw	r22, r12
    21ca:	0e 94 50 11 	call	0x22a0	; 0x22a0 <fputc>
    21ce:	a3 94       	inc	r10
    21d0:	af 14       	cp	r10, r15
    21d2:	c0 f3       	brcs	.-16     	; 0x21c4 <vfprintf+0x31e>
    21d4:	04 c0       	rjmp	.+8      	; 0x21de <vfprintf+0x338>
    21d6:	af 14       	cp	r10, r15
    21d8:	10 f4       	brcc	.+4      	; 0x21de <vfprintf+0x338>
    21da:	fa 18       	sub	r15, r10
    21dc:	01 c0       	rjmp	.+2      	; 0x21e0 <vfprintf+0x33a>
    21de:	ff 24       	eor	r15, r15
    21e0:	84 fe       	sbrs	r8, 4
    21e2:	0f c0       	rjmp	.+30     	; 0x2202 <vfprintf+0x35c>
    21e4:	80 e3       	ldi	r24, 0x30	; 48
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	b6 01       	movw	r22, r12
    21ea:	0e 94 50 11 	call	0x22a0	; 0x22a0 <fputc>
    21ee:	82 fe       	sbrs	r8, 2
    21f0:	1f c0       	rjmp	.+62     	; 0x2230 <vfprintf+0x38a>
    21f2:	81 fe       	sbrs	r8, 1
    21f4:	03 c0       	rjmp	.+6      	; 0x21fc <vfprintf+0x356>
    21f6:	88 e5       	ldi	r24, 0x58	; 88
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	10 c0       	rjmp	.+32     	; 0x221c <vfprintf+0x376>
    21fc:	88 e7       	ldi	r24, 0x78	; 120
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	0d c0       	rjmp	.+26     	; 0x221c <vfprintf+0x376>
    2202:	c4 01       	movw	r24, r8
    2204:	86 78       	andi	r24, 0x86	; 134
    2206:	90 70       	andi	r25, 0x00	; 0
    2208:	00 97       	sbiw	r24, 0x00	; 0
    220a:	91 f0       	breq	.+36     	; 0x2230 <vfprintf+0x38a>
    220c:	81 fc       	sbrc	r8, 1
    220e:	02 c0       	rjmp	.+4      	; 0x2214 <vfprintf+0x36e>
    2210:	80 e2       	ldi	r24, 0x20	; 32
    2212:	01 c0       	rjmp	.+2      	; 0x2216 <vfprintf+0x370>
    2214:	8b e2       	ldi	r24, 0x2B	; 43
    2216:	b7 fc       	sbrc	r11, 7
    2218:	8d e2       	ldi	r24, 0x2D	; 45
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	b6 01       	movw	r22, r12
    221e:	0e 94 50 11 	call	0x22a0	; 0x22a0 <fputc>
    2222:	06 c0       	rjmp	.+12     	; 0x2230 <vfprintf+0x38a>
    2224:	80 e3       	ldi	r24, 0x30	; 48
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	b6 01       	movw	r22, r12
    222a:	0e 94 50 11 	call	0x22a0	; 0x22a0 <fputc>
    222e:	ea 94       	dec	r14
    2230:	7e 14       	cp	r7, r14
    2232:	c0 f3       	brcs	.-16     	; 0x2224 <vfprintf+0x37e>
    2234:	7a 94       	dec	r7
    2236:	f2 01       	movw	r30, r4
    2238:	e7 0d       	add	r30, r7
    223a:	f1 1d       	adc	r31, r1
    223c:	80 81       	ld	r24, Z
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	b6 01       	movw	r22, r12
    2242:	0e 94 50 11 	call	0x22a0	; 0x22a0 <fputc>
    2246:	77 20       	and	r7, r7
    2248:	a9 f7       	brne	.-22     	; 0x2234 <vfprintf+0x38e>
    224a:	06 c0       	rjmp	.+12     	; 0x2258 <vfprintf+0x3b2>
    224c:	80 e2       	ldi	r24, 0x20	; 32
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	b6 01       	movw	r22, r12
    2252:	0e 94 50 11 	call	0x22a0	; 0x22a0 <fputc>
    2256:	fa 94       	dec	r15
    2258:	ff 20       	and	r15, r15
    225a:	c1 f7       	brne	.-16     	; 0x224c <vfprintf+0x3a6>
    225c:	37 ce       	rjmp	.-914    	; 0x1ecc <vfprintf+0x26>
    225e:	f6 01       	movw	r30, r12
    2260:	26 81       	ldd	r18, Z+6	; 0x06
    2262:	37 81       	ldd	r19, Z+7	; 0x07
    2264:	02 c0       	rjmp	.+4      	; 0x226a <vfprintf+0x3c4>
    2266:	2f ef       	ldi	r18, 0xFF	; 255
    2268:	3f ef       	ldi	r19, 0xFF	; 255
    226a:	c9 01       	movw	r24, r18
    226c:	2c 96       	adiw	r28, 0x0c	; 12
    226e:	e2 e1       	ldi	r30, 0x12	; 18
    2270:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__epilogue_restores__>

00002274 <strnlen_P>:
    2274:	fc 01       	movw	r30, r24
    2276:	05 90       	lpm	r0, Z+
    2278:	61 50       	subi	r22, 0x01	; 1
    227a:	70 40       	sbci	r23, 0x00	; 0
    227c:	01 10       	cpse	r0, r1
    227e:	d8 f7       	brcc	.-10     	; 0x2276 <strnlen_P+0x2>
    2280:	80 95       	com	r24
    2282:	90 95       	com	r25
    2284:	8e 0f       	add	r24, r30
    2286:	9f 1f       	adc	r25, r31
    2288:	08 95       	ret

0000228a <strnlen>:
    228a:	fc 01       	movw	r30, r24
    228c:	61 50       	subi	r22, 0x01	; 1
    228e:	70 40       	sbci	r23, 0x00	; 0
    2290:	01 90       	ld	r0, Z+
    2292:	01 10       	cpse	r0, r1
    2294:	d8 f7       	brcc	.-10     	; 0x228c <strnlen+0x2>
    2296:	80 95       	com	r24
    2298:	90 95       	com	r25
    229a:	8e 0f       	add	r24, r30
    229c:	9f 1f       	adc	r25, r31
    229e:	08 95       	ret

000022a0 <fputc>:
    22a0:	0f 93       	push	r16
    22a2:	1f 93       	push	r17
    22a4:	cf 93       	push	r28
    22a6:	df 93       	push	r29
    22a8:	8c 01       	movw	r16, r24
    22aa:	eb 01       	movw	r28, r22
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	81 ff       	sbrs	r24, 1
    22b0:	1b c0       	rjmp	.+54     	; 0x22e8 <fputc+0x48>
    22b2:	82 ff       	sbrs	r24, 2
    22b4:	0d c0       	rjmp	.+26     	; 0x22d0 <fputc+0x30>
    22b6:	2e 81       	ldd	r18, Y+6	; 0x06
    22b8:	3f 81       	ldd	r19, Y+7	; 0x07
    22ba:	8c 81       	ldd	r24, Y+4	; 0x04
    22bc:	9d 81       	ldd	r25, Y+5	; 0x05
    22be:	28 17       	cp	r18, r24
    22c0:	39 07       	cpc	r19, r25
    22c2:	64 f4       	brge	.+24     	; 0x22dc <fputc+0x3c>
    22c4:	e8 81       	ld	r30, Y
    22c6:	f9 81       	ldd	r31, Y+1	; 0x01
    22c8:	01 93       	st	Z+, r16
    22ca:	f9 83       	std	Y+1, r31	; 0x01
    22cc:	e8 83       	st	Y, r30
    22ce:	06 c0       	rjmp	.+12     	; 0x22dc <fputc+0x3c>
    22d0:	e8 85       	ldd	r30, Y+8	; 0x08
    22d2:	f9 85       	ldd	r31, Y+9	; 0x09
    22d4:	80 2f       	mov	r24, r16
    22d6:	09 95       	icall
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	31 f4       	brne	.+12     	; 0x22e8 <fputc+0x48>
    22dc:	8e 81       	ldd	r24, Y+6	; 0x06
    22de:	9f 81       	ldd	r25, Y+7	; 0x07
    22e0:	01 96       	adiw	r24, 0x01	; 1
    22e2:	9f 83       	std	Y+7, r25	; 0x07
    22e4:	8e 83       	std	Y+6, r24	; 0x06
    22e6:	02 c0       	rjmp	.+4      	; 0x22ec <fputc+0x4c>
    22e8:	0f ef       	ldi	r16, 0xFF	; 255
    22ea:	1f ef       	ldi	r17, 0xFF	; 255
    22ec:	c8 01       	movw	r24, r16
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	1f 91       	pop	r17
    22f4:	0f 91       	pop	r16
    22f6:	08 95       	ret

000022f8 <__ultoa_invert>:
    22f8:	fa 01       	movw	r30, r20
    22fa:	aa 27       	eor	r26, r26
    22fc:	28 30       	cpi	r18, 0x08	; 8
    22fe:	51 f1       	breq	.+84     	; 0x2354 <__ultoa_invert+0x5c>
    2300:	20 31       	cpi	r18, 0x10	; 16
    2302:	81 f1       	breq	.+96     	; 0x2364 <__ultoa_invert+0x6c>
    2304:	e8 94       	clt
    2306:	6f 93       	push	r22
    2308:	6e 7f       	andi	r22, 0xFE	; 254
    230a:	6e 5f       	subi	r22, 0xFE	; 254
    230c:	7f 4f       	sbci	r23, 0xFF	; 255
    230e:	8f 4f       	sbci	r24, 0xFF	; 255
    2310:	9f 4f       	sbci	r25, 0xFF	; 255
    2312:	af 4f       	sbci	r26, 0xFF	; 255
    2314:	b1 e0       	ldi	r27, 0x01	; 1
    2316:	3e d0       	rcall	.+124    	; 0x2394 <__ultoa_invert+0x9c>
    2318:	b4 e0       	ldi	r27, 0x04	; 4
    231a:	3c d0       	rcall	.+120    	; 0x2394 <__ultoa_invert+0x9c>
    231c:	67 0f       	add	r22, r23
    231e:	78 1f       	adc	r23, r24
    2320:	89 1f       	adc	r24, r25
    2322:	9a 1f       	adc	r25, r26
    2324:	a1 1d       	adc	r26, r1
    2326:	68 0f       	add	r22, r24
    2328:	79 1f       	adc	r23, r25
    232a:	8a 1f       	adc	r24, r26
    232c:	91 1d       	adc	r25, r1
    232e:	a1 1d       	adc	r26, r1
    2330:	6a 0f       	add	r22, r26
    2332:	71 1d       	adc	r23, r1
    2334:	81 1d       	adc	r24, r1
    2336:	91 1d       	adc	r25, r1
    2338:	a1 1d       	adc	r26, r1
    233a:	20 d0       	rcall	.+64     	; 0x237c <__ultoa_invert+0x84>
    233c:	09 f4       	brne	.+2      	; 0x2340 <__ultoa_invert+0x48>
    233e:	68 94       	set
    2340:	3f 91       	pop	r19
    2342:	2a e0       	ldi	r18, 0x0A	; 10
    2344:	26 9f       	mul	r18, r22
    2346:	11 24       	eor	r1, r1
    2348:	30 19       	sub	r19, r0
    234a:	30 5d       	subi	r19, 0xD0	; 208
    234c:	31 93       	st	Z+, r19
    234e:	de f6       	brtc	.-74     	; 0x2306 <__ultoa_invert+0xe>
    2350:	cf 01       	movw	r24, r30
    2352:	08 95       	ret
    2354:	46 2f       	mov	r20, r22
    2356:	47 70       	andi	r20, 0x07	; 7
    2358:	40 5d       	subi	r20, 0xD0	; 208
    235a:	41 93       	st	Z+, r20
    235c:	b3 e0       	ldi	r27, 0x03	; 3
    235e:	0f d0       	rcall	.+30     	; 0x237e <__ultoa_invert+0x86>
    2360:	c9 f7       	brne	.-14     	; 0x2354 <__ultoa_invert+0x5c>
    2362:	f6 cf       	rjmp	.-20     	; 0x2350 <__ultoa_invert+0x58>
    2364:	46 2f       	mov	r20, r22
    2366:	4f 70       	andi	r20, 0x0F	; 15
    2368:	40 5d       	subi	r20, 0xD0	; 208
    236a:	4a 33       	cpi	r20, 0x3A	; 58
    236c:	18 f0       	brcs	.+6      	; 0x2374 <__ultoa_invert+0x7c>
    236e:	49 5d       	subi	r20, 0xD9	; 217
    2370:	31 fd       	sbrc	r19, 1
    2372:	40 52       	subi	r20, 0x20	; 32
    2374:	41 93       	st	Z+, r20
    2376:	02 d0       	rcall	.+4      	; 0x237c <__ultoa_invert+0x84>
    2378:	a9 f7       	brne	.-22     	; 0x2364 <__ultoa_invert+0x6c>
    237a:	ea cf       	rjmp	.-44     	; 0x2350 <__ultoa_invert+0x58>
    237c:	b4 e0       	ldi	r27, 0x04	; 4
    237e:	a6 95       	lsr	r26
    2380:	97 95       	ror	r25
    2382:	87 95       	ror	r24
    2384:	77 95       	ror	r23
    2386:	67 95       	ror	r22
    2388:	ba 95       	dec	r27
    238a:	c9 f7       	brne	.-14     	; 0x237e <__ultoa_invert+0x86>
    238c:	00 97       	sbiw	r24, 0x00	; 0
    238e:	61 05       	cpc	r22, r1
    2390:	71 05       	cpc	r23, r1
    2392:	08 95       	ret
    2394:	9b 01       	movw	r18, r22
    2396:	ac 01       	movw	r20, r24
    2398:	0a 2e       	mov	r0, r26
    239a:	06 94       	lsr	r0
    239c:	57 95       	ror	r21
    239e:	47 95       	ror	r20
    23a0:	37 95       	ror	r19
    23a2:	27 95       	ror	r18
    23a4:	ba 95       	dec	r27
    23a6:	c9 f7       	brne	.-14     	; 0x239a <__ultoa_invert+0xa2>
    23a8:	62 0f       	add	r22, r18
    23aa:	73 1f       	adc	r23, r19
    23ac:	84 1f       	adc	r24, r20
    23ae:	95 1f       	adc	r25, r21
    23b0:	a0 1d       	adc	r26, r0
    23b2:	08 95       	ret

000023b4 <_exit>:
    23b4:	f8 94       	cli

000023b6 <__stop_program>:
    23b6:	ff cf       	rjmp	.-2      	; 0x23b6 <__stop_program>
