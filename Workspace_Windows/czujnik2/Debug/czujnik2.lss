
czujnik2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000238e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  0000238e  00002402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800178  000024a6  0000251a  2**0
                  ALLOC
  3 .stab         00001260  00000000  00000000  0000251c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b09  00000000  00000000  0000377c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__vector_5>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__vector_8>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <LCD_Initalize+0x28c>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <LCD_Home+0x88>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_LCD_Write+0x17c>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <_LCD_OutNibble+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d4 e0       	ldi	r29, 0x04	; 4
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ee e8       	ldi	r30, 0x8E	; 142
     162:	f3 e2       	ldi	r31, 0x23	; 35
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a8 37       	cpi	r26, 0x78	; 120
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a8 e7       	ldi	r26, 0x78	; 120
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a8 39       	cpi	r26, 0x98	; 152
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 4a 07 	call	0xe94	; 0xe94 <main>
     184:	0c 94 c5 11 	jmp	0x238a	; 0x238a <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__vector_default>

0000018c <_LCD_OutNibble>:
//
// Funkcja wystawiaj¹ca pó³bajt na magistralê danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
     18c:	df 93       	push	r29
     18e:	cf 93       	push	r28
     190:	0f 92       	push	r0
     192:	cd b7       	in	r28, 0x3d	; 61
     194:	de b7       	in	r29, 0x3e	; 62
     196:	89 83       	std	Y+1, r24	; 0x01
if(nibbleToWrite & 0x01)
     198:	89 81       	ldd	r24, Y+1	; 0x01
     19a:	88 2f       	mov	r24, r24
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	81 70       	andi	r24, 0x01	; 1
     1a0:	90 70       	andi	r25, 0x00	; 0
     1a2:	88 23       	and	r24, r24
     1a4:	41 f0       	breq	.+16     	; 0x1b6 <_LCD_OutNibble+0x2a>
	LCD_DB4_PORT |= LCD_DB4;
     1a6:	a2 e3       	ldi	r26, 0x32	; 50
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
     1aa:	e2 e3       	ldi	r30, 0x32	; 50
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	84 60       	ori	r24, 0x04	; 4
     1b2:	8c 93       	st	X, r24
     1b4:	07 c0       	rjmp	.+14     	; 0x1c4 <_LCD_OutNibble+0x38>
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     1b6:	a2 e3       	ldi	r26, 0x32	; 50
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	e2 e3       	ldi	r30, 0x32	; 50
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	8b 7f       	andi	r24, 0xFB	; 251
     1c2:	8c 93       	st	X, r24

if(nibbleToWrite & 0x02)
     1c4:	89 81       	ldd	r24, Y+1	; 0x01
     1c6:	88 2f       	mov	r24, r24
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	82 70       	andi	r24, 0x02	; 2
     1cc:	90 70       	andi	r25, 0x00	; 0
     1ce:	00 97       	sbiw	r24, 0x00	; 0
     1d0:	41 f0       	breq	.+16     	; 0x1e2 <_LCD_OutNibble+0x56>
	LCD_DB5_PORT |= LCD_DB5;
     1d2:	a2 e3       	ldi	r26, 0x32	; 50
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	e2 e3       	ldi	r30, 0x32	; 50
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	80 81       	ld	r24, Z
     1dc:	88 60       	ori	r24, 0x08	; 8
     1de:	8c 93       	st	X, r24
     1e0:	07 c0       	rjmp	.+14     	; 0x1f0 <_LCD_OutNibble+0x64>
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     1e2:	a2 e3       	ldi	r26, 0x32	; 50
     1e4:	b0 e0       	ldi	r27, 0x00	; 0
     1e6:	e2 e3       	ldi	r30, 0x32	; 50
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	80 81       	ld	r24, Z
     1ec:	87 7f       	andi	r24, 0xF7	; 247
     1ee:	8c 93       	st	X, r24

if(nibbleToWrite & 0x04)
     1f0:	89 81       	ldd	r24, Y+1	; 0x01
     1f2:	88 2f       	mov	r24, r24
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	84 70       	andi	r24, 0x04	; 4
     1f8:	90 70       	andi	r25, 0x00	; 0
     1fa:	00 97       	sbiw	r24, 0x00	; 0
     1fc:	41 f0       	breq	.+16     	; 0x20e <_LCD_OutNibble+0x82>
	LCD_DB6_PORT |= LCD_DB6;
     1fe:	a2 e3       	ldi	r26, 0x32	; 50
     200:	b0 e0       	ldi	r27, 0x00	; 0
     202:	e2 e3       	ldi	r30, 0x32	; 50
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	80 81       	ld	r24, Z
     208:	80 61       	ori	r24, 0x10	; 16
     20a:	8c 93       	st	X, r24
     20c:	07 c0       	rjmp	.+14     	; 0x21c <_LCD_OutNibble+0x90>
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     20e:	a2 e3       	ldi	r26, 0x32	; 50
     210:	b0 e0       	ldi	r27, 0x00	; 0
     212:	e2 e3       	ldi	r30, 0x32	; 50
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	8f 7e       	andi	r24, 0xEF	; 239
     21a:	8c 93       	st	X, r24

if(nibbleToWrite & 0x08)
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	88 2f       	mov	r24, r24
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	88 70       	andi	r24, 0x08	; 8
     224:	90 70       	andi	r25, 0x00	; 0
     226:	00 97       	sbiw	r24, 0x00	; 0
     228:	41 f0       	breq	.+16     	; 0x23a <_LCD_OutNibble+0xae>
	LCD_DB7_PORT |= LCD_DB7;
     22a:	a2 e3       	ldi	r26, 0x32	; 50
     22c:	b0 e0       	ldi	r27, 0x00	; 0
     22e:	e2 e3       	ldi	r30, 0x32	; 50
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	80 62       	ori	r24, 0x20	; 32
     236:	8c 93       	st	X, r24
     238:	07 c0       	rjmp	.+14     	; 0x248 <_LCD_OutNibble+0xbc>
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     23a:	a2 e3       	ldi	r26, 0x32	; 50
     23c:	b0 e0       	ldi	r27, 0x00	; 0
     23e:	e2 e3       	ldi	r30, 0x32	; 50
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	8f 7d       	andi	r24, 0xDF	; 223
     246:	8c 93       	st	X, r24
}
     248:	0f 90       	pop	r0
     24a:	cf 91       	pop	r28
     24c:	df 91       	pop	r29
     24e:	08 95       	ret

00000250 <_LCD_Write>:
//
// Funkcja zapisu bajtu do wywietacza (bez rozró¿nienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
     250:	df 93       	push	r29
     252:	cf 93       	push	r28
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	69 97       	sbiw	r28, 0x19	; 25
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	de bf       	out	0x3e, r29	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	cd bf       	out	0x3d, r28	; 61
     264:	89 8f       	std	Y+25, r24	; 0x19
LCD_E_PORT |= LCD_E;
     266:	a2 e3       	ldi	r26, 0x32	; 50
     268:	b0 e0       	ldi	r27, 0x00	; 0
     26a:	e2 e3       	ldi	r30, 0x32	; 50
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	82 60       	ori	r24, 0x02	; 2
     272:	8c 93       	st	X, r24
_LCD_OutNibble(dataToWrite >> 4);
     274:	89 8d       	ldd	r24, Y+25	; 0x19
     276:	82 95       	swap	r24
     278:	8f 70       	andi	r24, 0x0F	; 15
     27a:	0e 94 c6 00 	call	0x18c	; 0x18c <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
     27e:	a2 e3       	ldi	r26, 0x32	; 50
     280:	b0 e0       	ldi	r27, 0x00	; 0
     282:	e2 e3       	ldi	r30, 0x32	; 50
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	8d 7f       	andi	r24, 0xFD	; 253
     28a:	8c 93       	st	X, r24
LCD_E_PORT |= LCD_E;
     28c:	a2 e3       	ldi	r26, 0x32	; 50
     28e:	b0 e0       	ldi	r27, 0x00	; 0
     290:	e2 e3       	ldi	r30, 0x32	; 50
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	80 81       	ld	r24, Z
     296:	82 60       	ori	r24, 0x02	; 2
     298:	8c 93       	st	X, r24
_LCD_OutNibble(dataToWrite);
     29a:	89 8d       	ldd	r24, Y+25	; 0x19
     29c:	0e 94 c6 00 	call	0x18c	; 0x18c <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
     2a0:	a2 e3       	ldi	r26, 0x32	; 50
     2a2:	b0 e0       	ldi	r27, 0x00	; 0
     2a4:	e2 e3       	ldi	r30, 0x32	; 50
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	80 81       	ld	r24, Z
     2aa:	8d 7f       	andi	r24, 0xFD	; 253
     2ac:	8c 93       	st	X, r24
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	a8 e4       	ldi	r26, 0x48	; 72
     2b4:	b2 e4       	ldi	r27, 0x42	; 66
     2b6:	8d 8b       	std	Y+21, r24	; 0x15
     2b8:	9e 8b       	std	Y+22, r25	; 0x16
     2ba:	af 8b       	std	Y+23, r26	; 0x17
     2bc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     2be:	2b ea       	ldi	r18, 0xAB	; 171
     2c0:	3a ea       	ldi	r19, 0xAA	; 170
     2c2:	4a ea       	ldi	r20, 0xAA	; 170
     2c4:	5e e3       	ldi	r21, 0x3E	; 62
     2c6:	6d 89       	ldd	r22, Y+21	; 0x15
     2c8:	7e 89       	ldd	r23, Y+22	; 0x16
     2ca:	8f 89       	ldd	r24, Y+23	; 0x17
     2cc:	98 8d       	ldd	r25, Y+24	; 0x18
     2ce:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3>
     2d2:	dc 01       	movw	r26, r24
     2d4:	cb 01       	movw	r24, r22
     2d6:	89 8b       	std	Y+17, r24	; 0x11
     2d8:	9a 8b       	std	Y+18, r25	; 0x12
     2da:	ab 8b       	std	Y+19, r26	; 0x13
     2dc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	40 e8       	ldi	r20, 0x80	; 128
     2e4:	5f e3       	ldi	r21, 0x3F	; 63
     2e6:	69 89       	ldd	r22, Y+17	; 0x11
     2e8:	7a 89       	ldd	r23, Y+18	; 0x12
     2ea:	8b 89       	ldd	r24, Y+19	; 0x13
     2ec:	9c 89       	ldd	r25, Y+20	; 0x14
     2ee:	0e 94 41 0c 	call	0x1882	; 0x1882 <__ltsf2>
     2f2:	88 23       	and	r24, r24
     2f4:	1c f4       	brge	.+6      	; 0x2fc <_LCD_Write+0xac>
		__ticks = 1;
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	88 8b       	std	Y+16, r24	; 0x10
     2fa:	91 c0       	rjmp	.+290    	; 0x41e <_LCD_Write+0x1ce>
	else if (__tmp > 255)
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	4f e7       	ldi	r20, 0x7F	; 127
     302:	53 e4       	ldi	r21, 0x43	; 67
     304:	69 89       	ldd	r22, Y+17	; 0x11
     306:	7a 89       	ldd	r23, Y+18	; 0x12
     308:	8b 89       	ldd	r24, Y+19	; 0x13
     30a:	9c 89       	ldd	r25, Y+20	; 0x14
     30c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gtsf2>
     310:	18 16       	cp	r1, r24
     312:	0c f0       	brlt	.+2      	; 0x316 <_LCD_Write+0xc6>
     314:	7b c0       	rjmp	.+246    	; 0x40c <_LCD_Write+0x1bc>
	{
		_delay_ms(__us / 1000.0);
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	4a e7       	ldi	r20, 0x7A	; 122
     31c:	54 e4       	ldi	r21, 0x44	; 68
     31e:	6d 89       	ldd	r22, Y+21	; 0x15
     320:	7e 89       	ldd	r23, Y+22	; 0x16
     322:	8f 89       	ldd	r24, Y+23	; 0x17
     324:	98 8d       	ldd	r25, Y+24	; 0x18
     326:	0e 94 37 0b 	call	0x166e	; 0x166e <__divsf3>
     32a:	dc 01       	movw	r26, r24
     32c:	cb 01       	movw	r24, r22
     32e:	8c 87       	std	Y+12, r24	; 0x0c
     330:	9d 87       	std	Y+13, r25	; 0x0d
     332:	ae 87       	std	Y+14, r26	; 0x0e
     334:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     336:	20 e0       	ldi	r18, 0x00	; 0
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	4a e7       	ldi	r20, 0x7A	; 122
     33c:	53 e4       	ldi	r21, 0x43	; 67
     33e:	6c 85       	ldd	r22, Y+12	; 0x0c
     340:	7d 85       	ldd	r23, Y+13	; 0x0d
     342:	8e 85       	ldd	r24, Y+14	; 0x0e
     344:	9f 85       	ldd	r25, Y+15	; 0x0f
     346:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3>
     34a:	dc 01       	movw	r26, r24
     34c:	cb 01       	movw	r24, r22
     34e:	88 87       	std	Y+8, r24	; 0x08
     350:	99 87       	std	Y+9, r25	; 0x09
     352:	aa 87       	std	Y+10, r26	; 0x0a
     354:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	40 e8       	ldi	r20, 0x80	; 128
     35c:	5f e3       	ldi	r21, 0x3F	; 63
     35e:	68 85       	ldd	r22, Y+8	; 0x08
     360:	79 85       	ldd	r23, Y+9	; 0x09
     362:	8a 85       	ldd	r24, Y+10	; 0x0a
     364:	9b 85       	ldd	r25, Y+11	; 0x0b
     366:	0e 94 41 0c 	call	0x1882	; 0x1882 <__ltsf2>
     36a:	88 23       	and	r24, r24
     36c:	2c f4       	brge	.+10     	; 0x378 <_LCD_Write+0x128>
		__ticks = 1;
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	9f 83       	std	Y+7, r25	; 0x07
     374:	8e 83       	std	Y+6, r24	; 0x06
     376:	3f c0       	rjmp	.+126    	; 0x3f6 <_LCD_Write+0x1a6>
	else if (__tmp > 65535)
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	3f ef       	ldi	r19, 0xFF	; 255
     37c:	4f e7       	ldi	r20, 0x7F	; 127
     37e:	57 e4       	ldi	r21, 0x47	; 71
     380:	68 85       	ldd	r22, Y+8	; 0x08
     382:	79 85       	ldd	r23, Y+9	; 0x09
     384:	8a 85       	ldd	r24, Y+10	; 0x0a
     386:	9b 85       	ldd	r25, Y+11	; 0x0b
     388:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gtsf2>
     38c:	18 16       	cp	r1, r24
     38e:	4c f5       	brge	.+82     	; 0x3e2 <_LCD_Write+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	40 e2       	ldi	r20, 0x20	; 32
     396:	51 e4       	ldi	r21, 0x41	; 65
     398:	6c 85       	ldd	r22, Y+12	; 0x0c
     39a:	7d 85       	ldd	r23, Y+13	; 0x0d
     39c:	8e 85       	ldd	r24, Y+14	; 0x0e
     39e:	9f 85       	ldd	r25, Y+15	; 0x0f
     3a0:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3>
     3a4:	dc 01       	movw	r26, r24
     3a6:	cb 01       	movw	r24, r22
     3a8:	bc 01       	movw	r22, r24
     3aa:	cd 01       	movw	r24, r26
     3ac:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fixunssfsi>
     3b0:	dc 01       	movw	r26, r24
     3b2:	cb 01       	movw	r24, r22
     3b4:	9f 83       	std	Y+7, r25	; 0x07
     3b6:	8e 83       	std	Y+6, r24	; 0x06
     3b8:	0f c0       	rjmp	.+30     	; 0x3d8 <_LCD_Write+0x188>
     3ba:	89 e1       	ldi	r24, 0x19	; 25
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	9d 83       	std	Y+5, r25	; 0x05
     3c0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3c2:	8c 81       	ldd	r24, Y+4	; 0x04
     3c4:	9d 81       	ldd	r25, Y+5	; 0x05
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <_LCD_Write+0x176>
     3ca:	9d 83       	std	Y+5, r25	; 0x05
     3cc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3ce:	8e 81       	ldd	r24, Y+6	; 0x06
     3d0:	9f 81       	ldd	r25, Y+7	; 0x07
     3d2:	01 97       	sbiw	r24, 0x01	; 1
     3d4:	9f 83       	std	Y+7, r25	; 0x07
     3d6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3d8:	8e 81       	ldd	r24, Y+6	; 0x06
     3da:	9f 81       	ldd	r25, Y+7	; 0x07
     3dc:	00 97       	sbiw	r24, 0x00	; 0
     3de:	69 f7       	brne	.-38     	; 0x3ba <_LCD_Write+0x16a>
     3e0:	24 c0       	rjmp	.+72     	; 0x42a <_LCD_Write+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3e2:	68 85       	ldd	r22, Y+8	; 0x08
     3e4:	79 85       	ldd	r23, Y+9	; 0x09
     3e6:	8a 85       	ldd	r24, Y+10	; 0x0a
     3e8:	9b 85       	ldd	r25, Y+11	; 0x0b
     3ea:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fixunssfsi>
     3ee:	dc 01       	movw	r26, r24
     3f0:	cb 01       	movw	r24, r22
     3f2:	9f 83       	std	Y+7, r25	; 0x07
     3f4:	8e 83       	std	Y+6, r24	; 0x06
     3f6:	8e 81       	ldd	r24, Y+6	; 0x06
     3f8:	9f 81       	ldd	r25, Y+7	; 0x07
     3fa:	9b 83       	std	Y+3, r25	; 0x03
     3fc:	8a 83       	std	Y+2, r24	; 0x02
     3fe:	8a 81       	ldd	r24, Y+2	; 0x02
     400:	9b 81       	ldd	r25, Y+3	; 0x03
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	f1 f7       	brne	.-4      	; 0x402 <_LCD_Write+0x1b2>
     406:	9b 83       	std	Y+3, r25	; 0x03
     408:	8a 83       	std	Y+2, r24	; 0x02
     40a:	0f c0       	rjmp	.+30     	; 0x42a <_LCD_Write+0x1da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     40c:	69 89       	ldd	r22, Y+17	; 0x11
     40e:	7a 89       	ldd	r23, Y+18	; 0x12
     410:	8b 89       	ldd	r24, Y+19	; 0x13
     412:	9c 89       	ldd	r25, Y+20	; 0x14
     414:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fixunssfsi>
     418:	dc 01       	movw	r26, r24
     41a:	cb 01       	movw	r24, r22
     41c:	88 8b       	std	Y+16, r24	; 0x10
     41e:	88 89       	ldd	r24, Y+16	; 0x10
     420:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	8a 95       	dec	r24
     426:	f1 f7       	brne	.-4      	; 0x424 <_LCD_Write+0x1d4>
     428:	89 83       	std	Y+1, r24	; 0x01
_delay_us(50);
}
     42a:	69 96       	adiw	r28, 0x19	; 25
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	de bf       	out	0x3e, r29	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	cd bf       	out	0x3d, r28	; 61
     436:	cf 91       	pop	r28
     438:	df 91       	pop	r29
     43a:	08 95       	ret

0000043c <LCD_WriteCommand>:
//
// Funkcja zapisu rozkazu do wywietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
     43c:	df 93       	push	r29
     43e:	cf 93       	push	r28
     440:	0f 92       	push	r0
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
     446:	89 83       	std	Y+1, r24	; 0x01
LCD_RS_PORT &= ~LCD_RS;
     448:	a2 e3       	ldi	r26, 0x32	; 50
     44a:	b0 e0       	ldi	r27, 0x00	; 0
     44c:	e2 e3       	ldi	r30, 0x32	; 50
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	80 81       	ld	r24, Z
     452:	8e 7f       	andi	r24, 0xFE	; 254
     454:	8c 93       	st	X, r24
_LCD_Write(commandToWrite);
     456:	89 81       	ldd	r24, Y+1	; 0x01
     458:	0e 94 28 01 	call	0x250	; 0x250 <_LCD_Write>
}
     45c:	0f 90       	pop	r0
     45e:	cf 91       	pop	r28
     460:	df 91       	pop	r29
     462:	08 95       	ret

00000464 <LCD_WriteData>:
//
// Funkcja zapisu danych do pamiêci wywietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
     464:	df 93       	push	r29
     466:	cf 93       	push	r28
     468:	0f 92       	push	r0
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
     46e:	89 83       	std	Y+1, r24	; 0x01
LCD_RS_PORT |= LCD_RS;
     470:	a2 e3       	ldi	r26, 0x32	; 50
     472:	b0 e0       	ldi	r27, 0x00	; 0
     474:	e2 e3       	ldi	r30, 0x32	; 50
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	80 81       	ld	r24, Z
     47a:	81 60       	ori	r24, 0x01	; 1
     47c:	8c 93       	st	X, r24
_LCD_Write(dataToWrite);
     47e:	89 81       	ldd	r24, Y+1	; 0x01
     480:	0e 94 28 01 	call	0x250	; 0x250 <_LCD_Write>
}
     484:	0f 90       	pop	r0
     486:	cf 91       	pop	r28
     488:	df 91       	pop	r29
     48a:	08 95       	ret

0000048c <LCD_WriteText>:
//
// Funkcja wywietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
     48c:	df 93       	push	r29
     48e:	cf 93       	push	r28
     490:	00 d0       	rcall	.+0      	; 0x492 <LCD_WriteText+0x6>
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
     496:	9a 83       	std	Y+2, r25	; 0x02
     498:	89 83       	std	Y+1, r24	; 0x01
     49a:	0b c0       	rjmp	.+22     	; 0x4b2 <LCD_WriteText+0x26>
while(*text)
  LCD_WriteData(*text++);
     49c:	e9 81       	ldd	r30, Y+1	; 0x01
     49e:	fa 81       	ldd	r31, Y+2	; 0x02
     4a0:	20 81       	ld	r18, Z
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	9a 81       	ldd	r25, Y+2	; 0x02
     4a6:	01 96       	adiw	r24, 0x01	; 1
     4a8:	9a 83       	std	Y+2, r25	; 0x02
     4aa:	89 83       	std	Y+1, r24	; 0x01
     4ac:	82 2f       	mov	r24, r18
     4ae:	0e 94 32 02 	call	0x464	; 0x464 <LCD_WriteData>
// Funkcja wywietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
while(*text)
     4b2:	e9 81       	ldd	r30, Y+1	; 0x01
     4b4:	fa 81       	ldd	r31, Y+2	; 0x02
     4b6:	80 81       	ld	r24, Z
     4b8:	88 23       	and	r24, r24
     4ba:	81 f7       	brne	.-32     	; 0x49c <LCD_WriteText+0x10>
  LCD_WriteData(*text++);
}
     4bc:	0f 90       	pop	r0
     4be:	0f 90       	pop	r0
     4c0:	cf 91       	pop	r28
     4c2:	df 91       	pop	r29
     4c4:	08 95       	ret

000004c6 <LCD_GoTo>:
//
// Funkcja ustawienia wspó³rzêdnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
     4c6:	df 93       	push	r29
     4c8:	cf 93       	push	r28
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <LCD_GoTo+0x6>
     4cc:	cd b7       	in	r28, 0x3d	; 61
     4ce:	de b7       	in	r29, 0x3e	; 62
     4d0:	89 83       	std	Y+1, r24	; 0x01
     4d2:	6a 83       	std	Y+2, r22	; 0x02
LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
     4d4:	8a 81       	ldd	r24, Y+2	; 0x02
     4d6:	88 2f       	mov	r24, r24
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	00 24       	eor	r0, r0
     4dc:	96 95       	lsr	r25
     4de:	87 95       	ror	r24
     4e0:	07 94       	ror	r0
     4e2:	96 95       	lsr	r25
     4e4:	87 95       	ror	r24
     4e6:	07 94       	ror	r0
     4e8:	98 2f       	mov	r25, r24
     4ea:	80 2d       	mov	r24, r0
     4ec:	98 2f       	mov	r25, r24
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	89 0f       	add	r24, r25
     4f2:	80 68       	ori	r24, 0x80	; 128
     4f4:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_WriteCommand>
}
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	cf 91       	pop	r28
     4fe:	df 91       	pop	r29
     500:	08 95       	ret

00000502 <LCD_Clear>:
//
// Funkcja czyszczenia ekranu wywietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Clear(void)
{
     502:	df 93       	push	r29
     504:	cf 93       	push	r28
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	2e 97       	sbiw	r28, 0x0e	; 14
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	f8 94       	cli
     510:	de bf       	out	0x3e, r29	; 62
     512:	0f be       	out	0x3f, r0	; 63
     514:	cd bf       	out	0x3d, r28	; 61
LCD_WriteCommand(HD44780_CLEAR);
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_WriteCommand>
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	a0 e0       	ldi	r26, 0x00	; 0
     522:	b0 e4       	ldi	r27, 0x40	; 64
     524:	8b 87       	std	Y+11, r24	; 0x0b
     526:	9c 87       	std	Y+12, r25	; 0x0c
     528:	ad 87       	std	Y+13, r26	; 0x0d
     52a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	4a e7       	ldi	r20, 0x7A	; 122
     532:	53 e4       	ldi	r21, 0x43	; 67
     534:	6b 85       	ldd	r22, Y+11	; 0x0b
     536:	7c 85       	ldd	r23, Y+12	; 0x0c
     538:	8d 85       	ldd	r24, Y+13	; 0x0d
     53a:	9e 85       	ldd	r25, Y+14	; 0x0e
     53c:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3>
     540:	dc 01       	movw	r26, r24
     542:	cb 01       	movw	r24, r22
     544:	8f 83       	std	Y+7, r24	; 0x07
     546:	98 87       	std	Y+8, r25	; 0x08
     548:	a9 87       	std	Y+9, r26	; 0x09
     54a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	40 e8       	ldi	r20, 0x80	; 128
     552:	5f e3       	ldi	r21, 0x3F	; 63
     554:	6f 81       	ldd	r22, Y+7	; 0x07
     556:	78 85       	ldd	r23, Y+8	; 0x08
     558:	89 85       	ldd	r24, Y+9	; 0x09
     55a:	9a 85       	ldd	r25, Y+10	; 0x0a
     55c:	0e 94 41 0c 	call	0x1882	; 0x1882 <__ltsf2>
     560:	88 23       	and	r24, r24
     562:	2c f4       	brge	.+10     	; 0x56e <LCD_Clear+0x6c>
		__ticks = 1;
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	9e 83       	std	Y+6, r25	; 0x06
     56a:	8d 83       	std	Y+5, r24	; 0x05
     56c:	3f c0       	rjmp	.+126    	; 0x5ec <LCD_Clear+0xea>
	else if (__tmp > 65535)
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	3f ef       	ldi	r19, 0xFF	; 255
     572:	4f e7       	ldi	r20, 0x7F	; 127
     574:	57 e4       	ldi	r21, 0x47	; 71
     576:	6f 81       	ldd	r22, Y+7	; 0x07
     578:	78 85       	ldd	r23, Y+8	; 0x08
     57a:	89 85       	ldd	r24, Y+9	; 0x09
     57c:	9a 85       	ldd	r25, Y+10	; 0x0a
     57e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gtsf2>
     582:	18 16       	cp	r1, r24
     584:	4c f5       	brge	.+82     	; 0x5d8 <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	40 e2       	ldi	r20, 0x20	; 32
     58c:	51 e4       	ldi	r21, 0x41	; 65
     58e:	6b 85       	ldd	r22, Y+11	; 0x0b
     590:	7c 85       	ldd	r23, Y+12	; 0x0c
     592:	8d 85       	ldd	r24, Y+13	; 0x0d
     594:	9e 85       	ldd	r25, Y+14	; 0x0e
     596:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3>
     59a:	dc 01       	movw	r26, r24
     59c:	cb 01       	movw	r24, r22
     59e:	bc 01       	movw	r22, r24
     5a0:	cd 01       	movw	r24, r26
     5a2:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fixunssfsi>
     5a6:	dc 01       	movw	r26, r24
     5a8:	cb 01       	movw	r24, r22
     5aa:	9e 83       	std	Y+6, r25	; 0x06
     5ac:	8d 83       	std	Y+5, r24	; 0x05
     5ae:	0f c0       	rjmp	.+30     	; 0x5ce <LCD_Clear+0xcc>
     5b0:	89 e1       	ldi	r24, 0x19	; 25
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	9c 83       	std	Y+4, r25	; 0x04
     5b6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5b8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ba:	9c 81       	ldd	r25, Y+4	; 0x04
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	f1 f7       	brne	.-4      	; 0x5bc <LCD_Clear+0xba>
     5c0:	9c 83       	std	Y+4, r25	; 0x04
     5c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5c4:	8d 81       	ldd	r24, Y+5	; 0x05
     5c6:	9e 81       	ldd	r25, Y+6	; 0x06
     5c8:	01 97       	sbiw	r24, 0x01	; 1
     5ca:	9e 83       	std	Y+6, r25	; 0x06
     5cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ce:	8d 81       	ldd	r24, Y+5	; 0x05
     5d0:	9e 81       	ldd	r25, Y+6	; 0x06
     5d2:	00 97       	sbiw	r24, 0x00	; 0
     5d4:	69 f7       	brne	.-38     	; 0x5b0 <LCD_Clear+0xae>
     5d6:	14 c0       	rjmp	.+40     	; 0x600 <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5d8:	6f 81       	ldd	r22, Y+7	; 0x07
     5da:	78 85       	ldd	r23, Y+8	; 0x08
     5dc:	89 85       	ldd	r24, Y+9	; 0x09
     5de:	9a 85       	ldd	r25, Y+10	; 0x0a
     5e0:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fixunssfsi>
     5e4:	dc 01       	movw	r26, r24
     5e6:	cb 01       	movw	r24, r22
     5e8:	9e 83       	std	Y+6, r25	; 0x06
     5ea:	8d 83       	std	Y+5, r24	; 0x05
     5ec:	8d 81       	ldd	r24, Y+5	; 0x05
     5ee:	9e 81       	ldd	r25, Y+6	; 0x06
     5f0:	9a 83       	std	Y+2, r25	; 0x02
     5f2:	89 83       	std	Y+1, r24	; 0x01
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	9a 81       	ldd	r25, Y+2	; 0x02
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <LCD_Clear+0xf6>
     5fc:	9a 83       	std	Y+2, r25	; 0x02
     5fe:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
}
     600:	2e 96       	adiw	r28, 0x0e	; 14
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	f8 94       	cli
     606:	de bf       	out	0x3e, r29	; 62
     608:	0f be       	out	0x3f, r0	; 63
     60a:	cd bf       	out	0x3d, r28	; 61
     60c:	cf 91       	pop	r28
     60e:	df 91       	pop	r29
     610:	08 95       	ret

00000612 <LCD_Home>:
//
// Funkcja przywrócenia pocz¹tkowych wspó³rzêdnych wywietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Home(void)
{
     612:	df 93       	push	r29
     614:	cf 93       	push	r28
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	2e 97       	sbiw	r28, 0x0e	; 14
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	f8 94       	cli
     620:	de bf       	out	0x3e, r29	; 62
     622:	0f be       	out	0x3f, r0	; 63
     624:	cd bf       	out	0x3d, r28	; 61
LCD_WriteCommand(HD44780_HOME);
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_WriteCommand>
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	a0 e0       	ldi	r26, 0x00	; 0
     632:	b0 e4       	ldi	r27, 0x40	; 64
     634:	8b 87       	std	Y+11, r24	; 0x0b
     636:	9c 87       	std	Y+12, r25	; 0x0c
     638:	ad 87       	std	Y+13, r26	; 0x0d
     63a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	4a e7       	ldi	r20, 0x7A	; 122
     642:	53 e4       	ldi	r21, 0x43	; 67
     644:	6b 85       	ldd	r22, Y+11	; 0x0b
     646:	7c 85       	ldd	r23, Y+12	; 0x0c
     648:	8d 85       	ldd	r24, Y+13	; 0x0d
     64a:	9e 85       	ldd	r25, Y+14	; 0x0e
     64c:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3>
     650:	dc 01       	movw	r26, r24
     652:	cb 01       	movw	r24, r22
     654:	8f 83       	std	Y+7, r24	; 0x07
     656:	98 87       	std	Y+8, r25	; 0x08
     658:	a9 87       	std	Y+9, r26	; 0x09
     65a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	40 e8       	ldi	r20, 0x80	; 128
     662:	5f e3       	ldi	r21, 0x3F	; 63
     664:	6f 81       	ldd	r22, Y+7	; 0x07
     666:	78 85       	ldd	r23, Y+8	; 0x08
     668:	89 85       	ldd	r24, Y+9	; 0x09
     66a:	9a 85       	ldd	r25, Y+10	; 0x0a
     66c:	0e 94 41 0c 	call	0x1882	; 0x1882 <__ltsf2>
     670:	88 23       	and	r24, r24
     672:	2c f4       	brge	.+10     	; 0x67e <LCD_Home+0x6c>
		__ticks = 1;
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	9e 83       	std	Y+6, r25	; 0x06
     67a:	8d 83       	std	Y+5, r24	; 0x05
     67c:	3f c0       	rjmp	.+126    	; 0x6fc <LCD_Home+0xea>
	else if (__tmp > 65535)
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	3f ef       	ldi	r19, 0xFF	; 255
     682:	4f e7       	ldi	r20, 0x7F	; 127
     684:	57 e4       	ldi	r21, 0x47	; 71
     686:	6f 81       	ldd	r22, Y+7	; 0x07
     688:	78 85       	ldd	r23, Y+8	; 0x08
     68a:	89 85       	ldd	r24, Y+9	; 0x09
     68c:	9a 85       	ldd	r25, Y+10	; 0x0a
     68e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gtsf2>
     692:	18 16       	cp	r1, r24
     694:	4c f5       	brge	.+82     	; 0x6e8 <LCD_Home+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	40 e2       	ldi	r20, 0x20	; 32
     69c:	51 e4       	ldi	r21, 0x41	; 65
     69e:	6b 85       	ldd	r22, Y+11	; 0x0b
     6a0:	7c 85       	ldd	r23, Y+12	; 0x0c
     6a2:	8d 85       	ldd	r24, Y+13	; 0x0d
     6a4:	9e 85       	ldd	r25, Y+14	; 0x0e
     6a6:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3>
     6aa:	dc 01       	movw	r26, r24
     6ac:	cb 01       	movw	r24, r22
     6ae:	bc 01       	movw	r22, r24
     6b0:	cd 01       	movw	r24, r26
     6b2:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fixunssfsi>
     6b6:	dc 01       	movw	r26, r24
     6b8:	cb 01       	movw	r24, r22
     6ba:	9e 83       	std	Y+6, r25	; 0x06
     6bc:	8d 83       	std	Y+5, r24	; 0x05
     6be:	0f c0       	rjmp	.+30     	; 0x6de <LCD_Home+0xcc>
     6c0:	89 e1       	ldi	r24, 0x19	; 25
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	9c 83       	std	Y+4, r25	; 0x04
     6c6:	8b 83       	std	Y+3, r24	; 0x03
     6c8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ca:	9c 81       	ldd	r25, Y+4	; 0x04
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <LCD_Home+0xba>
     6d0:	9c 83       	std	Y+4, r25	; 0x04
     6d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6d4:	8d 81       	ldd	r24, Y+5	; 0x05
     6d6:	9e 81       	ldd	r25, Y+6	; 0x06
     6d8:	01 97       	sbiw	r24, 0x01	; 1
     6da:	9e 83       	std	Y+6, r25	; 0x06
     6dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6de:	8d 81       	ldd	r24, Y+5	; 0x05
     6e0:	9e 81       	ldd	r25, Y+6	; 0x06
     6e2:	00 97       	sbiw	r24, 0x00	; 0
     6e4:	69 f7       	brne	.-38     	; 0x6c0 <LCD_Home+0xae>
     6e6:	14 c0       	rjmp	.+40     	; 0x710 <LCD_Home+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6e8:	6f 81       	ldd	r22, Y+7	; 0x07
     6ea:	78 85       	ldd	r23, Y+8	; 0x08
     6ec:	89 85       	ldd	r24, Y+9	; 0x09
     6ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f0:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fixunssfsi>
     6f4:	dc 01       	movw	r26, r24
     6f6:	cb 01       	movw	r24, r22
     6f8:	9e 83       	std	Y+6, r25	; 0x06
     6fa:	8d 83       	std	Y+5, r24	; 0x05
     6fc:	8d 81       	ldd	r24, Y+5	; 0x05
     6fe:	9e 81       	ldd	r25, Y+6	; 0x06
     700:	9a 83       	std	Y+2, r25	; 0x02
     702:	89 83       	std	Y+1, r24	; 0x01
     704:	89 81       	ldd	r24, Y+1	; 0x01
     706:	9a 81       	ldd	r25, Y+2	; 0x02
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	f1 f7       	brne	.-4      	; 0x708 <LCD_Home+0xf6>
     70c:	9a 83       	std	Y+2, r25	; 0x02
     70e:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
}
     710:	2e 96       	adiw	r28, 0x0e	; 14
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	de bf       	out	0x3e, r29	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	cf 91       	pop	r28
     71e:	df 91       	pop	r29
     720:	08 95       	ret

00000722 <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
     722:	df 93       	push	r29
     724:	cf 93       	push	r28
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	e9 97       	sbiw	r28, 0x39	; 57
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
unsigned char i;
LCD_DB4_DIR |= LCD_DB4; // Konfiguracja kierunku pracy wyprowadzeñ
     736:	a1 e3       	ldi	r26, 0x31	; 49
     738:	b0 e0       	ldi	r27, 0x00	; 0
     73a:	e1 e3       	ldi	r30, 0x31	; 49
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	80 81       	ld	r24, Z
     740:	84 60       	ori	r24, 0x04	; 4
     742:	8c 93       	st	X, r24
LCD_DB5_DIR |= LCD_DB5; //
     744:	a1 e3       	ldi	r26, 0x31	; 49
     746:	b0 e0       	ldi	r27, 0x00	; 0
     748:	e1 e3       	ldi	r30, 0x31	; 49
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	80 81       	ld	r24, Z
     74e:	88 60       	ori	r24, 0x08	; 8
     750:	8c 93       	st	X, r24
LCD_DB6_DIR |= LCD_DB6; //
     752:	a1 e3       	ldi	r26, 0x31	; 49
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	e1 e3       	ldi	r30, 0x31	; 49
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	80 81       	ld	r24, Z
     75c:	80 61       	ori	r24, 0x10	; 16
     75e:	8c 93       	st	X, r24
LCD_DB7_DIR |= LCD_DB7; //
     760:	a1 e3       	ldi	r26, 0x31	; 49
     762:	b0 e0       	ldi	r27, 0x00	; 0
     764:	e1 e3       	ldi	r30, 0x31	; 49
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	80 81       	ld	r24, Z
     76a:	80 62       	ori	r24, 0x20	; 32
     76c:	8c 93       	st	X, r24
LCD_E_DIR 	|= LCD_E;   //
     76e:	a1 e3       	ldi	r26, 0x31	; 49
     770:	b0 e0       	ldi	r27, 0x00	; 0
     772:	e1 e3       	ldi	r30, 0x31	; 49
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	80 81       	ld	r24, Z
     778:	82 60       	ori	r24, 0x02	; 2
     77a:	8c 93       	st	X, r24
LCD_RS_DIR 	|= LCD_RS;  //
     77c:	a1 e3       	ldi	r26, 0x31	; 49
     77e:	b0 e0       	ldi	r27, 0x00	; 0
     780:	e1 e3       	ldi	r30, 0x31	; 49
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	80 81       	ld	r24, Z
     786:	81 60       	ori	r24, 0x01	; 1
     788:	8c 93       	st	X, r24
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	a0 e7       	ldi	r26, 0x70	; 112
     790:	b1 e4       	ldi	r27, 0x41	; 65
     792:	8d ab       	std	Y+53, r24	; 0x35
     794:	9e ab       	std	Y+54, r25	; 0x36
     796:	af ab       	std	Y+55, r26	; 0x37
     798:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	4a e7       	ldi	r20, 0x7A	; 122
     7a0:	53 e4       	ldi	r21, 0x43	; 67
     7a2:	6d a9       	ldd	r22, Y+53	; 0x35
     7a4:	7e a9       	ldd	r23, Y+54	; 0x36
     7a6:	8f a9       	ldd	r24, Y+55	; 0x37
     7a8:	98 ad       	ldd	r25, Y+56	; 0x38
     7aa:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3>
     7ae:	dc 01       	movw	r26, r24
     7b0:	cb 01       	movw	r24, r22
     7b2:	89 ab       	std	Y+49, r24	; 0x31
     7b4:	9a ab       	std	Y+50, r25	; 0x32
     7b6:	ab ab       	std	Y+51, r26	; 0x33
     7b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	40 e8       	ldi	r20, 0x80	; 128
     7c0:	5f e3       	ldi	r21, 0x3F	; 63
     7c2:	69 a9       	ldd	r22, Y+49	; 0x31
     7c4:	7a a9       	ldd	r23, Y+50	; 0x32
     7c6:	8b a9       	ldd	r24, Y+51	; 0x33
     7c8:	9c a9       	ldd	r25, Y+52	; 0x34
     7ca:	0e 94 41 0c 	call	0x1882	; 0x1882 <__ltsf2>
     7ce:	88 23       	and	r24, r24
     7d0:	2c f4       	brge	.+10     	; 0x7dc <LCD_Initalize+0xba>
		__ticks = 1;
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	98 ab       	std	Y+48, r25	; 0x30
     7d8:	8f a7       	std	Y+47, r24	; 0x2f
     7da:	3f c0       	rjmp	.+126    	; 0x85a <LCD_Initalize+0x138>
	else if (__tmp > 65535)
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f e7       	ldi	r20, 0x7F	; 127
     7e2:	57 e4       	ldi	r21, 0x47	; 71
     7e4:	69 a9       	ldd	r22, Y+49	; 0x31
     7e6:	7a a9       	ldd	r23, Y+50	; 0x32
     7e8:	8b a9       	ldd	r24, Y+51	; 0x33
     7ea:	9c a9       	ldd	r25, Y+52	; 0x34
     7ec:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gtsf2>
     7f0:	18 16       	cp	r1, r24
     7f2:	4c f5       	brge	.+82     	; 0x846 <LCD_Initalize+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e2       	ldi	r20, 0x20	; 32
     7fa:	51 e4       	ldi	r21, 0x41	; 65
     7fc:	6d a9       	ldd	r22, Y+53	; 0x35
     7fe:	7e a9       	ldd	r23, Y+54	; 0x36
     800:	8f a9       	ldd	r24, Y+55	; 0x37
     802:	98 ad       	ldd	r25, Y+56	; 0x38
     804:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3>
     808:	dc 01       	movw	r26, r24
     80a:	cb 01       	movw	r24, r22
     80c:	bc 01       	movw	r22, r24
     80e:	cd 01       	movw	r24, r26
     810:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fixunssfsi>
     814:	dc 01       	movw	r26, r24
     816:	cb 01       	movw	r24, r22
     818:	98 ab       	std	Y+48, r25	; 0x30
     81a:	8f a7       	std	Y+47, r24	; 0x2f
     81c:	0f c0       	rjmp	.+30     	; 0x83c <LCD_Initalize+0x11a>
     81e:	89 e1       	ldi	r24, 0x19	; 25
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	9e a7       	std	Y+46, r25	; 0x2e
     824:	8d a7       	std	Y+45, r24	; 0x2d
     826:	8d a5       	ldd	r24, Y+45	; 0x2d
     828:	9e a5       	ldd	r25, Y+46	; 0x2e
     82a:	01 97       	sbiw	r24, 0x01	; 1
     82c:	f1 f7       	brne	.-4      	; 0x82a <LCD_Initalize+0x108>
     82e:	9e a7       	std	Y+46, r25	; 0x2e
     830:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     832:	8f a5       	ldd	r24, Y+47	; 0x2f
     834:	98 a9       	ldd	r25, Y+48	; 0x30
     836:	01 97       	sbiw	r24, 0x01	; 1
     838:	98 ab       	std	Y+48, r25	; 0x30
     83a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     83c:	8f a5       	ldd	r24, Y+47	; 0x2f
     83e:	98 a9       	ldd	r25, Y+48	; 0x30
     840:	00 97       	sbiw	r24, 0x00	; 0
     842:	69 f7       	brne	.-38     	; 0x81e <LCD_Initalize+0xfc>
     844:	14 c0       	rjmp	.+40     	; 0x86e <LCD_Initalize+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     846:	69 a9       	ldd	r22, Y+49	; 0x31
     848:	7a a9       	ldd	r23, Y+50	; 0x32
     84a:	8b a9       	ldd	r24, Y+51	; 0x33
     84c:	9c a9       	ldd	r25, Y+52	; 0x34
     84e:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fixunssfsi>
     852:	dc 01       	movw	r26, r24
     854:	cb 01       	movw	r24, r22
     856:	98 ab       	std	Y+48, r25	; 0x30
     858:	8f a7       	std	Y+47, r24	; 0x2f
     85a:	8f a5       	ldd	r24, Y+47	; 0x2f
     85c:	98 a9       	ldd	r25, Y+48	; 0x30
     85e:	9c a7       	std	Y+44, r25	; 0x2c
     860:	8b a7       	std	Y+43, r24	; 0x2b
     862:	8b a5       	ldd	r24, Y+43	; 0x2b
     864:	9c a5       	ldd	r25, Y+44	; 0x2c
     866:	01 97       	sbiw	r24, 0x01	; 1
     868:	f1 f7       	brne	.-4      	; 0x866 <LCD_Initalize+0x144>
     86a:	9c a7       	std	Y+44, r25	; 0x2c
     86c:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
     86e:	a2 e3       	ldi	r26, 0x32	; 50
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	e2 e3       	ldi	r30, 0x32	; 50
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	80 81       	ld	r24, Z
     878:	8e 7f       	andi	r24, 0xFE	; 254
     87a:	8c 93       	st	X, r24
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
     87c:	a2 e3       	ldi	r26, 0x32	; 50
     87e:	b0 e0       	ldi	r27, 0x00	; 0
     880:	e2 e3       	ldi	r30, 0x32	; 50
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	80 81       	ld	r24, Z
     886:	8d 7f       	andi	r24, 0xFD	; 253
     888:	8c 93       	st	X, r24

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
     88a:	19 ae       	std	Y+57, r1	; 0x39
     88c:	86 c0       	rjmp	.+268    	; 0x99a <LCD_Initalize+0x278>
  {
  LCD_E_PORT |= LCD_E; //  E = 1
     88e:	a2 e3       	ldi	r26, 0x32	; 50
     890:	b0 e0       	ldi	r27, 0x00	; 0
     892:	e2 e3       	ldi	r30, 0x32	; 50
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	80 81       	ld	r24, Z
     898:	82 60       	ori	r24, 0x02	; 2
     89a:	8c 93       	st	X, r24
  _LCD_OutNibble(0x03); // tryb 8-bitowy
     89c:	83 e0       	ldi	r24, 0x03	; 3
     89e:	0e 94 c6 00 	call	0x18c	; 0x18c <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E; // E = 0
     8a2:	a2 e3       	ldi	r26, 0x32	; 50
     8a4:	b0 e0       	ldi	r27, 0x00	; 0
     8a6:	e2 e3       	ldi	r30, 0x32	; 50
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	80 81       	ld	r24, Z
     8ac:	8d 7f       	andi	r24, 0xFD	; 253
     8ae:	8c 93       	st	X, r24
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 ea       	ldi	r26, 0xA0	; 160
     8b6:	b0 e4       	ldi	r27, 0x40	; 64
     8b8:	8f a3       	std	Y+39, r24	; 0x27
     8ba:	98 a7       	std	Y+40, r25	; 0x28
     8bc:	a9 a7       	std	Y+41, r26	; 0x29
     8be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	4a e7       	ldi	r20, 0x7A	; 122
     8c6:	53 e4       	ldi	r21, 0x43	; 67
     8c8:	6f a1       	ldd	r22, Y+39	; 0x27
     8ca:	78 a5       	ldd	r23, Y+40	; 0x28
     8cc:	89 a5       	ldd	r24, Y+41	; 0x29
     8ce:	9a a5       	ldd	r25, Y+42	; 0x2a
     8d0:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3>
     8d4:	dc 01       	movw	r26, r24
     8d6:	cb 01       	movw	r24, r22
     8d8:	8b a3       	std	Y+35, r24	; 0x23
     8da:	9c a3       	std	Y+36, r25	; 0x24
     8dc:	ad a3       	std	Y+37, r26	; 0x25
     8de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	40 e8       	ldi	r20, 0x80	; 128
     8e6:	5f e3       	ldi	r21, 0x3F	; 63
     8e8:	6b a1       	ldd	r22, Y+35	; 0x23
     8ea:	7c a1       	ldd	r23, Y+36	; 0x24
     8ec:	8d a1       	ldd	r24, Y+37	; 0x25
     8ee:	9e a1       	ldd	r25, Y+38	; 0x26
     8f0:	0e 94 41 0c 	call	0x1882	; 0x1882 <__ltsf2>
     8f4:	88 23       	and	r24, r24
     8f6:	2c f4       	brge	.+10     	; 0x902 <LCD_Initalize+0x1e0>
		__ticks = 1;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	9a a3       	std	Y+34, r25	; 0x22
     8fe:	89 a3       	std	Y+33, r24	; 0x21
     900:	3f c0       	rjmp	.+126    	; 0x980 <LCD_Initalize+0x25e>
	else if (__tmp > 65535)
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	3f ef       	ldi	r19, 0xFF	; 255
     906:	4f e7       	ldi	r20, 0x7F	; 127
     908:	57 e4       	ldi	r21, 0x47	; 71
     90a:	6b a1       	ldd	r22, Y+35	; 0x23
     90c:	7c a1       	ldd	r23, Y+36	; 0x24
     90e:	8d a1       	ldd	r24, Y+37	; 0x25
     910:	9e a1       	ldd	r25, Y+38	; 0x26
     912:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gtsf2>
     916:	18 16       	cp	r1, r24
     918:	4c f5       	brge	.+82     	; 0x96c <LCD_Initalize+0x24a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e2       	ldi	r20, 0x20	; 32
     920:	51 e4       	ldi	r21, 0x41	; 65
     922:	6f a1       	ldd	r22, Y+39	; 0x27
     924:	78 a5       	ldd	r23, Y+40	; 0x28
     926:	89 a5       	ldd	r24, Y+41	; 0x29
     928:	9a a5       	ldd	r25, Y+42	; 0x2a
     92a:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3>
     92e:	dc 01       	movw	r26, r24
     930:	cb 01       	movw	r24, r22
     932:	bc 01       	movw	r22, r24
     934:	cd 01       	movw	r24, r26
     936:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fixunssfsi>
     93a:	dc 01       	movw	r26, r24
     93c:	cb 01       	movw	r24, r22
     93e:	9a a3       	std	Y+34, r25	; 0x22
     940:	89 a3       	std	Y+33, r24	; 0x21
     942:	0f c0       	rjmp	.+30     	; 0x962 <LCD_Initalize+0x240>
     944:	89 e1       	ldi	r24, 0x19	; 25
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	98 a3       	std	Y+32, r25	; 0x20
     94a:	8f 8f       	std	Y+31, r24	; 0x1f
     94c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     94e:	98 a1       	ldd	r25, Y+32	; 0x20
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	f1 f7       	brne	.-4      	; 0x950 <LCD_Initalize+0x22e>
     954:	98 a3       	std	Y+32, r25	; 0x20
     956:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     958:	89 a1       	ldd	r24, Y+33	; 0x21
     95a:	9a a1       	ldd	r25, Y+34	; 0x22
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	9a a3       	std	Y+34, r25	; 0x22
     960:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     962:	89 a1       	ldd	r24, Y+33	; 0x21
     964:	9a a1       	ldd	r25, Y+34	; 0x22
     966:	00 97       	sbiw	r24, 0x00	; 0
     968:	69 f7       	brne	.-38     	; 0x944 <LCD_Initalize+0x222>
     96a:	14 c0       	rjmp	.+40     	; 0x994 <LCD_Initalize+0x272>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     96c:	6b a1       	ldd	r22, Y+35	; 0x23
     96e:	7c a1       	ldd	r23, Y+36	; 0x24
     970:	8d a1       	ldd	r24, Y+37	; 0x25
     972:	9e a1       	ldd	r25, Y+38	; 0x26
     974:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fixunssfsi>
     978:	dc 01       	movw	r26, r24
     97a:	cb 01       	movw	r24, r22
     97c:	9a a3       	std	Y+34, r25	; 0x22
     97e:	89 a3       	std	Y+33, r24	; 0x21
     980:	89 a1       	ldd	r24, Y+33	; 0x21
     982:	9a a1       	ldd	r25, Y+34	; 0x22
     984:	9e 8f       	std	Y+30, r25	; 0x1e
     986:	8d 8f       	std	Y+29, r24	; 0x1d
     988:	8d 8d       	ldd	r24, Y+29	; 0x1d
     98a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	f1 f7       	brne	.-4      	; 0x98c <LCD_Initalize+0x26a>
     990:	9e 8f       	std	Y+30, r25	; 0x1e
     992:	8d 8f       	std	Y+29, r24	; 0x1d
LCD_RS_DIR 	|= LCD_RS;  //
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
     994:	89 ad       	ldd	r24, Y+57	; 0x39
     996:	8f 5f       	subi	r24, 0xFF	; 255
     998:	89 af       	std	Y+57, r24	; 0x39
     99a:	89 ad       	ldd	r24, Y+57	; 0x39
     99c:	83 30       	cpi	r24, 0x03	; 3
     99e:	08 f4       	brcc	.+2      	; 0x9a2 <LCD_Initalize+0x280>
     9a0:	76 cf       	rjmp	.-276    	; 0x88e <LCD_Initalize+0x16c>
  _LCD_OutNibble(0x03); // tryb 8-bitowy
  LCD_E_PORT &= ~LCD_E; // E = 0
  _delay_ms(5); // czekaj 5ms
  }

LCD_E_PORT |= LCD_E; // E = 1
     9a2:	a2 e3       	ldi	r26, 0x32	; 50
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	e2 e3       	ldi	r30, 0x32	; 50
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	82 60       	ori	r24, 0x02	; 2
     9ae:	8c 93       	st	X, r24
_LCD_OutNibble(0x02); // tryb 4-bitowy
     9b0:	82 e0       	ldi	r24, 0x02	; 2
     9b2:	0e 94 c6 00 	call	0x18c	; 0x18c <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E; // E = 0
     9b6:	a2 e3       	ldi	r26, 0x32	; 50
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	e2 e3       	ldi	r30, 0x32	; 50
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	80 81       	ld	r24, Z
     9c0:	8d 7f       	andi	r24, 0xFD	; 253
     9c2:	8c 93       	st	X, r24
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	a0 e8       	ldi	r26, 0x80	; 128
     9ca:	bf e3       	ldi	r27, 0x3F	; 63
     9cc:	89 8f       	std	Y+25, r24	; 0x19
     9ce:	9a 8f       	std	Y+26, r25	; 0x1a
     9d0:	ab 8f       	std	Y+27, r26	; 0x1b
     9d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	4a e7       	ldi	r20, 0x7A	; 122
     9da:	53 e4       	ldi	r21, 0x43	; 67
     9dc:	69 8d       	ldd	r22, Y+25	; 0x19
     9de:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9e4:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3>
     9e8:	dc 01       	movw	r26, r24
     9ea:	cb 01       	movw	r24, r22
     9ec:	8d 8b       	std	Y+21, r24	; 0x15
     9ee:	9e 8b       	std	Y+22, r25	; 0x16
     9f0:	af 8b       	std	Y+23, r26	; 0x17
     9f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	40 e8       	ldi	r20, 0x80	; 128
     9fa:	5f e3       	ldi	r21, 0x3F	; 63
     9fc:	6d 89       	ldd	r22, Y+21	; 0x15
     9fe:	7e 89       	ldd	r23, Y+22	; 0x16
     a00:	8f 89       	ldd	r24, Y+23	; 0x17
     a02:	98 8d       	ldd	r25, Y+24	; 0x18
     a04:	0e 94 41 0c 	call	0x1882	; 0x1882 <__ltsf2>
     a08:	88 23       	and	r24, r24
     a0a:	2c f4       	brge	.+10     	; 0xa16 <LCD_Initalize+0x2f4>
		__ticks = 1;
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	9c 8b       	std	Y+20, r25	; 0x14
     a12:	8b 8b       	std	Y+19, r24	; 0x13
     a14:	3f c0       	rjmp	.+126    	; 0xa94 <LCD_Initalize+0x372>
	else if (__tmp > 65535)
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	3f ef       	ldi	r19, 0xFF	; 255
     a1a:	4f e7       	ldi	r20, 0x7F	; 127
     a1c:	57 e4       	ldi	r21, 0x47	; 71
     a1e:	6d 89       	ldd	r22, Y+21	; 0x15
     a20:	7e 89       	ldd	r23, Y+22	; 0x16
     a22:	8f 89       	ldd	r24, Y+23	; 0x17
     a24:	98 8d       	ldd	r25, Y+24	; 0x18
     a26:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gtsf2>
     a2a:	18 16       	cp	r1, r24
     a2c:	4c f5       	brge	.+82     	; 0xa80 <LCD_Initalize+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	40 e2       	ldi	r20, 0x20	; 32
     a34:	51 e4       	ldi	r21, 0x41	; 65
     a36:	69 8d       	ldd	r22, Y+25	; 0x19
     a38:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a3e:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	bc 01       	movw	r22, r24
     a48:	cd 01       	movw	r24, r26
     a4a:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fixunssfsi>
     a4e:	dc 01       	movw	r26, r24
     a50:	cb 01       	movw	r24, r22
     a52:	9c 8b       	std	Y+20, r25	; 0x14
     a54:	8b 8b       	std	Y+19, r24	; 0x13
     a56:	0f c0       	rjmp	.+30     	; 0xa76 <LCD_Initalize+0x354>
     a58:	89 e1       	ldi	r24, 0x19	; 25
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	9a 8b       	std	Y+18, r25	; 0x12
     a5e:	89 8b       	std	Y+17, r24	; 0x11
     a60:	89 89       	ldd	r24, Y+17	; 0x11
     a62:	9a 89       	ldd	r25, Y+18	; 0x12
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	f1 f7       	brne	.-4      	; 0xa64 <LCD_Initalize+0x342>
     a68:	9a 8b       	std	Y+18, r25	; 0x12
     a6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a6c:	8b 89       	ldd	r24, Y+19	; 0x13
     a6e:	9c 89       	ldd	r25, Y+20	; 0x14
     a70:	01 97       	sbiw	r24, 0x01	; 1
     a72:	9c 8b       	std	Y+20, r25	; 0x14
     a74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a76:	8b 89       	ldd	r24, Y+19	; 0x13
     a78:	9c 89       	ldd	r25, Y+20	; 0x14
     a7a:	00 97       	sbiw	r24, 0x00	; 0
     a7c:	69 f7       	brne	.-38     	; 0xa58 <LCD_Initalize+0x336>
     a7e:	14 c0       	rjmp	.+40     	; 0xaa8 <LCD_Initalize+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a80:	6d 89       	ldd	r22, Y+21	; 0x15
     a82:	7e 89       	ldd	r23, Y+22	; 0x16
     a84:	8f 89       	ldd	r24, Y+23	; 0x17
     a86:	98 8d       	ldd	r25, Y+24	; 0x18
     a88:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fixunssfsi>
     a8c:	dc 01       	movw	r26, r24
     a8e:	cb 01       	movw	r24, r22
     a90:	9c 8b       	std	Y+20, r25	; 0x14
     a92:	8b 8b       	std	Y+19, r24	; 0x13
     a94:	8b 89       	ldd	r24, Y+19	; 0x13
     a96:	9c 89       	ldd	r25, Y+20	; 0x14
     a98:	98 8b       	std	Y+16, r25	; 0x10
     a9a:	8f 87       	std	Y+15, r24	; 0x0f
     a9c:	8f 85       	ldd	r24, Y+15	; 0x0f
     a9e:	98 89       	ldd	r25, Y+16	; 0x10
     aa0:	01 97       	sbiw	r24, 0x01	; 1
     aa2:	f1 f7       	brne	.-4      	; 0xaa0 <LCD_Initalize+0x37e>
     aa4:	98 8b       	std	Y+16, r25	; 0x10
     aa6:	8f 87       	std	Y+15, r24	; 0x0f

_delay_ms(1); // czekaj 1ms
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
     aa8:	88 e2       	ldi	r24, 0x28	; 40
     aaa:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
     aae:	88 e0       	ldi	r24, 0x08	; 8
     ab0:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_WriteCommand>
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_WriteCommand>
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	a0 e0       	ldi	r26, 0x00	; 0
     ac0:	b0 e4       	ldi	r27, 0x40	; 64
     ac2:	8b 87       	std	Y+11, r24	; 0x0b
     ac4:	9c 87       	std	Y+12, r25	; 0x0c
     ac6:	ad 87       	std	Y+13, r26	; 0x0d
     ac8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	4a e7       	ldi	r20, 0x7A	; 122
     ad0:	53 e4       	ldi	r21, 0x43	; 67
     ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
     ada:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3>
     ade:	dc 01       	movw	r26, r24
     ae0:	cb 01       	movw	r24, r22
     ae2:	8f 83       	std	Y+7, r24	; 0x07
     ae4:	98 87       	std	Y+8, r25	; 0x08
     ae6:	a9 87       	std	Y+9, r26	; 0x09
     ae8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	40 e8       	ldi	r20, 0x80	; 128
     af0:	5f e3       	ldi	r21, 0x3F	; 63
     af2:	6f 81       	ldd	r22, Y+7	; 0x07
     af4:	78 85       	ldd	r23, Y+8	; 0x08
     af6:	89 85       	ldd	r24, Y+9	; 0x09
     af8:	9a 85       	ldd	r25, Y+10	; 0x0a
     afa:	0e 94 41 0c 	call	0x1882	; 0x1882 <__ltsf2>
     afe:	88 23       	and	r24, r24
     b00:	2c f4       	brge	.+10     	; 0xb0c <LCD_Initalize+0x3ea>
		__ticks = 1;
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	9e 83       	std	Y+6, r25	; 0x06
     b08:	8d 83       	std	Y+5, r24	; 0x05
     b0a:	3f c0       	rjmp	.+126    	; 0xb8a <LCD_Initalize+0x468>
	else if (__tmp > 65535)
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	3f ef       	ldi	r19, 0xFF	; 255
     b10:	4f e7       	ldi	r20, 0x7F	; 127
     b12:	57 e4       	ldi	r21, 0x47	; 71
     b14:	6f 81       	ldd	r22, Y+7	; 0x07
     b16:	78 85       	ldd	r23, Y+8	; 0x08
     b18:	89 85       	ldd	r24, Y+9	; 0x09
     b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b1c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gtsf2>
     b20:	18 16       	cp	r1, r24
     b22:	4c f5       	brge	.+82     	; 0xb76 <LCD_Initalize+0x454>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b24:	20 e0       	ldi	r18, 0x00	; 0
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	40 e2       	ldi	r20, 0x20	; 32
     b2a:	51 e4       	ldi	r21, 0x41	; 65
     b2c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b2e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b30:	8d 85       	ldd	r24, Y+13	; 0x0d
     b32:	9e 85       	ldd	r25, Y+14	; 0x0e
     b34:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3>
     b38:	dc 01       	movw	r26, r24
     b3a:	cb 01       	movw	r24, r22
     b3c:	bc 01       	movw	r22, r24
     b3e:	cd 01       	movw	r24, r26
     b40:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fixunssfsi>
     b44:	dc 01       	movw	r26, r24
     b46:	cb 01       	movw	r24, r22
     b48:	9e 83       	std	Y+6, r25	; 0x06
     b4a:	8d 83       	std	Y+5, r24	; 0x05
     b4c:	0f c0       	rjmp	.+30     	; 0xb6c <LCD_Initalize+0x44a>
     b4e:	89 e1       	ldi	r24, 0x19	; 25
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
     b56:	8b 81       	ldd	r24, Y+3	; 0x03
     b58:	9c 81       	ldd	r25, Y+4	; 0x04
     b5a:	01 97       	sbiw	r24, 0x01	; 1
     b5c:	f1 f7       	brne	.-4      	; 0xb5a <LCD_Initalize+0x438>
     b5e:	9c 83       	std	Y+4, r25	; 0x04
     b60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b62:	8d 81       	ldd	r24, Y+5	; 0x05
     b64:	9e 81       	ldd	r25, Y+6	; 0x06
     b66:	01 97       	sbiw	r24, 0x01	; 1
     b68:	9e 83       	std	Y+6, r25	; 0x06
     b6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b6c:	8d 81       	ldd	r24, Y+5	; 0x05
     b6e:	9e 81       	ldd	r25, Y+6	; 0x06
     b70:	00 97       	sbiw	r24, 0x00	; 0
     b72:	69 f7       	brne	.-38     	; 0xb4e <LCD_Initalize+0x42c>
     b74:	14 c0       	rjmp	.+40     	; 0xb9e <LCD_Initalize+0x47c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b76:	6f 81       	ldd	r22, Y+7	; 0x07
     b78:	78 85       	ldd	r23, Y+8	; 0x08
     b7a:	89 85       	ldd	r24, Y+9	; 0x09
     b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b7e:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fixunssfsi>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
     b86:	9e 83       	std	Y+6, r25	; 0x06
     b88:	8d 83       	std	Y+5, r24	; 0x05
     b8a:	8d 81       	ldd	r24, Y+5	; 0x05
     b8c:	9e 81       	ldd	r25, Y+6	; 0x06
     b8e:	9a 83       	std	Y+2, r25	; 0x02
     b90:	89 83       	std	Y+1, r24	; 0x01
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	9a 81       	ldd	r25, Y+2	; 0x02
     b96:	01 97       	sbiw	r24, 0x01	; 1
     b98:	f1 f7       	brne	.-4      	; 0xb96 <LCD_Initalize+0x474>
     b9a:	9a 83       	std	Y+2, r25	; 0x02
     b9c:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
     b9e:	86 e0       	ldi	r24, 0x06	; 6
     ba0:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
     ba4:	8c e0       	ldi	r24, 0x0C	; 12
     ba6:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_WriteCommand>
}
     baa:	e9 96       	adiw	r28, 0x39	; 57
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	cf 91       	pop	r28
     bb8:	df 91       	pop	r29
     bba:	08 95       	ret

00000bbc <__vector_8>:
char buf_lcd1[16];

//-------------------------------------------------------------//
//Timer1 overflow interrupt
ISR(TIMER1_OVF_vect)
{
     bbc:	1f 92       	push	r1
     bbe:	0f 92       	push	r0
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	0f 92       	push	r0
     bc4:	11 24       	eor	r1, r1
     bc6:	8f 93       	push	r24
     bc8:	9f 93       	push	r25
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
    //zliczaj przeoe³nienia od T1
    ++count_pulse;
     bd2:	80 91 92 01 	lds	r24, 0x0192
     bd6:	90 91 93 01 	lds	r25, 0x0193
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	90 93 93 01 	sts	0x0193, r25
     be0:	80 93 92 01 	sts	0x0192, r24
}
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	9f 91       	pop	r25
     bea:	8f 91       	pop	r24
     bec:	0f 90       	pop	r0
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	0f 90       	pop	r0
     bf2:	1f 90       	pop	r1
     bf4:	18 95       	reti

00000bf6 <__vector_5>:
//-------------------------------------------------------------//

//-------------------------------------------------------------//
//Timer1 capture interrupt
ISR(TIMER1_CAPT_vect)
{
     bf6:	1f 92       	push	r1
     bf8:	0f 92       	push	r0
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	0f 92       	push	r0
     bfe:	11 24       	eor	r1, r1
     c00:	8f 93       	push	r24
     c02:	9f 93       	push	r25
     c04:	af 93       	push	r26
     c06:	bf 93       	push	r27
     c08:	ef 93       	push	r30
     c0a:	ff 93       	push	r31
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
    /*procedura wykonywana przy wykryciu kazdego typu zbocza na ICP1*/

    //jesli stan wysoki na ICP1 zapamietaj TCNT1 w ICR1
    if (bit_is_set(PIND, 6))
     c14:	e0 e3       	ldi	r30, 0x30	; 48
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	88 2f       	mov	r24, r24
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	80 74       	andi	r24, 0x40	; 64
     c20:	90 70       	andi	r25, 0x00	; 0
     c22:	00 97       	sbiw	r24, 0x00	; 0
     c24:	81 f0       	breq	.+32     	; 0xc46 <__vector_5+0x50>
    {
        //zapamietaj TCNT1 (poczatek impulsu)
        starting_edge	=	ICR1;
     c26:	e6 e4       	ldi	r30, 0x46	; 70
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	91 81       	ldd	r25, Z+1	; 0x01
     c2e:	90 93 97 01 	sts	0x0197, r25
     c32:	80 93 96 01 	sts	0x0196, r24
        //od teraz ICP1 reaguje na opadajace zbocze
        TCCR1B = TCCR1B & ~_BV(ICES1);
     c36:	ae e4       	ldi	r26, 0x4E	; 78
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	ee e4       	ldi	r30, 0x4E	; 78
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	8f 7b       	andi	r24, 0xBF	; 191
     c42:	8c 93       	st	X, r24
     c44:	11 c0       	rjmp	.+34     	; 0xc68 <__vector_5+0x72>
    }
    else
    {
        //zapamietaj TCNT1 (koniec impulsu)
        ending_edge		=	ICR1;
     c46:	e6 e4       	ldi	r30, 0x46	; 70
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	91 81       	ldd	r25, Z+1	; 0x01
     c4e:	90 93 79 01 	sts	0x0179, r25
     c52:	80 93 78 01 	sts	0x0178, r24
        //od teraz ICP1 reaguje na rosnace zbocze
        TCCR1B = TCCR1B | _BV(ICES1);
     c56:	ae e4       	ldi	r26, 0x4E	; 78
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	ee e4       	ldi	r30, 0x4E	; 78
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	80 64       	ori	r24, 0x40	; 64
     c62:	8c 93       	st	X, r24
        //oznacz gotowosc dla kolejnego impulsu TRIG
        triggered=0;
     c64:	10 92 94 01 	sts	0x0194, r1
    }
}
     c68:	cf 91       	pop	r28
     c6a:	df 91       	pop	r29
     c6c:	ff 91       	pop	r31
     c6e:	ef 91       	pop	r30
     c70:	bf 91       	pop	r27
     c72:	af 91       	pop	r26
     c74:	9f 91       	pop	r25
     c76:	8f 91       	pop	r24
     c78:	0f 90       	pop	r0
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	0f 90       	pop	r0
     c7e:	1f 90       	pop	r1
     c80:	18 95       	reti

00000c82 <__vector_default>:
//-------------------------------------------------------------//

ISR(BADISR_vect){};
     c82:	1f 92       	push	r1
     c84:	0f 92       	push	r0
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	0f 92       	push	r0
     c8a:	11 24       	eor	r1, r1
     c8c:	df 93       	push	r29
     c8e:	cf 93       	push	r28
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	0f 90       	pop	r0
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	0f 90       	pop	r0
     c9e:	1f 90       	pop	r1
     ca0:	18 95       	reti

00000ca2 <send_trigger>:

//-------------------------------------------------------------//
//wyslij sygnal TRIG do SRF05 na PD5
void send_trigger(void)
{
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	68 97       	sbiw	r28, 0x18	; 24
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	de bf       	out	0x3e, r29	; 62
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	cd bf       	out	0x3d, r28	; 61
    PORTD = PORTD | _BV(PD5);		//
     cb6:	a2 e3       	ldi	r26, 0x32	; 50
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e2 e3       	ldi	r30, 0x32	; 50
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	80 62       	ori	r24, 0x20	; 32
     cc2:	8c 93       	st	X, r24
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	a0 ea       	ldi	r26, 0xA0	; 160
     cca:	b1 e4       	ldi	r27, 0x41	; 65
     ccc:	8d 8b       	std	Y+21, r24	; 0x15
     cce:	9e 8b       	std	Y+22, r25	; 0x16
     cd0:	af 8b       	std	Y+23, r26	; 0x17
     cd2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     cd4:	2b ea       	ldi	r18, 0xAB	; 171
     cd6:	3a ea       	ldi	r19, 0xAA	; 170
     cd8:	4a ea       	ldi	r20, 0xAA	; 170
     cda:	5e e3       	ldi	r21, 0x3E	; 62
     cdc:	6d 89       	ldd	r22, Y+21	; 0x15
     cde:	7e 89       	ldd	r23, Y+22	; 0x16
     ce0:	8f 89       	ldd	r24, Y+23	; 0x17
     ce2:	98 8d       	ldd	r25, Y+24	; 0x18
     ce4:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3>
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	89 8b       	std	Y+17, r24	; 0x11
     cee:	9a 8b       	std	Y+18, r25	; 0x12
     cf0:	ab 8b       	std	Y+19, r26	; 0x13
     cf2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	40 e8       	ldi	r20, 0x80	; 128
     cfa:	5f e3       	ldi	r21, 0x3F	; 63
     cfc:	69 89       	ldd	r22, Y+17	; 0x11
     cfe:	7a 89       	ldd	r23, Y+18	; 0x12
     d00:	8b 89       	ldd	r24, Y+19	; 0x13
     d02:	9c 89       	ldd	r25, Y+20	; 0x14
     d04:	0e 94 41 0c 	call	0x1882	; 0x1882 <__ltsf2>
     d08:	88 23       	and	r24, r24
     d0a:	1c f4       	brge	.+6      	; 0xd12 <send_trigger+0x70>
		__ticks = 1;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	88 8b       	std	Y+16, r24	; 0x10
     d10:	91 c0       	rjmp	.+290    	; 0xe34 <send_trigger+0x192>
	else if (__tmp > 255)
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	4f e7       	ldi	r20, 0x7F	; 127
     d18:	53 e4       	ldi	r21, 0x43	; 67
     d1a:	69 89       	ldd	r22, Y+17	; 0x11
     d1c:	7a 89       	ldd	r23, Y+18	; 0x12
     d1e:	8b 89       	ldd	r24, Y+19	; 0x13
     d20:	9c 89       	ldd	r25, Y+20	; 0x14
     d22:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gtsf2>
     d26:	18 16       	cp	r1, r24
     d28:	0c f0       	brlt	.+2      	; 0xd2c <send_trigger+0x8a>
     d2a:	7b c0       	rjmp	.+246    	; 0xe22 <send_trigger+0x180>
	{
		_delay_ms(__us / 1000.0);
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	4a e7       	ldi	r20, 0x7A	; 122
     d32:	54 e4       	ldi	r21, 0x44	; 68
     d34:	6d 89       	ldd	r22, Y+21	; 0x15
     d36:	7e 89       	ldd	r23, Y+22	; 0x16
     d38:	8f 89       	ldd	r24, Y+23	; 0x17
     d3a:	98 8d       	ldd	r25, Y+24	; 0x18
     d3c:	0e 94 37 0b 	call	0x166e	; 0x166e <__divsf3>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	8c 87       	std	Y+12, r24	; 0x0c
     d46:	9d 87       	std	Y+13, r25	; 0x0d
     d48:	ae 87       	std	Y+14, r26	; 0x0e
     d4a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	4a e7       	ldi	r20, 0x7A	; 122
     d52:	53 e4       	ldi	r21, 0x43	; 67
     d54:	6c 85       	ldd	r22, Y+12	; 0x0c
     d56:	7d 85       	ldd	r23, Y+13	; 0x0d
     d58:	8e 85       	ldd	r24, Y+14	; 0x0e
     d5a:	9f 85       	ldd	r25, Y+15	; 0x0f
     d5c:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	88 87       	std	Y+8, r24	; 0x08
     d66:	99 87       	std	Y+9, r25	; 0x09
     d68:	aa 87       	std	Y+10, r26	; 0x0a
     d6a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e8       	ldi	r20, 0x80	; 128
     d72:	5f e3       	ldi	r21, 0x3F	; 63
     d74:	68 85       	ldd	r22, Y+8	; 0x08
     d76:	79 85       	ldd	r23, Y+9	; 0x09
     d78:	8a 85       	ldd	r24, Y+10	; 0x0a
     d7a:	9b 85       	ldd	r25, Y+11	; 0x0b
     d7c:	0e 94 41 0c 	call	0x1882	; 0x1882 <__ltsf2>
     d80:	88 23       	and	r24, r24
     d82:	2c f4       	brge	.+10     	; 0xd8e <send_trigger+0xec>
		__ticks = 1;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	9f 83       	std	Y+7, r25	; 0x07
     d8a:	8e 83       	std	Y+6, r24	; 0x06
     d8c:	3f c0       	rjmp	.+126    	; 0xe0c <send_trigger+0x16a>
	else if (__tmp > 65535)
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	3f ef       	ldi	r19, 0xFF	; 255
     d92:	4f e7       	ldi	r20, 0x7F	; 127
     d94:	57 e4       	ldi	r21, 0x47	; 71
     d96:	68 85       	ldd	r22, Y+8	; 0x08
     d98:	79 85       	ldd	r23, Y+9	; 0x09
     d9a:	8a 85       	ldd	r24, Y+10	; 0x0a
     d9c:	9b 85       	ldd	r25, Y+11	; 0x0b
     d9e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gtsf2>
     da2:	18 16       	cp	r1, r24
     da4:	4c f5       	brge	.+82     	; 0xdf8 <send_trigger+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	40 e2       	ldi	r20, 0x20	; 32
     dac:	51 e4       	ldi	r21, 0x41	; 65
     dae:	6c 85       	ldd	r22, Y+12	; 0x0c
     db0:	7d 85       	ldd	r23, Y+13	; 0x0d
     db2:	8e 85       	ldd	r24, Y+14	; 0x0e
     db4:	9f 85       	ldd	r25, Y+15	; 0x0f
     db6:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
     dbe:	bc 01       	movw	r22, r24
     dc0:	cd 01       	movw	r24, r26
     dc2:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fixunssfsi>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	9f 83       	std	Y+7, r25	; 0x07
     dcc:	8e 83       	std	Y+6, r24	; 0x06
     dce:	0f c0       	rjmp	.+30     	; 0xdee <send_trigger+0x14c>
     dd0:	89 e1       	ldi	r24, 0x19	; 25
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	9d 83       	std	Y+5, r25	; 0x05
     dd6:	8c 83       	std	Y+4, r24	; 0x04
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	9d 81       	ldd	r25, Y+5	; 0x05
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	f1 f7       	brne	.-4      	; 0xddc <send_trigger+0x13a>
     de0:	9d 83       	std	Y+5, r25	; 0x05
     de2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de4:	8e 81       	ldd	r24, Y+6	; 0x06
     de6:	9f 81       	ldd	r25, Y+7	; 0x07
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	9f 83       	std	Y+7, r25	; 0x07
     dec:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dee:	8e 81       	ldd	r24, Y+6	; 0x06
     df0:	9f 81       	ldd	r25, Y+7	; 0x07
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	69 f7       	brne	.-38     	; 0xdd0 <send_trigger+0x12e>
     df6:	24 c0       	rjmp	.+72     	; 0xe40 <send_trigger+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df8:	68 85       	ldd	r22, Y+8	; 0x08
     dfa:	79 85       	ldd	r23, Y+9	; 0x09
     dfc:	8a 85       	ldd	r24, Y+10	; 0x0a
     dfe:	9b 85       	ldd	r25, Y+11	; 0x0b
     e00:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fixunssfsi>
     e04:	dc 01       	movw	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	9f 83       	std	Y+7, r25	; 0x07
     e0a:	8e 83       	std	Y+6, r24	; 0x06
     e0c:	8e 81       	ldd	r24, Y+6	; 0x06
     e0e:	9f 81       	ldd	r25, Y+7	; 0x07
     e10:	9b 83       	std	Y+3, r25	; 0x03
     e12:	8a 83       	std	Y+2, r24	; 0x02
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	9b 81       	ldd	r25, Y+3	; 0x03
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <send_trigger+0x176>
     e1c:	9b 83       	std	Y+3, r25	; 0x03
     e1e:	8a 83       	std	Y+2, r24	; 0x02
     e20:	0f c0       	rjmp	.+30     	; 0xe40 <send_trigger+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     e22:	69 89       	ldd	r22, Y+17	; 0x11
     e24:	7a 89       	ldd	r23, Y+18	; 0x12
     e26:	8b 89       	ldd	r24, Y+19	; 0x13
     e28:	9c 89       	ldd	r25, Y+20	; 0x14
     e2a:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fixunssfsi>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	88 8b       	std	Y+16, r24	; 0x10
     e34:	88 89       	ldd	r24, Y+16	; 0x10
     e36:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	8a 95       	dec	r24
     e3c:	f1 f7       	brne	.-4      	; 0xe3a <send_trigger+0x198>
     e3e:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(20);          //czas trwania impulsu TRIG 20us
    PORTD = PORTD & ~_BV(PD5);		//
     e40:	a2 e3       	ldi	r26, 0x32	; 50
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e2 e3       	ldi	r30, 0x32	; 50
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	8f 7d       	andi	r24, 0xDF	; 223
     e4c:	8c 93       	st	X, r24
    triggered=1;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	80 93 94 01 	sts	0x0194, r24
}
     e54:	68 96       	adiw	r28, 0x18	; 24
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <init_ports>:
//-------------------------------------------------------------//

//-------------------------------------------------------------//
//Configure ports as inputs and outputs.
void init_ports(void)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0xff;
     e6e:	ea e3       	ldi	r30, 0x3A	; 58
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	8f ef       	ldi	r24, 0xFF	; 255
     e74:	80 83       	st	Z, r24
    DDRC = 0xff;
     e76:	e4 e3       	ldi	r30, 0x34	; 52
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	8f ef       	ldi	r24, 0xFF	; 255
     e7c:	80 83       	st	Z, r24
    DDRB = 0xff;
     e7e:	e7 e3       	ldi	r30, 0x37	; 55
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	8f ef       	ldi	r24, 0xFF	; 255
     e84:	80 83       	st	Z, r24
    DDRD = 0b10111111;
     e86:	e1 e3       	ldi	r30, 0x31	; 49
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	8f eb       	ldi	r24, 0xBF	; 191
     e8c:	80 83       	st	Z, r24
}
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <main>:
//-------------------------------------------------------------//

//-------------------------------------------------------------//
int main(void)
{
     e94:	cf 92       	push	r12
     e96:	df 92       	push	r13
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	2e 97       	sbiw	r28, 0x0e	; 14
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
    //Init
    ending_edge		=	0;
     eb4:	10 92 79 01 	sts	0x0179, r1
     eb8:	10 92 78 01 	sts	0x0178, r1
    starting_edge	=	0;
     ebc:	10 92 97 01 	sts	0x0197, r1
     ec0:	10 92 96 01 	sts	0x0196, r1
    triggered		=	0;
     ec4:	10 92 94 01 	sts	0x0194, r1
    count_pulse		=	0;
     ec8:	10 92 93 01 	sts	0x0193, r1
     ecc:	10 92 92 01 	sts	0x0192, r1


    init_ports();
     ed0:	0e 94 33 07 	call	0xe66	; 0xe66 <init_ports>
    LCD_Initalize();
     ed4:	0e 94 91 03 	call	0x722	; 0x722 <LCD_Initalize>

    //zezwolenie na Input Capture Interrupt oraz ustawienie filtrowania na ICP1
    //przerwanie na ICP1 wyzwalane narastajacym zboczem
    //prescaler fn/1
    TCCR1B = (1<<ICNC1) | (1<<ICES1) | (1<<CS10);
     ed8:	ee e4       	ldi	r30, 0x4E	; 78
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	81 ec       	ldi	r24, 0xC1	; 193
     ede:	80 83       	st	Z, r24
    TIMSK = (1<<TICIE1) | (1<<TOIE1);
     ee0:	e9 e5       	ldi	r30, 0x59	; 89
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	84 e2       	ldi	r24, 0x24	; 36
     ee6:	80 83       	st	Z, r24

    //wlacz przerwania
    sei();
     ee8:	78 94       	sei

    //ustaw pozycje na wyswietlaczu i wypisz napis
   // lcd_gotoxy(LCD_LINE1_ADDR);
    LCD_WriteText("ATMEGA32: SRF05");
     eea:	80 e6       	ldi	r24, 0x60	; 96
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_WriteText>

    //wlacz watchdog-a
    wdt_enable(WDTO_1S);
     ef2:	88 e1       	ldi	r24, 0x18	; 24
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	2e e0       	ldi	r18, 0x0E	; 14
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	a8 95       	wdr
     efe:	81 bd       	out	0x21, r24	; 33
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	21 bd       	out	0x21, r18	; 33

    while(1)
    {
        if(triggered == 0)
     f04:	80 91 94 01 	lds	r24, 0x0194
     f08:	88 23       	and	r24, r24
     f0a:	e1 f7       	brne	.-8      	; 0xf04 <main+0x70>
        {
        //ilosc zliczonych cykli
        clocks = ((uint32_t)count_pulse*65536 + (uint32_t)ending_edge) - (uint32_t)starting_edge;
     f0c:	80 91 92 01 	lds	r24, 0x0192
     f10:	90 91 93 01 	lds	r25, 0x0193
     f14:	cc 01       	movw	r24, r24
     f16:	a0 e0       	ldi	r26, 0x00	; 0
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	ac 01       	movw	r20, r24
     f1c:	33 27       	eor	r19, r19
     f1e:	22 27       	eor	r18, r18
     f20:	80 91 78 01 	lds	r24, 0x0178
     f24:	90 91 79 01 	lds	r25, 0x0179
     f28:	cc 01       	movw	r24, r24
     f2a:	a0 e0       	ldi	r26, 0x00	; 0
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	28 0f       	add	r18, r24
     f30:	39 1f       	adc	r19, r25
     f32:	4a 1f       	adc	r20, r26
     f34:	5b 1f       	adc	r21, r27
     f36:	80 91 96 01 	lds	r24, 0x0196
     f3a:	90 91 97 01 	lds	r25, 0x0197
     f3e:	cc 01       	movw	r24, r24
     f40:	a0 e0       	ldi	r26, 0x00	; 0
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	79 01       	movw	r14, r18
     f46:	8a 01       	movw	r16, r20
     f48:	e8 1a       	sub	r14, r24
     f4a:	f9 0a       	sbc	r15, r25
     f4c:	0a 0b       	sbc	r16, r26
     f4e:	1b 0b       	sbc	r17, r27
     f50:	d8 01       	movw	r26, r16
     f52:	c7 01       	movw	r24, r14
     f54:	80 93 7e 01 	sts	0x017E, r24
     f58:	90 93 7f 01 	sts	0x017F, r25
     f5c:	a0 93 80 01 	sts	0x0180, r26
     f60:	b0 93 81 01 	sts	0x0181, r27
        distance = ((double)clocks)/(58.0*clk_period_us);
     f64:	80 91 7e 01 	lds	r24, 0x017E
     f68:	90 91 7f 01 	lds	r25, 0x017F
     f6c:	a0 91 80 01 	lds	r26, 0x0180
     f70:	b0 91 81 01 	lds	r27, 0x0181
     f74:	bc 01       	movw	r22, r24
     f76:	cd 01       	movw	r24, r26
     f78:	0e 94 c5 0c 	call	0x198a	; 0x198a <__floatunsisf>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e4       	ldi	r19, 0x40	; 64
     f84:	45 e3       	ldi	r20, 0x35	; 53
     f86:	54 e4       	ldi	r21, 0x44	; 68
     f88:	bc 01       	movw	r22, r24
     f8a:	cd 01       	movw	r24, r26
     f8c:	0e 94 37 0b 	call	0x166e	; 0x166e <__divsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	80 93 7a 01 	sts	0x017A, r24
     f98:	90 93 7b 01 	sts	0x017B, r25
     f9c:	a0 93 7c 01 	sts	0x017C, r26
     fa0:	b0 93 7d 01 	sts	0x017D, r27

        dtostrf(distance,2,2,buf_lcd1);
     fa4:	c0 90 7a 01 	lds	r12, 0x017A
     fa8:	d0 90 7b 01 	lds	r13, 0x017B
     fac:	e0 90 7c 01 	lds	r14, 0x017C
     fb0:	f0 90 7d 01 	lds	r15, 0x017D
     fb4:	82 e8       	ldi	r24, 0x82	; 130
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	8c 01       	movw	r16, r24
     fba:	22 e0       	ldi	r18, 0x02	; 2
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	42 e0       	ldi	r20, 0x02	; 2
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	c7 01       	movw	r24, r14
     fc4:	b6 01       	movw	r22, r12
     fc6:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <dtostrf>
       // lcd_gotoxy(LCD_LINE2_ADDR);
        LCD_WriteText(buf_lcd1);
     fca:	82 e8       	ldi	r24, 0x82	; 130
     fcc:	91 e0       	ldi	r25, 0x01	; 1
     fce:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_WriteText>
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	a8 e4       	ldi	r26, 0x48	; 72
     fd8:	b3 e4       	ldi	r27, 0x43	; 67
     fda:	8b 87       	std	Y+11, r24	; 0x0b
     fdc:	9c 87       	std	Y+12, r25	; 0x0c
     fde:	ad 87       	std	Y+13, r26	; 0x0d
     fe0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	4a e7       	ldi	r20, 0x7A	; 122
     fe8:	53 e4       	ldi	r21, 0x43	; 67
     fea:	6b 85       	ldd	r22, Y+11	; 0x0b
     fec:	7c 85       	ldd	r23, Y+12	; 0x0c
     fee:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff2:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	8f 83       	std	Y+7, r24	; 0x07
     ffc:	98 87       	std	Y+8, r25	; 0x08
     ffe:	a9 87       	std	Y+9, r26	; 0x09
    1000:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e8       	ldi	r20, 0x80	; 128
    1008:	5f e3       	ldi	r21, 0x3F	; 63
    100a:	6f 81       	ldd	r22, Y+7	; 0x07
    100c:	78 85       	ldd	r23, Y+8	; 0x08
    100e:	89 85       	ldd	r24, Y+9	; 0x09
    1010:	9a 85       	ldd	r25, Y+10	; 0x0a
    1012:	0e 94 41 0c 	call	0x1882	; 0x1882 <__ltsf2>
    1016:	88 23       	and	r24, r24
    1018:	2c f4       	brge	.+10     	; 0x1024 <main+0x190>
		__ticks = 1;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	9e 83       	std	Y+6, r25	; 0x06
    1020:	8d 83       	std	Y+5, r24	; 0x05
    1022:	3f c0       	rjmp	.+126    	; 0x10a2 <main+0x20e>
	else if (__tmp > 65535)
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	3f ef       	ldi	r19, 0xFF	; 255
    1028:	4f e7       	ldi	r20, 0x7F	; 127
    102a:	57 e4       	ldi	r21, 0x47	; 71
    102c:	6f 81       	ldd	r22, Y+7	; 0x07
    102e:	78 85       	ldd	r23, Y+8	; 0x08
    1030:	89 85       	ldd	r24, Y+9	; 0x09
    1032:	9a 85       	ldd	r25, Y+10	; 0x0a
    1034:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__gtsf2>
    1038:	18 16       	cp	r1, r24
    103a:	4c f5       	brge	.+82     	; 0x108e <main+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e2       	ldi	r20, 0x20	; 32
    1042:	51 e4       	ldi	r21, 0x41	; 65
    1044:	6b 85       	ldd	r22, Y+11	; 0x0b
    1046:	7c 85       	ldd	r23, Y+12	; 0x0c
    1048:	8d 85       	ldd	r24, Y+13	; 0x0d
    104a:	9e 85       	ldd	r25, Y+14	; 0x0e
    104c:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	bc 01       	movw	r22, r24
    1056:	cd 01       	movw	r24, r26
    1058:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fixunssfsi>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	9e 83       	std	Y+6, r25	; 0x06
    1062:	8d 83       	std	Y+5, r24	; 0x05
    1064:	0f c0       	rjmp	.+30     	; 0x1084 <main+0x1f0>
    1066:	89 e1       	ldi	r24, 0x19	; 25
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	9c 83       	std	Y+4, r25	; 0x04
    106c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	9c 81       	ldd	r25, Y+4	; 0x04
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	f1 f7       	brne	.-4      	; 0x1072 <main+0x1de>
    1076:	9c 83       	std	Y+4, r25	; 0x04
    1078:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107a:	8d 81       	ldd	r24, Y+5	; 0x05
    107c:	9e 81       	ldd	r25, Y+6	; 0x06
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	9e 83       	std	Y+6, r25	; 0x06
    1082:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1084:	8d 81       	ldd	r24, Y+5	; 0x05
    1086:	9e 81       	ldd	r25, Y+6	; 0x06
    1088:	00 97       	sbiw	r24, 0x00	; 0
    108a:	69 f7       	brne	.-38     	; 0x1066 <main+0x1d2>
    108c:	14 c0       	rjmp	.+40     	; 0x10b6 <main+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    108e:	6f 81       	ldd	r22, Y+7	; 0x07
    1090:	78 85       	ldd	r23, Y+8	; 0x08
    1092:	89 85       	ldd	r24, Y+9	; 0x09
    1094:	9a 85       	ldd	r25, Y+10	; 0x0a
    1096:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fixunssfsi>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	9e 83       	std	Y+6, r25	; 0x06
    10a0:	8d 83       	std	Y+5, r24	; 0x05
    10a2:	8d 81       	ldd	r24, Y+5	; 0x05
    10a4:	9e 81       	ldd	r25, Y+6	; 0x06
    10a6:	9a 83       	std	Y+2, r25	; 0x02
    10a8:	89 83       	std	Y+1, r24	; 0x01
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	9a 81       	ldd	r25, Y+2	; 0x02
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	f1 f7       	brne	.-4      	; 0x10ae <main+0x21a>
    10b2:	9a 83       	std	Y+2, r25	; 0x02
    10b4:	89 83       	std	Y+1, r24	; 0x01


        _delay_ms(200);
        //wyzeruj licznik T1 i licznik przepelnen od T1 OVF
        TCNT1 = 0;
    10b6:	ec e4       	ldi	r30, 0x4C	; 76
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	11 82       	std	Z+1, r1	; 0x01
    10bc:	10 82       	st	Z, r1
        count_pulse = 0;
    10be:	10 92 93 01 	sts	0x0193, r1
    10c2:	10 92 92 01 	sts	0x0192, r1

        //Wyslij sygnal TRIG do SRF05
        send_trigger();
    10c6:	0e 94 51 06 	call	0xca2	; 0xca2 <send_trigger>

        //wyzeruj watchdog-a
        wdt_reset();
    10ca:	a8 95       	wdr
    10cc:	1b cf       	rjmp	.-458    	; 0xf04 <main+0x70>

000010ce <__fixunssfsi>:
    10ce:	ef 92       	push	r14
    10d0:	ff 92       	push	r15
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	7b 01       	movw	r14, r22
    10d8:	8c 01       	movw	r16, r24
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e0       	ldi	r20, 0x00	; 0
    10e0:	5f e4       	ldi	r21, 0x4F	; 79
    10e2:	0e 94 11 0c 	call	0x1822	; 0x1822 <__gesf2>
    10e6:	88 23       	and	r24, r24
    10e8:	8c f0       	brlt	.+34     	; 0x110c <__fixunssfsi+0x3e>
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	5f e4       	ldi	r21, 0x4F	; 79
    10f2:	c8 01       	movw	r24, r16
    10f4:	b7 01       	movw	r22, r14
    10f6:	0e 94 df 09 	call	0x13be	; 0x13be <__subsf3>
    10fa:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__fixsfsi>
    10fe:	9b 01       	movw	r18, r22
    1100:	ac 01       	movw	r20, r24
    1102:	20 50       	subi	r18, 0x00	; 0
    1104:	30 40       	sbci	r19, 0x00	; 0
    1106:	40 40       	sbci	r20, 0x00	; 0
    1108:	50 48       	sbci	r21, 0x80	; 128
    110a:	06 c0       	rjmp	.+12     	; 0x1118 <__fixunssfsi+0x4a>
    110c:	c8 01       	movw	r24, r16
    110e:	b7 01       	movw	r22, r14
    1110:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__fixsfsi>
    1114:	9b 01       	movw	r18, r22
    1116:	ac 01       	movw	r20, r24
    1118:	b9 01       	movw	r22, r18
    111a:	ca 01       	movw	r24, r20
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	ff 90       	pop	r15
    1122:	ef 90       	pop	r14
    1124:	08 95       	ret

00001126 <_fpadd_parts>:
    1126:	a0 e0       	ldi	r26, 0x00	; 0
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e9 e9       	ldi	r30, 0x99	; 153
    112c:	f8 e0       	ldi	r31, 0x08	; 8
    112e:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__prologue_saves__>
    1132:	dc 01       	movw	r26, r24
    1134:	2b 01       	movw	r4, r22
    1136:	fa 01       	movw	r30, r20
    1138:	9c 91       	ld	r25, X
    113a:	92 30       	cpi	r25, 0x02	; 2
    113c:	08 f4       	brcc	.+2      	; 0x1140 <_fpadd_parts+0x1a>
    113e:	39 c1       	rjmp	.+626    	; 0x13b2 <_fpadd_parts+0x28c>
    1140:	eb 01       	movw	r28, r22
    1142:	88 81       	ld	r24, Y
    1144:	82 30       	cpi	r24, 0x02	; 2
    1146:	08 f4       	brcc	.+2      	; 0x114a <_fpadd_parts+0x24>
    1148:	33 c1       	rjmp	.+614    	; 0x13b0 <_fpadd_parts+0x28a>
    114a:	94 30       	cpi	r25, 0x04	; 4
    114c:	69 f4       	brne	.+26     	; 0x1168 <_fpadd_parts+0x42>
    114e:	84 30       	cpi	r24, 0x04	; 4
    1150:	09 f0       	breq	.+2      	; 0x1154 <_fpadd_parts+0x2e>
    1152:	2f c1       	rjmp	.+606    	; 0x13b2 <_fpadd_parts+0x28c>
    1154:	11 96       	adiw	r26, 0x01	; 1
    1156:	9c 91       	ld	r25, X
    1158:	11 97       	sbiw	r26, 0x01	; 1
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	98 17       	cp	r25, r24
    115e:	09 f4       	brne	.+2      	; 0x1162 <_fpadd_parts+0x3c>
    1160:	28 c1       	rjmp	.+592    	; 0x13b2 <_fpadd_parts+0x28c>
    1162:	a0 e7       	ldi	r26, 0x70	; 112
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	25 c1       	rjmp	.+586    	; 0x13b2 <_fpadd_parts+0x28c>
    1168:	84 30       	cpi	r24, 0x04	; 4
    116a:	09 f4       	brne	.+2      	; 0x116e <_fpadd_parts+0x48>
    116c:	21 c1       	rjmp	.+578    	; 0x13b0 <_fpadd_parts+0x28a>
    116e:	82 30       	cpi	r24, 0x02	; 2
    1170:	a9 f4       	brne	.+42     	; 0x119c <_fpadd_parts+0x76>
    1172:	92 30       	cpi	r25, 0x02	; 2
    1174:	09 f0       	breq	.+2      	; 0x1178 <_fpadd_parts+0x52>
    1176:	1d c1       	rjmp	.+570    	; 0x13b2 <_fpadd_parts+0x28c>
    1178:	9a 01       	movw	r18, r20
    117a:	ad 01       	movw	r20, r26
    117c:	88 e0       	ldi	r24, 0x08	; 8
    117e:	ea 01       	movw	r28, r20
    1180:	09 90       	ld	r0, Y+
    1182:	ae 01       	movw	r20, r28
    1184:	e9 01       	movw	r28, r18
    1186:	09 92       	st	Y+, r0
    1188:	9e 01       	movw	r18, r28
    118a:	81 50       	subi	r24, 0x01	; 1
    118c:	c1 f7       	brne	.-16     	; 0x117e <_fpadd_parts+0x58>
    118e:	e2 01       	movw	r28, r4
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	11 96       	adiw	r26, 0x01	; 1
    1194:	9c 91       	ld	r25, X
    1196:	89 23       	and	r24, r25
    1198:	81 83       	std	Z+1, r24	; 0x01
    119a:	08 c1       	rjmp	.+528    	; 0x13ac <_fpadd_parts+0x286>
    119c:	92 30       	cpi	r25, 0x02	; 2
    119e:	09 f4       	brne	.+2      	; 0x11a2 <_fpadd_parts+0x7c>
    11a0:	07 c1       	rjmp	.+526    	; 0x13b0 <_fpadd_parts+0x28a>
    11a2:	12 96       	adiw	r26, 0x02	; 2
    11a4:	2d 90       	ld	r2, X+
    11a6:	3c 90       	ld	r3, X
    11a8:	13 97       	sbiw	r26, 0x03	; 3
    11aa:	eb 01       	movw	r28, r22
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	9b 81       	ldd	r25, Y+3	; 0x03
    11b0:	14 96       	adiw	r26, 0x04	; 4
    11b2:	ad 90       	ld	r10, X+
    11b4:	bd 90       	ld	r11, X+
    11b6:	cd 90       	ld	r12, X+
    11b8:	dc 90       	ld	r13, X
    11ba:	17 97       	sbiw	r26, 0x07	; 7
    11bc:	ec 80       	ldd	r14, Y+4	; 0x04
    11be:	fd 80       	ldd	r15, Y+5	; 0x05
    11c0:	0e 81       	ldd	r16, Y+6	; 0x06
    11c2:	1f 81       	ldd	r17, Y+7	; 0x07
    11c4:	91 01       	movw	r18, r2
    11c6:	28 1b       	sub	r18, r24
    11c8:	39 0b       	sbc	r19, r25
    11ca:	b9 01       	movw	r22, r18
    11cc:	37 ff       	sbrs	r19, 7
    11ce:	04 c0       	rjmp	.+8      	; 0x11d8 <_fpadd_parts+0xb2>
    11d0:	66 27       	eor	r22, r22
    11d2:	77 27       	eor	r23, r23
    11d4:	62 1b       	sub	r22, r18
    11d6:	73 0b       	sbc	r23, r19
    11d8:	60 32       	cpi	r22, 0x20	; 32
    11da:	71 05       	cpc	r23, r1
    11dc:	0c f0       	brlt	.+2      	; 0x11e0 <_fpadd_parts+0xba>
    11de:	61 c0       	rjmp	.+194    	; 0x12a2 <_fpadd_parts+0x17c>
    11e0:	12 16       	cp	r1, r18
    11e2:	13 06       	cpc	r1, r19
    11e4:	6c f5       	brge	.+90     	; 0x1240 <_fpadd_parts+0x11a>
    11e6:	37 01       	movw	r6, r14
    11e8:	48 01       	movw	r8, r16
    11ea:	06 2e       	mov	r0, r22
    11ec:	04 c0       	rjmp	.+8      	; 0x11f6 <_fpadd_parts+0xd0>
    11ee:	96 94       	lsr	r9
    11f0:	87 94       	ror	r8
    11f2:	77 94       	ror	r7
    11f4:	67 94       	ror	r6
    11f6:	0a 94       	dec	r0
    11f8:	d2 f7       	brpl	.-12     	; 0x11ee <_fpadd_parts+0xc8>
    11fa:	21 e0       	ldi	r18, 0x01	; 1
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	04 c0       	rjmp	.+8      	; 0x120c <_fpadd_parts+0xe6>
    1204:	22 0f       	add	r18, r18
    1206:	33 1f       	adc	r19, r19
    1208:	44 1f       	adc	r20, r20
    120a:	55 1f       	adc	r21, r21
    120c:	6a 95       	dec	r22
    120e:	d2 f7       	brpl	.-12     	; 0x1204 <_fpadd_parts+0xde>
    1210:	21 50       	subi	r18, 0x01	; 1
    1212:	30 40       	sbci	r19, 0x00	; 0
    1214:	40 40       	sbci	r20, 0x00	; 0
    1216:	50 40       	sbci	r21, 0x00	; 0
    1218:	2e 21       	and	r18, r14
    121a:	3f 21       	and	r19, r15
    121c:	40 23       	and	r20, r16
    121e:	51 23       	and	r21, r17
    1220:	21 15       	cp	r18, r1
    1222:	31 05       	cpc	r19, r1
    1224:	41 05       	cpc	r20, r1
    1226:	51 05       	cpc	r21, r1
    1228:	21 f0       	breq	.+8      	; 0x1232 <_fpadd_parts+0x10c>
    122a:	21 e0       	ldi	r18, 0x01	; 1
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e0       	ldi	r20, 0x00	; 0
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	79 01       	movw	r14, r18
    1234:	8a 01       	movw	r16, r20
    1236:	e6 28       	or	r14, r6
    1238:	f7 28       	or	r15, r7
    123a:	08 29       	or	r16, r8
    123c:	19 29       	or	r17, r9
    123e:	3c c0       	rjmp	.+120    	; 0x12b8 <_fpadd_parts+0x192>
    1240:	23 2b       	or	r18, r19
    1242:	d1 f1       	breq	.+116    	; 0x12b8 <_fpadd_parts+0x192>
    1244:	26 0e       	add	r2, r22
    1246:	37 1e       	adc	r3, r23
    1248:	35 01       	movw	r6, r10
    124a:	46 01       	movw	r8, r12
    124c:	06 2e       	mov	r0, r22
    124e:	04 c0       	rjmp	.+8      	; 0x1258 <_fpadd_parts+0x132>
    1250:	96 94       	lsr	r9
    1252:	87 94       	ror	r8
    1254:	77 94       	ror	r7
    1256:	67 94       	ror	r6
    1258:	0a 94       	dec	r0
    125a:	d2 f7       	brpl	.-12     	; 0x1250 <_fpadd_parts+0x12a>
    125c:	21 e0       	ldi	r18, 0x01	; 1
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e0       	ldi	r20, 0x00	; 0
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	04 c0       	rjmp	.+8      	; 0x126e <_fpadd_parts+0x148>
    1266:	22 0f       	add	r18, r18
    1268:	33 1f       	adc	r19, r19
    126a:	44 1f       	adc	r20, r20
    126c:	55 1f       	adc	r21, r21
    126e:	6a 95       	dec	r22
    1270:	d2 f7       	brpl	.-12     	; 0x1266 <_fpadd_parts+0x140>
    1272:	21 50       	subi	r18, 0x01	; 1
    1274:	30 40       	sbci	r19, 0x00	; 0
    1276:	40 40       	sbci	r20, 0x00	; 0
    1278:	50 40       	sbci	r21, 0x00	; 0
    127a:	2a 21       	and	r18, r10
    127c:	3b 21       	and	r19, r11
    127e:	4c 21       	and	r20, r12
    1280:	5d 21       	and	r21, r13
    1282:	21 15       	cp	r18, r1
    1284:	31 05       	cpc	r19, r1
    1286:	41 05       	cpc	r20, r1
    1288:	51 05       	cpc	r21, r1
    128a:	21 f0       	breq	.+8      	; 0x1294 <_fpadd_parts+0x16e>
    128c:	21 e0       	ldi	r18, 0x01	; 1
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e0       	ldi	r20, 0x00	; 0
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	59 01       	movw	r10, r18
    1296:	6a 01       	movw	r12, r20
    1298:	a6 28       	or	r10, r6
    129a:	b7 28       	or	r11, r7
    129c:	c8 28       	or	r12, r8
    129e:	d9 28       	or	r13, r9
    12a0:	0b c0       	rjmp	.+22     	; 0x12b8 <_fpadd_parts+0x192>
    12a2:	82 15       	cp	r24, r2
    12a4:	93 05       	cpc	r25, r3
    12a6:	2c f0       	brlt	.+10     	; 0x12b2 <_fpadd_parts+0x18c>
    12a8:	1c 01       	movw	r2, r24
    12aa:	aa 24       	eor	r10, r10
    12ac:	bb 24       	eor	r11, r11
    12ae:	65 01       	movw	r12, r10
    12b0:	03 c0       	rjmp	.+6      	; 0x12b8 <_fpadd_parts+0x192>
    12b2:	ee 24       	eor	r14, r14
    12b4:	ff 24       	eor	r15, r15
    12b6:	87 01       	movw	r16, r14
    12b8:	11 96       	adiw	r26, 0x01	; 1
    12ba:	9c 91       	ld	r25, X
    12bc:	d2 01       	movw	r26, r4
    12be:	11 96       	adiw	r26, 0x01	; 1
    12c0:	8c 91       	ld	r24, X
    12c2:	98 17       	cp	r25, r24
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <_fpadd_parts+0x1a2>
    12c6:	45 c0       	rjmp	.+138    	; 0x1352 <_fpadd_parts+0x22c>
    12c8:	99 23       	and	r25, r25
    12ca:	39 f0       	breq	.+14     	; 0x12da <_fpadd_parts+0x1b4>
    12cc:	a8 01       	movw	r20, r16
    12ce:	97 01       	movw	r18, r14
    12d0:	2a 19       	sub	r18, r10
    12d2:	3b 09       	sbc	r19, r11
    12d4:	4c 09       	sbc	r20, r12
    12d6:	5d 09       	sbc	r21, r13
    12d8:	06 c0       	rjmp	.+12     	; 0x12e6 <_fpadd_parts+0x1c0>
    12da:	a6 01       	movw	r20, r12
    12dc:	95 01       	movw	r18, r10
    12de:	2e 19       	sub	r18, r14
    12e0:	3f 09       	sbc	r19, r15
    12e2:	40 0b       	sbc	r20, r16
    12e4:	51 0b       	sbc	r21, r17
    12e6:	57 fd       	sbrc	r21, 7
    12e8:	08 c0       	rjmp	.+16     	; 0x12fa <_fpadd_parts+0x1d4>
    12ea:	11 82       	std	Z+1, r1	; 0x01
    12ec:	33 82       	std	Z+3, r3	; 0x03
    12ee:	22 82       	std	Z+2, r2	; 0x02
    12f0:	24 83       	std	Z+4, r18	; 0x04
    12f2:	35 83       	std	Z+5, r19	; 0x05
    12f4:	46 83       	std	Z+6, r20	; 0x06
    12f6:	57 83       	std	Z+7, r21	; 0x07
    12f8:	1d c0       	rjmp	.+58     	; 0x1334 <_fpadd_parts+0x20e>
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	81 83       	std	Z+1, r24	; 0x01
    12fe:	33 82       	std	Z+3, r3	; 0x03
    1300:	22 82       	std	Z+2, r2	; 0x02
    1302:	88 27       	eor	r24, r24
    1304:	99 27       	eor	r25, r25
    1306:	dc 01       	movw	r26, r24
    1308:	82 1b       	sub	r24, r18
    130a:	93 0b       	sbc	r25, r19
    130c:	a4 0b       	sbc	r26, r20
    130e:	b5 0b       	sbc	r27, r21
    1310:	84 83       	std	Z+4, r24	; 0x04
    1312:	95 83       	std	Z+5, r25	; 0x05
    1314:	a6 83       	std	Z+6, r26	; 0x06
    1316:	b7 83       	std	Z+7, r27	; 0x07
    1318:	0d c0       	rjmp	.+26     	; 0x1334 <_fpadd_parts+0x20e>
    131a:	22 0f       	add	r18, r18
    131c:	33 1f       	adc	r19, r19
    131e:	44 1f       	adc	r20, r20
    1320:	55 1f       	adc	r21, r21
    1322:	24 83       	std	Z+4, r18	; 0x04
    1324:	35 83       	std	Z+5, r19	; 0x05
    1326:	46 83       	std	Z+6, r20	; 0x06
    1328:	57 83       	std	Z+7, r21	; 0x07
    132a:	82 81       	ldd	r24, Z+2	; 0x02
    132c:	93 81       	ldd	r25, Z+3	; 0x03
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	93 83       	std	Z+3, r25	; 0x03
    1332:	82 83       	std	Z+2, r24	; 0x02
    1334:	24 81       	ldd	r18, Z+4	; 0x04
    1336:	35 81       	ldd	r19, Z+5	; 0x05
    1338:	46 81       	ldd	r20, Z+6	; 0x06
    133a:	57 81       	ldd	r21, Z+7	; 0x07
    133c:	da 01       	movw	r26, r20
    133e:	c9 01       	movw	r24, r18
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	a1 09       	sbc	r26, r1
    1344:	b1 09       	sbc	r27, r1
    1346:	8f 5f       	subi	r24, 0xFF	; 255
    1348:	9f 4f       	sbci	r25, 0xFF	; 255
    134a:	af 4f       	sbci	r26, 0xFF	; 255
    134c:	bf 43       	sbci	r27, 0x3F	; 63
    134e:	28 f3       	brcs	.-54     	; 0x131a <_fpadd_parts+0x1f4>
    1350:	0b c0       	rjmp	.+22     	; 0x1368 <_fpadd_parts+0x242>
    1352:	91 83       	std	Z+1, r25	; 0x01
    1354:	33 82       	std	Z+3, r3	; 0x03
    1356:	22 82       	std	Z+2, r2	; 0x02
    1358:	ea 0c       	add	r14, r10
    135a:	fb 1c       	adc	r15, r11
    135c:	0c 1d       	adc	r16, r12
    135e:	1d 1d       	adc	r17, r13
    1360:	e4 82       	std	Z+4, r14	; 0x04
    1362:	f5 82       	std	Z+5, r15	; 0x05
    1364:	06 83       	std	Z+6, r16	; 0x06
    1366:	17 83       	std	Z+7, r17	; 0x07
    1368:	83 e0       	ldi	r24, 0x03	; 3
    136a:	80 83       	st	Z, r24
    136c:	24 81       	ldd	r18, Z+4	; 0x04
    136e:	35 81       	ldd	r19, Z+5	; 0x05
    1370:	46 81       	ldd	r20, Z+6	; 0x06
    1372:	57 81       	ldd	r21, Z+7	; 0x07
    1374:	57 ff       	sbrs	r21, 7
    1376:	1a c0       	rjmp	.+52     	; 0x13ac <_fpadd_parts+0x286>
    1378:	c9 01       	movw	r24, r18
    137a:	aa 27       	eor	r26, r26
    137c:	97 fd       	sbrc	r25, 7
    137e:	a0 95       	com	r26
    1380:	ba 2f       	mov	r27, r26
    1382:	81 70       	andi	r24, 0x01	; 1
    1384:	90 70       	andi	r25, 0x00	; 0
    1386:	a0 70       	andi	r26, 0x00	; 0
    1388:	b0 70       	andi	r27, 0x00	; 0
    138a:	56 95       	lsr	r21
    138c:	47 95       	ror	r20
    138e:	37 95       	ror	r19
    1390:	27 95       	ror	r18
    1392:	82 2b       	or	r24, r18
    1394:	93 2b       	or	r25, r19
    1396:	a4 2b       	or	r26, r20
    1398:	b5 2b       	or	r27, r21
    139a:	84 83       	std	Z+4, r24	; 0x04
    139c:	95 83       	std	Z+5, r25	; 0x05
    139e:	a6 83       	std	Z+6, r26	; 0x06
    13a0:	b7 83       	std	Z+7, r27	; 0x07
    13a2:	82 81       	ldd	r24, Z+2	; 0x02
    13a4:	93 81       	ldd	r25, Z+3	; 0x03
    13a6:	01 96       	adiw	r24, 0x01	; 1
    13a8:	93 83       	std	Z+3, r25	; 0x03
    13aa:	82 83       	std	Z+2, r24	; 0x02
    13ac:	df 01       	movw	r26, r30
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <_fpadd_parts+0x28c>
    13b0:	d2 01       	movw	r26, r4
    13b2:	cd 01       	movw	r24, r26
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	e2 e1       	ldi	r30, 0x12	; 18
    13ba:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__epilogue_restores__>

000013be <__subsf3>:
    13be:	a0 e2       	ldi	r26, 0x20	; 32
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e5 ee       	ldi	r30, 0xE5	; 229
    13c4:	f9 e0       	ldi	r31, 0x09	; 9
    13c6:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__prologue_saves__+0x18>
    13ca:	69 83       	std	Y+1, r22	; 0x01
    13cc:	7a 83       	std	Y+2, r23	; 0x02
    13ce:	8b 83       	std	Y+3, r24	; 0x03
    13d0:	9c 83       	std	Y+4, r25	; 0x04
    13d2:	2d 83       	std	Y+5, r18	; 0x05
    13d4:	3e 83       	std	Y+6, r19	; 0x06
    13d6:	4f 83       	std	Y+7, r20	; 0x07
    13d8:	58 87       	std	Y+8, r21	; 0x08
    13da:	e9 e0       	ldi	r30, 0x09	; 9
    13dc:	ee 2e       	mov	r14, r30
    13de:	f1 2c       	mov	r15, r1
    13e0:	ec 0e       	add	r14, r28
    13e2:	fd 1e       	adc	r15, r29
    13e4:	b7 01       	movw	r22, r14
    13e6:	ce 01       	movw	r24, r28
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__unpack_f>
    13ee:	8e 01       	movw	r16, r28
    13f0:	0f 5e       	subi	r16, 0xEF	; 239
    13f2:	1f 4f       	sbci	r17, 0xFF	; 255
    13f4:	b8 01       	movw	r22, r16
    13f6:	ce 01       	movw	r24, r28
    13f8:	05 96       	adiw	r24, 0x05	; 5
    13fa:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__unpack_f>
    13fe:	8a 89       	ldd	r24, Y+18	; 0x12
    1400:	91 e0       	ldi	r25, 0x01	; 1
    1402:	89 27       	eor	r24, r25
    1404:	8a 8b       	std	Y+18, r24	; 0x12
    1406:	ae 01       	movw	r20, r28
    1408:	47 5e       	subi	r20, 0xE7	; 231
    140a:	5f 4f       	sbci	r21, 0xFF	; 255
    140c:	b8 01       	movw	r22, r16
    140e:	c7 01       	movw	r24, r14
    1410:	0e 94 93 08 	call	0x1126	; 0x1126 <_fpadd_parts>
    1414:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__pack_f>
    1418:	a0 96       	adiw	r28, 0x20	; 32
    141a:	e6 e0       	ldi	r30, 0x06	; 6
    141c:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__epilogue_restores__+0x18>

00001420 <__addsf3>:
    1420:	a0 e2       	ldi	r26, 0x20	; 32
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e6 e1       	ldi	r30, 0x16	; 22
    1426:	fa e0       	ldi	r31, 0x0A	; 10
    1428:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__prologue_saves__+0x18>
    142c:	69 83       	std	Y+1, r22	; 0x01
    142e:	7a 83       	std	Y+2, r23	; 0x02
    1430:	8b 83       	std	Y+3, r24	; 0x03
    1432:	9c 83       	std	Y+4, r25	; 0x04
    1434:	2d 83       	std	Y+5, r18	; 0x05
    1436:	3e 83       	std	Y+6, r19	; 0x06
    1438:	4f 83       	std	Y+7, r20	; 0x07
    143a:	58 87       	std	Y+8, r21	; 0x08
    143c:	f9 e0       	ldi	r31, 0x09	; 9
    143e:	ef 2e       	mov	r14, r31
    1440:	f1 2c       	mov	r15, r1
    1442:	ec 0e       	add	r14, r28
    1444:	fd 1e       	adc	r15, r29
    1446:	b7 01       	movw	r22, r14
    1448:	ce 01       	movw	r24, r28
    144a:	01 96       	adiw	r24, 0x01	; 1
    144c:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__unpack_f>
    1450:	8e 01       	movw	r16, r28
    1452:	0f 5e       	subi	r16, 0xEF	; 239
    1454:	1f 4f       	sbci	r17, 0xFF	; 255
    1456:	b8 01       	movw	r22, r16
    1458:	ce 01       	movw	r24, r28
    145a:	05 96       	adiw	r24, 0x05	; 5
    145c:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__unpack_f>
    1460:	ae 01       	movw	r20, r28
    1462:	47 5e       	subi	r20, 0xE7	; 231
    1464:	5f 4f       	sbci	r21, 0xFF	; 255
    1466:	b8 01       	movw	r22, r16
    1468:	c7 01       	movw	r24, r14
    146a:	0e 94 93 08 	call	0x1126	; 0x1126 <_fpadd_parts>
    146e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__pack_f>
    1472:	a0 96       	adiw	r28, 0x20	; 32
    1474:	e6 e0       	ldi	r30, 0x06	; 6
    1476:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__epilogue_restores__+0x18>

0000147a <__mulsf3>:
    147a:	a0 e2       	ldi	r26, 0x20	; 32
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e3 e4       	ldi	r30, 0x43	; 67
    1480:	fa e0       	ldi	r31, 0x0A	; 10
    1482:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__prologue_saves__>
    1486:	69 83       	std	Y+1, r22	; 0x01
    1488:	7a 83       	std	Y+2, r23	; 0x02
    148a:	8b 83       	std	Y+3, r24	; 0x03
    148c:	9c 83       	std	Y+4, r25	; 0x04
    148e:	2d 83       	std	Y+5, r18	; 0x05
    1490:	3e 83       	std	Y+6, r19	; 0x06
    1492:	4f 83       	std	Y+7, r20	; 0x07
    1494:	58 87       	std	Y+8, r21	; 0x08
    1496:	be 01       	movw	r22, r28
    1498:	67 5f       	subi	r22, 0xF7	; 247
    149a:	7f 4f       	sbci	r23, 0xFF	; 255
    149c:	ce 01       	movw	r24, r28
    149e:	01 96       	adiw	r24, 0x01	; 1
    14a0:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__unpack_f>
    14a4:	be 01       	movw	r22, r28
    14a6:	6f 5e       	subi	r22, 0xEF	; 239
    14a8:	7f 4f       	sbci	r23, 0xFF	; 255
    14aa:	ce 01       	movw	r24, r28
    14ac:	05 96       	adiw	r24, 0x05	; 5
    14ae:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__unpack_f>
    14b2:	99 85       	ldd	r25, Y+9	; 0x09
    14b4:	92 30       	cpi	r25, 0x02	; 2
    14b6:	88 f0       	brcs	.+34     	; 0x14da <__mulsf3+0x60>
    14b8:	89 89       	ldd	r24, Y+17	; 0x11
    14ba:	82 30       	cpi	r24, 0x02	; 2
    14bc:	c8 f0       	brcs	.+50     	; 0x14f0 <__mulsf3+0x76>
    14be:	94 30       	cpi	r25, 0x04	; 4
    14c0:	19 f4       	brne	.+6      	; 0x14c8 <__mulsf3+0x4e>
    14c2:	82 30       	cpi	r24, 0x02	; 2
    14c4:	51 f4       	brne	.+20     	; 0x14da <__mulsf3+0x60>
    14c6:	04 c0       	rjmp	.+8      	; 0x14d0 <__mulsf3+0x56>
    14c8:	84 30       	cpi	r24, 0x04	; 4
    14ca:	29 f4       	brne	.+10     	; 0x14d6 <__mulsf3+0x5c>
    14cc:	92 30       	cpi	r25, 0x02	; 2
    14ce:	81 f4       	brne	.+32     	; 0x14f0 <__mulsf3+0x76>
    14d0:	80 e7       	ldi	r24, 0x70	; 112
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	c6 c0       	rjmp	.+396    	; 0x1662 <__mulsf3+0x1e8>
    14d6:	92 30       	cpi	r25, 0x02	; 2
    14d8:	49 f4       	brne	.+18     	; 0x14ec <__mulsf3+0x72>
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14de:	8a 89       	ldd	r24, Y+18	; 0x12
    14e0:	98 13       	cpse	r25, r24
    14e2:	21 e0       	ldi	r18, 0x01	; 1
    14e4:	2a 87       	std	Y+10, r18	; 0x0a
    14e6:	ce 01       	movw	r24, r28
    14e8:	09 96       	adiw	r24, 0x09	; 9
    14ea:	bb c0       	rjmp	.+374    	; 0x1662 <__mulsf3+0x1e8>
    14ec:	82 30       	cpi	r24, 0x02	; 2
    14ee:	49 f4       	brne	.+18     	; 0x1502 <__mulsf3+0x88>
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f4:	8a 89       	ldd	r24, Y+18	; 0x12
    14f6:	98 13       	cpse	r25, r24
    14f8:	21 e0       	ldi	r18, 0x01	; 1
    14fa:	2a 8b       	std	Y+18, r18	; 0x12
    14fc:	ce 01       	movw	r24, r28
    14fe:	41 96       	adiw	r24, 0x11	; 17
    1500:	b0 c0       	rjmp	.+352    	; 0x1662 <__mulsf3+0x1e8>
    1502:	2d 84       	ldd	r2, Y+13	; 0x0d
    1504:	3e 84       	ldd	r3, Y+14	; 0x0e
    1506:	4f 84       	ldd	r4, Y+15	; 0x0f
    1508:	58 88       	ldd	r5, Y+16	; 0x10
    150a:	6d 88       	ldd	r6, Y+21	; 0x15
    150c:	7e 88       	ldd	r7, Y+22	; 0x16
    150e:	8f 88       	ldd	r8, Y+23	; 0x17
    1510:	98 8c       	ldd	r9, Y+24	; 0x18
    1512:	ee 24       	eor	r14, r14
    1514:	ff 24       	eor	r15, r15
    1516:	87 01       	movw	r16, r14
    1518:	aa 24       	eor	r10, r10
    151a:	bb 24       	eor	r11, r11
    151c:	65 01       	movw	r12, r10
    151e:	40 e0       	ldi	r20, 0x00	; 0
    1520:	50 e0       	ldi	r21, 0x00	; 0
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	e0 e0       	ldi	r30, 0x00	; 0
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	c1 01       	movw	r24, r2
    152c:	81 70       	andi	r24, 0x01	; 1
    152e:	90 70       	andi	r25, 0x00	; 0
    1530:	89 2b       	or	r24, r25
    1532:	e9 f0       	breq	.+58     	; 0x156e <__mulsf3+0xf4>
    1534:	e6 0c       	add	r14, r6
    1536:	f7 1c       	adc	r15, r7
    1538:	08 1d       	adc	r16, r8
    153a:	19 1d       	adc	r17, r9
    153c:	9a 01       	movw	r18, r20
    153e:	ab 01       	movw	r20, r22
    1540:	2a 0d       	add	r18, r10
    1542:	3b 1d       	adc	r19, r11
    1544:	4c 1d       	adc	r20, r12
    1546:	5d 1d       	adc	r21, r13
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	a0 e0       	ldi	r26, 0x00	; 0
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e6 14       	cp	r14, r6
    1552:	f7 04       	cpc	r15, r7
    1554:	08 05       	cpc	r16, r8
    1556:	19 05       	cpc	r17, r9
    1558:	20 f4       	brcc	.+8      	; 0x1562 <__mulsf3+0xe8>
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	a0 e0       	ldi	r26, 0x00	; 0
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	ba 01       	movw	r22, r20
    1564:	a9 01       	movw	r20, r18
    1566:	48 0f       	add	r20, r24
    1568:	59 1f       	adc	r21, r25
    156a:	6a 1f       	adc	r22, r26
    156c:	7b 1f       	adc	r23, r27
    156e:	aa 0c       	add	r10, r10
    1570:	bb 1c       	adc	r11, r11
    1572:	cc 1c       	adc	r12, r12
    1574:	dd 1c       	adc	r13, r13
    1576:	97 fe       	sbrs	r9, 7
    1578:	08 c0       	rjmp	.+16     	; 0x158a <__mulsf3+0x110>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a0 e0       	ldi	r26, 0x00	; 0
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	a8 2a       	or	r10, r24
    1584:	b9 2a       	or	r11, r25
    1586:	ca 2a       	or	r12, r26
    1588:	db 2a       	or	r13, r27
    158a:	31 96       	adiw	r30, 0x01	; 1
    158c:	e0 32       	cpi	r30, 0x20	; 32
    158e:	f1 05       	cpc	r31, r1
    1590:	49 f0       	breq	.+18     	; 0x15a4 <__mulsf3+0x12a>
    1592:	66 0c       	add	r6, r6
    1594:	77 1c       	adc	r7, r7
    1596:	88 1c       	adc	r8, r8
    1598:	99 1c       	adc	r9, r9
    159a:	56 94       	lsr	r5
    159c:	47 94       	ror	r4
    159e:	37 94       	ror	r3
    15a0:	27 94       	ror	r2
    15a2:	c3 cf       	rjmp	.-122    	; 0x152a <__mulsf3+0xb0>
    15a4:	fa 85       	ldd	r31, Y+10	; 0x0a
    15a6:	ea 89       	ldd	r30, Y+18	; 0x12
    15a8:	2b 89       	ldd	r18, Y+19	; 0x13
    15aa:	3c 89       	ldd	r19, Y+20	; 0x14
    15ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    15ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    15b0:	28 0f       	add	r18, r24
    15b2:	39 1f       	adc	r19, r25
    15b4:	2e 5f       	subi	r18, 0xFE	; 254
    15b6:	3f 4f       	sbci	r19, 0xFF	; 255
    15b8:	17 c0       	rjmp	.+46     	; 0x15e8 <__mulsf3+0x16e>
    15ba:	ca 01       	movw	r24, r20
    15bc:	81 70       	andi	r24, 0x01	; 1
    15be:	90 70       	andi	r25, 0x00	; 0
    15c0:	89 2b       	or	r24, r25
    15c2:	61 f0       	breq	.+24     	; 0x15dc <__mulsf3+0x162>
    15c4:	16 95       	lsr	r17
    15c6:	07 95       	ror	r16
    15c8:	f7 94       	ror	r15
    15ca:	e7 94       	ror	r14
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	a0 e0       	ldi	r26, 0x00	; 0
    15d2:	b0 e8       	ldi	r27, 0x80	; 128
    15d4:	e8 2a       	or	r14, r24
    15d6:	f9 2a       	or	r15, r25
    15d8:	0a 2b       	or	r16, r26
    15da:	1b 2b       	or	r17, r27
    15dc:	76 95       	lsr	r23
    15de:	67 95       	ror	r22
    15e0:	57 95       	ror	r21
    15e2:	47 95       	ror	r20
    15e4:	2f 5f       	subi	r18, 0xFF	; 255
    15e6:	3f 4f       	sbci	r19, 0xFF	; 255
    15e8:	77 fd       	sbrc	r23, 7
    15ea:	e7 cf       	rjmp	.-50     	; 0x15ba <__mulsf3+0x140>
    15ec:	0c c0       	rjmp	.+24     	; 0x1606 <__mulsf3+0x18c>
    15ee:	44 0f       	add	r20, r20
    15f0:	55 1f       	adc	r21, r21
    15f2:	66 1f       	adc	r22, r22
    15f4:	77 1f       	adc	r23, r23
    15f6:	17 fd       	sbrc	r17, 7
    15f8:	41 60       	ori	r20, 0x01	; 1
    15fa:	ee 0c       	add	r14, r14
    15fc:	ff 1c       	adc	r15, r15
    15fe:	00 1f       	adc	r16, r16
    1600:	11 1f       	adc	r17, r17
    1602:	21 50       	subi	r18, 0x01	; 1
    1604:	30 40       	sbci	r19, 0x00	; 0
    1606:	40 30       	cpi	r20, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	59 07       	cpc	r21, r25
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	69 07       	cpc	r22, r25
    1610:	90 e4       	ldi	r25, 0x40	; 64
    1612:	79 07       	cpc	r23, r25
    1614:	60 f3       	brcs	.-40     	; 0x15ee <__mulsf3+0x174>
    1616:	2b 8f       	std	Y+27, r18	; 0x1b
    1618:	3c 8f       	std	Y+28, r19	; 0x1c
    161a:	db 01       	movw	r26, r22
    161c:	ca 01       	movw	r24, r20
    161e:	8f 77       	andi	r24, 0x7F	; 127
    1620:	90 70       	andi	r25, 0x00	; 0
    1622:	a0 70       	andi	r26, 0x00	; 0
    1624:	b0 70       	andi	r27, 0x00	; 0
    1626:	80 34       	cpi	r24, 0x40	; 64
    1628:	91 05       	cpc	r25, r1
    162a:	a1 05       	cpc	r26, r1
    162c:	b1 05       	cpc	r27, r1
    162e:	61 f4       	brne	.+24     	; 0x1648 <__mulsf3+0x1ce>
    1630:	47 fd       	sbrc	r20, 7
    1632:	0a c0       	rjmp	.+20     	; 0x1648 <__mulsf3+0x1ce>
    1634:	e1 14       	cp	r14, r1
    1636:	f1 04       	cpc	r15, r1
    1638:	01 05       	cpc	r16, r1
    163a:	11 05       	cpc	r17, r1
    163c:	29 f0       	breq	.+10     	; 0x1648 <__mulsf3+0x1ce>
    163e:	40 5c       	subi	r20, 0xC0	; 192
    1640:	5f 4f       	sbci	r21, 0xFF	; 255
    1642:	6f 4f       	sbci	r22, 0xFF	; 255
    1644:	7f 4f       	sbci	r23, 0xFF	; 255
    1646:	40 78       	andi	r20, 0x80	; 128
    1648:	1a 8e       	std	Y+26, r1	; 0x1a
    164a:	fe 17       	cp	r31, r30
    164c:	11 f0       	breq	.+4      	; 0x1652 <__mulsf3+0x1d8>
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	8a 8f       	std	Y+26, r24	; 0x1a
    1652:	4d 8f       	std	Y+29, r20	; 0x1d
    1654:	5e 8f       	std	Y+30, r21	; 0x1e
    1656:	6f 8f       	std	Y+31, r22	; 0x1f
    1658:	78 a3       	std	Y+32, r23	; 0x20
    165a:	83 e0       	ldi	r24, 0x03	; 3
    165c:	89 8f       	std	Y+25, r24	; 0x19
    165e:	ce 01       	movw	r24, r28
    1660:	49 96       	adiw	r24, 0x19	; 25
    1662:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__pack_f>
    1666:	a0 96       	adiw	r28, 0x20	; 32
    1668:	e2 e1       	ldi	r30, 0x12	; 18
    166a:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__epilogue_restores__>

0000166e <__divsf3>:
    166e:	a8 e1       	ldi	r26, 0x18	; 24
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	ed e3       	ldi	r30, 0x3D	; 61
    1674:	fb e0       	ldi	r31, 0x0B	; 11
    1676:	0c 94 96 11 	jmp	0x232c	; 0x232c <__prologue_saves__+0x10>
    167a:	69 83       	std	Y+1, r22	; 0x01
    167c:	7a 83       	std	Y+2, r23	; 0x02
    167e:	8b 83       	std	Y+3, r24	; 0x03
    1680:	9c 83       	std	Y+4, r25	; 0x04
    1682:	2d 83       	std	Y+5, r18	; 0x05
    1684:	3e 83       	std	Y+6, r19	; 0x06
    1686:	4f 83       	std	Y+7, r20	; 0x07
    1688:	58 87       	std	Y+8, r21	; 0x08
    168a:	b9 e0       	ldi	r27, 0x09	; 9
    168c:	eb 2e       	mov	r14, r27
    168e:	f1 2c       	mov	r15, r1
    1690:	ec 0e       	add	r14, r28
    1692:	fd 1e       	adc	r15, r29
    1694:	b7 01       	movw	r22, r14
    1696:	ce 01       	movw	r24, r28
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__unpack_f>
    169e:	8e 01       	movw	r16, r28
    16a0:	0f 5e       	subi	r16, 0xEF	; 239
    16a2:	1f 4f       	sbci	r17, 0xFF	; 255
    16a4:	b8 01       	movw	r22, r16
    16a6:	ce 01       	movw	r24, r28
    16a8:	05 96       	adiw	r24, 0x05	; 5
    16aa:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__unpack_f>
    16ae:	29 85       	ldd	r18, Y+9	; 0x09
    16b0:	22 30       	cpi	r18, 0x02	; 2
    16b2:	08 f4       	brcc	.+2      	; 0x16b6 <__divsf3+0x48>
    16b4:	7c c0       	rjmp	.+248    	; 0x17ae <__divsf3+0x140>
    16b6:	39 89       	ldd	r19, Y+17	; 0x11
    16b8:	32 30       	cpi	r19, 0x02	; 2
    16ba:	10 f4       	brcc	.+4      	; 0x16c0 <__divsf3+0x52>
    16bc:	b8 01       	movw	r22, r16
    16be:	7a c0       	rjmp	.+244    	; 0x17b4 <__divsf3+0x146>
    16c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16c2:	9a 89       	ldd	r25, Y+18	; 0x12
    16c4:	89 27       	eor	r24, r25
    16c6:	8a 87       	std	Y+10, r24	; 0x0a
    16c8:	24 30       	cpi	r18, 0x04	; 4
    16ca:	11 f0       	breq	.+4      	; 0x16d0 <__divsf3+0x62>
    16cc:	22 30       	cpi	r18, 0x02	; 2
    16ce:	31 f4       	brne	.+12     	; 0x16dc <__divsf3+0x6e>
    16d0:	23 17       	cp	r18, r19
    16d2:	09 f0       	breq	.+2      	; 0x16d6 <__divsf3+0x68>
    16d4:	6c c0       	rjmp	.+216    	; 0x17ae <__divsf3+0x140>
    16d6:	60 e7       	ldi	r22, 0x70	; 112
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	6c c0       	rjmp	.+216    	; 0x17b4 <__divsf3+0x146>
    16dc:	34 30       	cpi	r19, 0x04	; 4
    16de:	39 f4       	brne	.+14     	; 0x16ee <__divsf3+0x80>
    16e0:	1d 86       	std	Y+13, r1	; 0x0d
    16e2:	1e 86       	std	Y+14, r1	; 0x0e
    16e4:	1f 86       	std	Y+15, r1	; 0x0f
    16e6:	18 8a       	std	Y+16, r1	; 0x10
    16e8:	1c 86       	std	Y+12, r1	; 0x0c
    16ea:	1b 86       	std	Y+11, r1	; 0x0b
    16ec:	04 c0       	rjmp	.+8      	; 0x16f6 <__divsf3+0x88>
    16ee:	32 30       	cpi	r19, 0x02	; 2
    16f0:	21 f4       	brne	.+8      	; 0x16fa <__divsf3+0x8c>
    16f2:	84 e0       	ldi	r24, 0x04	; 4
    16f4:	89 87       	std	Y+9, r24	; 0x09
    16f6:	b7 01       	movw	r22, r14
    16f8:	5d c0       	rjmp	.+186    	; 0x17b4 <__divsf3+0x146>
    16fa:	2b 85       	ldd	r18, Y+11	; 0x0b
    16fc:	3c 85       	ldd	r19, Y+12	; 0x0c
    16fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1700:	9c 89       	ldd	r25, Y+20	; 0x14
    1702:	28 1b       	sub	r18, r24
    1704:	39 0b       	sbc	r19, r25
    1706:	3c 87       	std	Y+12, r19	; 0x0c
    1708:	2b 87       	std	Y+11, r18	; 0x0b
    170a:	ed 84       	ldd	r14, Y+13	; 0x0d
    170c:	fe 84       	ldd	r15, Y+14	; 0x0e
    170e:	0f 85       	ldd	r16, Y+15	; 0x0f
    1710:	18 89       	ldd	r17, Y+16	; 0x10
    1712:	ad 88       	ldd	r10, Y+21	; 0x15
    1714:	be 88       	ldd	r11, Y+22	; 0x16
    1716:	cf 88       	ldd	r12, Y+23	; 0x17
    1718:	d8 8c       	ldd	r13, Y+24	; 0x18
    171a:	ea 14       	cp	r14, r10
    171c:	fb 04       	cpc	r15, r11
    171e:	0c 05       	cpc	r16, r12
    1720:	1d 05       	cpc	r17, r13
    1722:	40 f4       	brcc	.+16     	; 0x1734 <__divsf3+0xc6>
    1724:	ee 0c       	add	r14, r14
    1726:	ff 1c       	adc	r15, r15
    1728:	00 1f       	adc	r16, r16
    172a:	11 1f       	adc	r17, r17
    172c:	21 50       	subi	r18, 0x01	; 1
    172e:	30 40       	sbci	r19, 0x00	; 0
    1730:	3c 87       	std	Y+12, r19	; 0x0c
    1732:	2b 87       	std	Y+11, r18	; 0x0b
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	50 e0       	ldi	r21, 0x00	; 0
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	a0 e0       	ldi	r26, 0x00	; 0
    1742:	b0 e4       	ldi	r27, 0x40	; 64
    1744:	6f e1       	ldi	r22, 0x1F	; 31
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	ea 14       	cp	r14, r10
    174a:	fb 04       	cpc	r15, r11
    174c:	0c 05       	cpc	r16, r12
    174e:	1d 05       	cpc	r17, r13
    1750:	40 f0       	brcs	.+16     	; 0x1762 <__divsf3+0xf4>
    1752:	28 2b       	or	r18, r24
    1754:	39 2b       	or	r19, r25
    1756:	4a 2b       	or	r20, r26
    1758:	5b 2b       	or	r21, r27
    175a:	ea 18       	sub	r14, r10
    175c:	fb 08       	sbc	r15, r11
    175e:	0c 09       	sbc	r16, r12
    1760:	1d 09       	sbc	r17, r13
    1762:	b6 95       	lsr	r27
    1764:	a7 95       	ror	r26
    1766:	97 95       	ror	r25
    1768:	87 95       	ror	r24
    176a:	ee 0c       	add	r14, r14
    176c:	ff 1c       	adc	r15, r15
    176e:	00 1f       	adc	r16, r16
    1770:	11 1f       	adc	r17, r17
    1772:	61 50       	subi	r22, 0x01	; 1
    1774:	70 40       	sbci	r23, 0x00	; 0
    1776:	41 f7       	brne	.-48     	; 0x1748 <__divsf3+0xda>
    1778:	da 01       	movw	r26, r20
    177a:	c9 01       	movw	r24, r18
    177c:	8f 77       	andi	r24, 0x7F	; 127
    177e:	90 70       	andi	r25, 0x00	; 0
    1780:	a0 70       	andi	r26, 0x00	; 0
    1782:	b0 70       	andi	r27, 0x00	; 0
    1784:	80 34       	cpi	r24, 0x40	; 64
    1786:	91 05       	cpc	r25, r1
    1788:	a1 05       	cpc	r26, r1
    178a:	b1 05       	cpc	r27, r1
    178c:	61 f4       	brne	.+24     	; 0x17a6 <__divsf3+0x138>
    178e:	27 fd       	sbrc	r18, 7
    1790:	0a c0       	rjmp	.+20     	; 0x17a6 <__divsf3+0x138>
    1792:	e1 14       	cp	r14, r1
    1794:	f1 04       	cpc	r15, r1
    1796:	01 05       	cpc	r16, r1
    1798:	11 05       	cpc	r17, r1
    179a:	29 f0       	breq	.+10     	; 0x17a6 <__divsf3+0x138>
    179c:	20 5c       	subi	r18, 0xC0	; 192
    179e:	3f 4f       	sbci	r19, 0xFF	; 255
    17a0:	4f 4f       	sbci	r20, 0xFF	; 255
    17a2:	5f 4f       	sbci	r21, 0xFF	; 255
    17a4:	20 78       	andi	r18, 0x80	; 128
    17a6:	2d 87       	std	Y+13, r18	; 0x0d
    17a8:	3e 87       	std	Y+14, r19	; 0x0e
    17aa:	4f 87       	std	Y+15, r20	; 0x0f
    17ac:	58 8b       	std	Y+16, r21	; 0x10
    17ae:	be 01       	movw	r22, r28
    17b0:	67 5f       	subi	r22, 0xF7	; 247
    17b2:	7f 4f       	sbci	r23, 0xFF	; 255
    17b4:	cb 01       	movw	r24, r22
    17b6:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__pack_f>
    17ba:	68 96       	adiw	r28, 0x18	; 24
    17bc:	ea e0       	ldi	r30, 0x0A	; 10
    17be:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__epilogue_restores__+0x10>

000017c2 <__gtsf2>:
    17c2:	a8 e1       	ldi	r26, 0x18	; 24
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e7 ee       	ldi	r30, 0xE7	; 231
    17c8:	fb e0       	ldi	r31, 0x0B	; 11
    17ca:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__prologue_saves__+0x18>
    17ce:	69 83       	std	Y+1, r22	; 0x01
    17d0:	7a 83       	std	Y+2, r23	; 0x02
    17d2:	8b 83       	std	Y+3, r24	; 0x03
    17d4:	9c 83       	std	Y+4, r25	; 0x04
    17d6:	2d 83       	std	Y+5, r18	; 0x05
    17d8:	3e 83       	std	Y+6, r19	; 0x06
    17da:	4f 83       	std	Y+7, r20	; 0x07
    17dc:	58 87       	std	Y+8, r21	; 0x08
    17de:	89 e0       	ldi	r24, 0x09	; 9
    17e0:	e8 2e       	mov	r14, r24
    17e2:	f1 2c       	mov	r15, r1
    17e4:	ec 0e       	add	r14, r28
    17e6:	fd 1e       	adc	r15, r29
    17e8:	b7 01       	movw	r22, r14
    17ea:	ce 01       	movw	r24, r28
    17ec:	01 96       	adiw	r24, 0x01	; 1
    17ee:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__unpack_f>
    17f2:	8e 01       	movw	r16, r28
    17f4:	0f 5e       	subi	r16, 0xEF	; 239
    17f6:	1f 4f       	sbci	r17, 0xFF	; 255
    17f8:	b8 01       	movw	r22, r16
    17fa:	ce 01       	movw	r24, r28
    17fc:	05 96       	adiw	r24, 0x05	; 5
    17fe:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__unpack_f>
    1802:	89 85       	ldd	r24, Y+9	; 0x09
    1804:	82 30       	cpi	r24, 0x02	; 2
    1806:	40 f0       	brcs	.+16     	; 0x1818 <__gtsf2+0x56>
    1808:	89 89       	ldd	r24, Y+17	; 0x11
    180a:	82 30       	cpi	r24, 0x02	; 2
    180c:	28 f0       	brcs	.+10     	; 0x1818 <__gtsf2+0x56>
    180e:	b8 01       	movw	r22, r16
    1810:	c7 01       	movw	r24, r14
    1812:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__fpcmp_parts_f>
    1816:	01 c0       	rjmp	.+2      	; 0x181a <__gtsf2+0x58>
    1818:	8f ef       	ldi	r24, 0xFF	; 255
    181a:	68 96       	adiw	r28, 0x18	; 24
    181c:	e6 e0       	ldi	r30, 0x06	; 6
    181e:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__epilogue_restores__+0x18>

00001822 <__gesf2>:
    1822:	a8 e1       	ldi	r26, 0x18	; 24
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e7 e1       	ldi	r30, 0x17	; 23
    1828:	fc e0       	ldi	r31, 0x0C	; 12
    182a:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__prologue_saves__+0x18>
    182e:	69 83       	std	Y+1, r22	; 0x01
    1830:	7a 83       	std	Y+2, r23	; 0x02
    1832:	8b 83       	std	Y+3, r24	; 0x03
    1834:	9c 83       	std	Y+4, r25	; 0x04
    1836:	2d 83       	std	Y+5, r18	; 0x05
    1838:	3e 83       	std	Y+6, r19	; 0x06
    183a:	4f 83       	std	Y+7, r20	; 0x07
    183c:	58 87       	std	Y+8, r21	; 0x08
    183e:	89 e0       	ldi	r24, 0x09	; 9
    1840:	e8 2e       	mov	r14, r24
    1842:	f1 2c       	mov	r15, r1
    1844:	ec 0e       	add	r14, r28
    1846:	fd 1e       	adc	r15, r29
    1848:	b7 01       	movw	r22, r14
    184a:	ce 01       	movw	r24, r28
    184c:	01 96       	adiw	r24, 0x01	; 1
    184e:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__unpack_f>
    1852:	8e 01       	movw	r16, r28
    1854:	0f 5e       	subi	r16, 0xEF	; 239
    1856:	1f 4f       	sbci	r17, 0xFF	; 255
    1858:	b8 01       	movw	r22, r16
    185a:	ce 01       	movw	r24, r28
    185c:	05 96       	adiw	r24, 0x05	; 5
    185e:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__unpack_f>
    1862:	89 85       	ldd	r24, Y+9	; 0x09
    1864:	82 30       	cpi	r24, 0x02	; 2
    1866:	40 f0       	brcs	.+16     	; 0x1878 <__gesf2+0x56>
    1868:	89 89       	ldd	r24, Y+17	; 0x11
    186a:	82 30       	cpi	r24, 0x02	; 2
    186c:	28 f0       	brcs	.+10     	; 0x1878 <__gesf2+0x56>
    186e:	b8 01       	movw	r22, r16
    1870:	c7 01       	movw	r24, r14
    1872:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__fpcmp_parts_f>
    1876:	01 c0       	rjmp	.+2      	; 0x187a <__gesf2+0x58>
    1878:	8f ef       	ldi	r24, 0xFF	; 255
    187a:	68 96       	adiw	r28, 0x18	; 24
    187c:	e6 e0       	ldi	r30, 0x06	; 6
    187e:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__epilogue_restores__+0x18>

00001882 <__ltsf2>:
    1882:	a8 e1       	ldi	r26, 0x18	; 24
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e7 e4       	ldi	r30, 0x47	; 71
    1888:	fc e0       	ldi	r31, 0x0C	; 12
    188a:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__prologue_saves__+0x18>
    188e:	69 83       	std	Y+1, r22	; 0x01
    1890:	7a 83       	std	Y+2, r23	; 0x02
    1892:	8b 83       	std	Y+3, r24	; 0x03
    1894:	9c 83       	std	Y+4, r25	; 0x04
    1896:	2d 83       	std	Y+5, r18	; 0x05
    1898:	3e 83       	std	Y+6, r19	; 0x06
    189a:	4f 83       	std	Y+7, r20	; 0x07
    189c:	58 87       	std	Y+8, r21	; 0x08
    189e:	89 e0       	ldi	r24, 0x09	; 9
    18a0:	e8 2e       	mov	r14, r24
    18a2:	f1 2c       	mov	r15, r1
    18a4:	ec 0e       	add	r14, r28
    18a6:	fd 1e       	adc	r15, r29
    18a8:	b7 01       	movw	r22, r14
    18aa:	ce 01       	movw	r24, r28
    18ac:	01 96       	adiw	r24, 0x01	; 1
    18ae:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__unpack_f>
    18b2:	8e 01       	movw	r16, r28
    18b4:	0f 5e       	subi	r16, 0xEF	; 239
    18b6:	1f 4f       	sbci	r17, 0xFF	; 255
    18b8:	b8 01       	movw	r22, r16
    18ba:	ce 01       	movw	r24, r28
    18bc:	05 96       	adiw	r24, 0x05	; 5
    18be:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__unpack_f>
    18c2:	89 85       	ldd	r24, Y+9	; 0x09
    18c4:	82 30       	cpi	r24, 0x02	; 2
    18c6:	40 f0       	brcs	.+16     	; 0x18d8 <__ltsf2+0x56>
    18c8:	89 89       	ldd	r24, Y+17	; 0x11
    18ca:	82 30       	cpi	r24, 0x02	; 2
    18cc:	28 f0       	brcs	.+10     	; 0x18d8 <__ltsf2+0x56>
    18ce:	b8 01       	movw	r22, r16
    18d0:	c7 01       	movw	r24, r14
    18d2:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__fpcmp_parts_f>
    18d6:	01 c0       	rjmp	.+2      	; 0x18da <__ltsf2+0x58>
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	68 96       	adiw	r28, 0x18	; 24
    18dc:	e6 e0       	ldi	r30, 0x06	; 6
    18de:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__epilogue_restores__+0x18>

000018e2 <__fixsfsi>:
    18e2:	ac e0       	ldi	r26, 0x0C	; 12
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e7 e7       	ldi	r30, 0x77	; 119
    18e8:	fc e0       	ldi	r31, 0x0C	; 12
    18ea:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__prologue_saves__+0x20>
    18ee:	69 83       	std	Y+1, r22	; 0x01
    18f0:	7a 83       	std	Y+2, r23	; 0x02
    18f2:	8b 83       	std	Y+3, r24	; 0x03
    18f4:	9c 83       	std	Y+4, r25	; 0x04
    18f6:	be 01       	movw	r22, r28
    18f8:	6b 5f       	subi	r22, 0xFB	; 251
    18fa:	7f 4f       	sbci	r23, 0xFF	; 255
    18fc:	ce 01       	movw	r24, r28
    18fe:	01 96       	adiw	r24, 0x01	; 1
    1900:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__unpack_f>
    1904:	8d 81       	ldd	r24, Y+5	; 0x05
    1906:	82 30       	cpi	r24, 0x02	; 2
    1908:	61 f1       	breq	.+88     	; 0x1962 <__fixsfsi+0x80>
    190a:	82 30       	cpi	r24, 0x02	; 2
    190c:	50 f1       	brcs	.+84     	; 0x1962 <__fixsfsi+0x80>
    190e:	84 30       	cpi	r24, 0x04	; 4
    1910:	21 f4       	brne	.+8      	; 0x191a <__fixsfsi+0x38>
    1912:	8e 81       	ldd	r24, Y+6	; 0x06
    1914:	88 23       	and	r24, r24
    1916:	51 f1       	breq	.+84     	; 0x196c <__fixsfsi+0x8a>
    1918:	2e c0       	rjmp	.+92     	; 0x1976 <__fixsfsi+0x94>
    191a:	2f 81       	ldd	r18, Y+7	; 0x07
    191c:	38 85       	ldd	r19, Y+8	; 0x08
    191e:	37 fd       	sbrc	r19, 7
    1920:	20 c0       	rjmp	.+64     	; 0x1962 <__fixsfsi+0x80>
    1922:	6e 81       	ldd	r22, Y+6	; 0x06
    1924:	2f 31       	cpi	r18, 0x1F	; 31
    1926:	31 05       	cpc	r19, r1
    1928:	1c f0       	brlt	.+6      	; 0x1930 <__fixsfsi+0x4e>
    192a:	66 23       	and	r22, r22
    192c:	f9 f0       	breq	.+62     	; 0x196c <__fixsfsi+0x8a>
    192e:	23 c0       	rjmp	.+70     	; 0x1976 <__fixsfsi+0x94>
    1930:	8e e1       	ldi	r24, 0x1E	; 30
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	82 1b       	sub	r24, r18
    1936:	93 0b       	sbc	r25, r19
    1938:	29 85       	ldd	r18, Y+9	; 0x09
    193a:	3a 85       	ldd	r19, Y+10	; 0x0a
    193c:	4b 85       	ldd	r20, Y+11	; 0x0b
    193e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1940:	04 c0       	rjmp	.+8      	; 0x194a <__fixsfsi+0x68>
    1942:	56 95       	lsr	r21
    1944:	47 95       	ror	r20
    1946:	37 95       	ror	r19
    1948:	27 95       	ror	r18
    194a:	8a 95       	dec	r24
    194c:	d2 f7       	brpl	.-12     	; 0x1942 <__fixsfsi+0x60>
    194e:	66 23       	and	r22, r22
    1950:	b1 f0       	breq	.+44     	; 0x197e <__fixsfsi+0x9c>
    1952:	50 95       	com	r21
    1954:	40 95       	com	r20
    1956:	30 95       	com	r19
    1958:	21 95       	neg	r18
    195a:	3f 4f       	sbci	r19, 0xFF	; 255
    195c:	4f 4f       	sbci	r20, 0xFF	; 255
    195e:	5f 4f       	sbci	r21, 0xFF	; 255
    1960:	0e c0       	rjmp	.+28     	; 0x197e <__fixsfsi+0x9c>
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e0       	ldi	r20, 0x00	; 0
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	09 c0       	rjmp	.+18     	; 0x197e <__fixsfsi+0x9c>
    196c:	2f ef       	ldi	r18, 0xFF	; 255
    196e:	3f ef       	ldi	r19, 0xFF	; 255
    1970:	4f ef       	ldi	r20, 0xFF	; 255
    1972:	5f e7       	ldi	r21, 0x7F	; 127
    1974:	04 c0       	rjmp	.+8      	; 0x197e <__fixsfsi+0x9c>
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e0       	ldi	r20, 0x00	; 0
    197c:	50 e8       	ldi	r21, 0x80	; 128
    197e:	b9 01       	movw	r22, r18
    1980:	ca 01       	movw	r24, r20
    1982:	2c 96       	adiw	r28, 0x0c	; 12
    1984:	e2 e0       	ldi	r30, 0x02	; 2
    1986:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__epilogue_restores__+0x20>

0000198a <__floatunsisf>:
    198a:	a8 e0       	ldi	r26, 0x08	; 8
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	eb ec       	ldi	r30, 0xCB	; 203
    1990:	fc e0       	ldi	r31, 0x0C	; 12
    1992:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__prologue_saves__+0x14>
    1996:	7b 01       	movw	r14, r22
    1998:	8c 01       	movw	r16, r24
    199a:	61 15       	cp	r22, r1
    199c:	71 05       	cpc	r23, r1
    199e:	81 05       	cpc	r24, r1
    19a0:	91 05       	cpc	r25, r1
    19a2:	19 f4       	brne	.+6      	; 0x19aa <__floatunsisf+0x20>
    19a4:	82 e0       	ldi	r24, 0x02	; 2
    19a6:	89 83       	std	Y+1, r24	; 0x01
    19a8:	60 c0       	rjmp	.+192    	; 0x1a6a <__floatunsisf+0xe0>
    19aa:	83 e0       	ldi	r24, 0x03	; 3
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	8e e1       	ldi	r24, 0x1E	; 30
    19b0:	c8 2e       	mov	r12, r24
    19b2:	d1 2c       	mov	r13, r1
    19b4:	dc 82       	std	Y+4, r13	; 0x04
    19b6:	cb 82       	std	Y+3, r12	; 0x03
    19b8:	ed 82       	std	Y+5, r14	; 0x05
    19ba:	fe 82       	std	Y+6, r15	; 0x06
    19bc:	0f 83       	std	Y+7, r16	; 0x07
    19be:	18 87       	std	Y+8, r17	; 0x08
    19c0:	c8 01       	movw	r24, r16
    19c2:	b7 01       	movw	r22, r14
    19c4:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__clzsi2>
    19c8:	bc 01       	movw	r22, r24
    19ca:	61 50       	subi	r22, 0x01	; 1
    19cc:	70 40       	sbci	r23, 0x00	; 0
    19ce:	77 ff       	sbrs	r23, 7
    19d0:	39 c0       	rjmp	.+114    	; 0x1a44 <__floatunsisf+0xba>
    19d2:	ee 27       	eor	r30, r30
    19d4:	ff 27       	eor	r31, r31
    19d6:	e6 1b       	sub	r30, r22
    19d8:	f7 0b       	sbc	r31, r23
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e0       	ldi	r20, 0x00	; 0
    19e0:	50 e0       	ldi	r21, 0x00	; 0
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	a0 e0       	ldi	r26, 0x00	; 0
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	0e 2e       	mov	r0, r30
    19ec:	04 c0       	rjmp	.+8      	; 0x19f6 <__floatunsisf+0x6c>
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	aa 1f       	adc	r26, r26
    19f4:	bb 1f       	adc	r27, r27
    19f6:	0a 94       	dec	r0
    19f8:	d2 f7       	brpl	.-12     	; 0x19ee <__floatunsisf+0x64>
    19fa:	01 97       	sbiw	r24, 0x01	; 1
    19fc:	a1 09       	sbc	r26, r1
    19fe:	b1 09       	sbc	r27, r1
    1a00:	8e 21       	and	r24, r14
    1a02:	9f 21       	and	r25, r15
    1a04:	a0 23       	and	r26, r16
    1a06:	b1 23       	and	r27, r17
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	a1 05       	cpc	r26, r1
    1a0c:	b1 05       	cpc	r27, r1
    1a0e:	21 f0       	breq	.+8      	; 0x1a18 <__floatunsisf+0x8e>
    1a10:	21 e0       	ldi	r18, 0x01	; 1
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e0       	ldi	r20, 0x00	; 0
    1a16:	50 e0       	ldi	r21, 0x00	; 0
    1a18:	04 c0       	rjmp	.+8      	; 0x1a22 <__floatunsisf+0x98>
    1a1a:	16 95       	lsr	r17
    1a1c:	07 95       	ror	r16
    1a1e:	f7 94       	ror	r15
    1a20:	e7 94       	ror	r14
    1a22:	ea 95       	dec	r30
    1a24:	d2 f7       	brpl	.-12     	; 0x1a1a <__floatunsisf+0x90>
    1a26:	2e 29       	or	r18, r14
    1a28:	3f 29       	or	r19, r15
    1a2a:	40 2b       	or	r20, r16
    1a2c:	51 2b       	or	r21, r17
    1a2e:	2d 83       	std	Y+5, r18	; 0x05
    1a30:	3e 83       	std	Y+6, r19	; 0x06
    1a32:	4f 83       	std	Y+7, r20	; 0x07
    1a34:	58 87       	std	Y+8, r21	; 0x08
    1a36:	8e e1       	ldi	r24, 0x1E	; 30
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	86 1b       	sub	r24, r22
    1a3c:	97 0b       	sbc	r25, r23
    1a3e:	9c 83       	std	Y+4, r25	; 0x04
    1a40:	8b 83       	std	Y+3, r24	; 0x03
    1a42:	13 c0       	rjmp	.+38     	; 0x1a6a <__floatunsisf+0xe0>
    1a44:	61 15       	cp	r22, r1
    1a46:	71 05       	cpc	r23, r1
    1a48:	81 f0       	breq	.+32     	; 0x1a6a <__floatunsisf+0xe0>
    1a4a:	06 2e       	mov	r0, r22
    1a4c:	04 c0       	rjmp	.+8      	; 0x1a56 <__floatunsisf+0xcc>
    1a4e:	ee 0c       	add	r14, r14
    1a50:	ff 1c       	adc	r15, r15
    1a52:	00 1f       	adc	r16, r16
    1a54:	11 1f       	adc	r17, r17
    1a56:	0a 94       	dec	r0
    1a58:	d2 f7       	brpl	.-12     	; 0x1a4e <__floatunsisf+0xc4>
    1a5a:	ed 82       	std	Y+5, r14	; 0x05
    1a5c:	fe 82       	std	Y+6, r15	; 0x06
    1a5e:	0f 83       	std	Y+7, r16	; 0x07
    1a60:	18 87       	std	Y+8, r17	; 0x08
    1a62:	c6 1a       	sub	r12, r22
    1a64:	d7 0a       	sbc	r13, r23
    1a66:	dc 82       	std	Y+4, r13	; 0x04
    1a68:	cb 82       	std	Y+3, r12	; 0x03
    1a6a:	1a 82       	std	Y+2, r1	; 0x02
    1a6c:	ce 01       	movw	r24, r28
    1a6e:	01 96       	adiw	r24, 0x01	; 1
    1a70:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__pack_f>
    1a74:	28 96       	adiw	r28, 0x08	; 8
    1a76:	e8 e0       	ldi	r30, 0x08	; 8
    1a78:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__epilogue_restores__+0x14>

00001a7c <__clzsi2>:
    1a7c:	ef 92       	push	r14
    1a7e:	ff 92       	push	r15
    1a80:	0f 93       	push	r16
    1a82:	1f 93       	push	r17
    1a84:	7b 01       	movw	r14, r22
    1a86:	8c 01       	movw	r16, r24
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	e8 16       	cp	r14, r24
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	f8 06       	cpc	r15, r24
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	08 07       	cpc	r16, r24
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	18 07       	cpc	r17, r24
    1a98:	88 f4       	brcc	.+34     	; 0x1abc <__clzsi2+0x40>
    1a9a:	8f ef       	ldi	r24, 0xFF	; 255
    1a9c:	e8 16       	cp	r14, r24
    1a9e:	f1 04       	cpc	r15, r1
    1aa0:	01 05       	cpc	r16, r1
    1aa2:	11 05       	cpc	r17, r1
    1aa4:	31 f0       	breq	.+12     	; 0x1ab2 <__clzsi2+0x36>
    1aa6:	28 f0       	brcs	.+10     	; 0x1ab2 <__clzsi2+0x36>
    1aa8:	88 e0       	ldi	r24, 0x08	; 8
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	a0 e0       	ldi	r26, 0x00	; 0
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	17 c0       	rjmp	.+46     	; 0x1ae0 <__clzsi2+0x64>
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	a0 e0       	ldi	r26, 0x00	; 0
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	12 c0       	rjmp	.+36     	; 0x1ae0 <__clzsi2+0x64>
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	e8 16       	cp	r14, r24
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	f8 06       	cpc	r15, r24
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	08 07       	cpc	r16, r24
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	18 07       	cpc	r17, r24
    1acc:	28 f0       	brcs	.+10     	; 0x1ad8 <__clzsi2+0x5c>
    1ace:	88 e1       	ldi	r24, 0x18	; 24
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	a0 e0       	ldi	r26, 0x00	; 0
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	04 c0       	rjmp	.+8      	; 0x1ae0 <__clzsi2+0x64>
    1ad8:	80 e1       	ldi	r24, 0x10	; 16
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	a0 e0       	ldi	r26, 0x00	; 0
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	20 e2       	ldi	r18, 0x20	; 32
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e0       	ldi	r20, 0x00	; 0
    1ae6:	50 e0       	ldi	r21, 0x00	; 0
    1ae8:	28 1b       	sub	r18, r24
    1aea:	39 0b       	sbc	r19, r25
    1aec:	4a 0b       	sbc	r20, r26
    1aee:	5b 0b       	sbc	r21, r27
    1af0:	04 c0       	rjmp	.+8      	; 0x1afa <__clzsi2+0x7e>
    1af2:	16 95       	lsr	r17
    1af4:	07 95       	ror	r16
    1af6:	f7 94       	ror	r15
    1af8:	e7 94       	ror	r14
    1afa:	8a 95       	dec	r24
    1afc:	d2 f7       	brpl	.-12     	; 0x1af2 <__clzsi2+0x76>
    1afe:	f7 01       	movw	r30, r14
    1b00:	e8 58       	subi	r30, 0x88	; 136
    1b02:	ff 4f       	sbci	r31, 0xFF	; 255
    1b04:	80 81       	ld	r24, Z
    1b06:	28 1b       	sub	r18, r24
    1b08:	31 09       	sbc	r19, r1
    1b0a:	41 09       	sbc	r20, r1
    1b0c:	51 09       	sbc	r21, r1
    1b0e:	c9 01       	movw	r24, r18
    1b10:	1f 91       	pop	r17
    1b12:	0f 91       	pop	r16
    1b14:	ff 90       	pop	r15
    1b16:	ef 90       	pop	r14
    1b18:	08 95       	ret

00001b1a <__pack_f>:
    1b1a:	df 92       	push	r13
    1b1c:	ef 92       	push	r14
    1b1e:	ff 92       	push	r15
    1b20:	0f 93       	push	r16
    1b22:	1f 93       	push	r17
    1b24:	fc 01       	movw	r30, r24
    1b26:	e4 80       	ldd	r14, Z+4	; 0x04
    1b28:	f5 80       	ldd	r15, Z+5	; 0x05
    1b2a:	06 81       	ldd	r16, Z+6	; 0x06
    1b2c:	17 81       	ldd	r17, Z+7	; 0x07
    1b2e:	d1 80       	ldd	r13, Z+1	; 0x01
    1b30:	80 81       	ld	r24, Z
    1b32:	82 30       	cpi	r24, 0x02	; 2
    1b34:	48 f4       	brcc	.+18     	; 0x1b48 <__pack_f+0x2e>
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	a0 e1       	ldi	r26, 0x10	; 16
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e8 2a       	or	r14, r24
    1b40:	f9 2a       	or	r15, r25
    1b42:	0a 2b       	or	r16, r26
    1b44:	1b 2b       	or	r17, r27
    1b46:	a5 c0       	rjmp	.+330    	; 0x1c92 <__pack_f+0x178>
    1b48:	84 30       	cpi	r24, 0x04	; 4
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <__pack_f+0x34>
    1b4c:	9f c0       	rjmp	.+318    	; 0x1c8c <__pack_f+0x172>
    1b4e:	82 30       	cpi	r24, 0x02	; 2
    1b50:	21 f4       	brne	.+8      	; 0x1b5a <__pack_f+0x40>
    1b52:	ee 24       	eor	r14, r14
    1b54:	ff 24       	eor	r15, r15
    1b56:	87 01       	movw	r16, r14
    1b58:	05 c0       	rjmp	.+10     	; 0x1b64 <__pack_f+0x4a>
    1b5a:	e1 14       	cp	r14, r1
    1b5c:	f1 04       	cpc	r15, r1
    1b5e:	01 05       	cpc	r16, r1
    1b60:	11 05       	cpc	r17, r1
    1b62:	19 f4       	brne	.+6      	; 0x1b6a <__pack_f+0x50>
    1b64:	e0 e0       	ldi	r30, 0x00	; 0
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	96 c0       	rjmp	.+300    	; 0x1c96 <__pack_f+0x17c>
    1b6a:	62 81       	ldd	r22, Z+2	; 0x02
    1b6c:	73 81       	ldd	r23, Z+3	; 0x03
    1b6e:	9f ef       	ldi	r25, 0xFF	; 255
    1b70:	62 38       	cpi	r22, 0x82	; 130
    1b72:	79 07       	cpc	r23, r25
    1b74:	0c f0       	brlt	.+2      	; 0x1b78 <__pack_f+0x5e>
    1b76:	5b c0       	rjmp	.+182    	; 0x1c2e <__pack_f+0x114>
    1b78:	22 e8       	ldi	r18, 0x82	; 130
    1b7a:	3f ef       	ldi	r19, 0xFF	; 255
    1b7c:	26 1b       	sub	r18, r22
    1b7e:	37 0b       	sbc	r19, r23
    1b80:	2a 31       	cpi	r18, 0x1A	; 26
    1b82:	31 05       	cpc	r19, r1
    1b84:	2c f0       	brlt	.+10     	; 0x1b90 <__pack_f+0x76>
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	50 e0       	ldi	r21, 0x00	; 0
    1b8e:	2a c0       	rjmp	.+84     	; 0x1be4 <__pack_f+0xca>
    1b90:	b8 01       	movw	r22, r16
    1b92:	a7 01       	movw	r20, r14
    1b94:	02 2e       	mov	r0, r18
    1b96:	04 c0       	rjmp	.+8      	; 0x1ba0 <__pack_f+0x86>
    1b98:	76 95       	lsr	r23
    1b9a:	67 95       	ror	r22
    1b9c:	57 95       	ror	r21
    1b9e:	47 95       	ror	r20
    1ba0:	0a 94       	dec	r0
    1ba2:	d2 f7       	brpl	.-12     	; 0x1b98 <__pack_f+0x7e>
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	a0 e0       	ldi	r26, 0x00	; 0
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	04 c0       	rjmp	.+8      	; 0x1bb6 <__pack_f+0x9c>
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	aa 1f       	adc	r26, r26
    1bb4:	bb 1f       	adc	r27, r27
    1bb6:	2a 95       	dec	r18
    1bb8:	d2 f7       	brpl	.-12     	; 0x1bae <__pack_f+0x94>
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	a1 09       	sbc	r26, r1
    1bbe:	b1 09       	sbc	r27, r1
    1bc0:	8e 21       	and	r24, r14
    1bc2:	9f 21       	and	r25, r15
    1bc4:	a0 23       	and	r26, r16
    1bc6:	b1 23       	and	r27, r17
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	a1 05       	cpc	r26, r1
    1bcc:	b1 05       	cpc	r27, r1
    1bce:	21 f0       	breq	.+8      	; 0x1bd8 <__pack_f+0xbe>
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	a0 e0       	ldi	r26, 0x00	; 0
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	9a 01       	movw	r18, r20
    1bda:	ab 01       	movw	r20, r22
    1bdc:	28 2b       	or	r18, r24
    1bde:	39 2b       	or	r19, r25
    1be0:	4a 2b       	or	r20, r26
    1be2:	5b 2b       	or	r21, r27
    1be4:	da 01       	movw	r26, r20
    1be6:	c9 01       	movw	r24, r18
    1be8:	8f 77       	andi	r24, 0x7F	; 127
    1bea:	90 70       	andi	r25, 0x00	; 0
    1bec:	a0 70       	andi	r26, 0x00	; 0
    1bee:	b0 70       	andi	r27, 0x00	; 0
    1bf0:	80 34       	cpi	r24, 0x40	; 64
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	a1 05       	cpc	r26, r1
    1bf6:	b1 05       	cpc	r27, r1
    1bf8:	39 f4       	brne	.+14     	; 0x1c08 <__pack_f+0xee>
    1bfa:	27 ff       	sbrs	r18, 7
    1bfc:	09 c0       	rjmp	.+18     	; 0x1c10 <__pack_f+0xf6>
    1bfe:	20 5c       	subi	r18, 0xC0	; 192
    1c00:	3f 4f       	sbci	r19, 0xFF	; 255
    1c02:	4f 4f       	sbci	r20, 0xFF	; 255
    1c04:	5f 4f       	sbci	r21, 0xFF	; 255
    1c06:	04 c0       	rjmp	.+8      	; 0x1c10 <__pack_f+0xf6>
    1c08:	21 5c       	subi	r18, 0xC1	; 193
    1c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0c:	4f 4f       	sbci	r20, 0xFF	; 255
    1c0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c10:	e0 e0       	ldi	r30, 0x00	; 0
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	20 30       	cpi	r18, 0x00	; 0
    1c16:	a0 e0       	ldi	r26, 0x00	; 0
    1c18:	3a 07       	cpc	r19, r26
    1c1a:	a0 e0       	ldi	r26, 0x00	; 0
    1c1c:	4a 07       	cpc	r20, r26
    1c1e:	a0 e4       	ldi	r26, 0x40	; 64
    1c20:	5a 07       	cpc	r21, r26
    1c22:	10 f0       	brcs	.+4      	; 0x1c28 <__pack_f+0x10e>
    1c24:	e1 e0       	ldi	r30, 0x01	; 1
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	79 01       	movw	r14, r18
    1c2a:	8a 01       	movw	r16, r20
    1c2c:	27 c0       	rjmp	.+78     	; 0x1c7c <__pack_f+0x162>
    1c2e:	60 38       	cpi	r22, 0x80	; 128
    1c30:	71 05       	cpc	r23, r1
    1c32:	64 f5       	brge	.+88     	; 0x1c8c <__pack_f+0x172>
    1c34:	fb 01       	movw	r30, r22
    1c36:	e1 58       	subi	r30, 0x81	; 129
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	d8 01       	movw	r26, r16
    1c3c:	c7 01       	movw	r24, r14
    1c3e:	8f 77       	andi	r24, 0x7F	; 127
    1c40:	90 70       	andi	r25, 0x00	; 0
    1c42:	a0 70       	andi	r26, 0x00	; 0
    1c44:	b0 70       	andi	r27, 0x00	; 0
    1c46:	80 34       	cpi	r24, 0x40	; 64
    1c48:	91 05       	cpc	r25, r1
    1c4a:	a1 05       	cpc	r26, r1
    1c4c:	b1 05       	cpc	r27, r1
    1c4e:	39 f4       	brne	.+14     	; 0x1c5e <__pack_f+0x144>
    1c50:	e7 fe       	sbrs	r14, 7
    1c52:	0d c0       	rjmp	.+26     	; 0x1c6e <__pack_f+0x154>
    1c54:	80 e4       	ldi	r24, 0x40	; 64
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	a0 e0       	ldi	r26, 0x00	; 0
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	04 c0       	rjmp	.+8      	; 0x1c66 <__pack_f+0x14c>
    1c5e:	8f e3       	ldi	r24, 0x3F	; 63
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	a0 e0       	ldi	r26, 0x00	; 0
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e8 0e       	add	r14, r24
    1c68:	f9 1e       	adc	r15, r25
    1c6a:	0a 1f       	adc	r16, r26
    1c6c:	1b 1f       	adc	r17, r27
    1c6e:	17 ff       	sbrs	r17, 7
    1c70:	05 c0       	rjmp	.+10     	; 0x1c7c <__pack_f+0x162>
    1c72:	16 95       	lsr	r17
    1c74:	07 95       	ror	r16
    1c76:	f7 94       	ror	r15
    1c78:	e7 94       	ror	r14
    1c7a:	31 96       	adiw	r30, 0x01	; 1
    1c7c:	87 e0       	ldi	r24, 0x07	; 7
    1c7e:	16 95       	lsr	r17
    1c80:	07 95       	ror	r16
    1c82:	f7 94       	ror	r15
    1c84:	e7 94       	ror	r14
    1c86:	8a 95       	dec	r24
    1c88:	d1 f7       	brne	.-12     	; 0x1c7e <__pack_f+0x164>
    1c8a:	05 c0       	rjmp	.+10     	; 0x1c96 <__pack_f+0x17c>
    1c8c:	ee 24       	eor	r14, r14
    1c8e:	ff 24       	eor	r15, r15
    1c90:	87 01       	movw	r16, r14
    1c92:	ef ef       	ldi	r30, 0xFF	; 255
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	6e 2f       	mov	r22, r30
    1c98:	67 95       	ror	r22
    1c9a:	66 27       	eor	r22, r22
    1c9c:	67 95       	ror	r22
    1c9e:	90 2f       	mov	r25, r16
    1ca0:	9f 77       	andi	r25, 0x7F	; 127
    1ca2:	d7 94       	ror	r13
    1ca4:	dd 24       	eor	r13, r13
    1ca6:	d7 94       	ror	r13
    1ca8:	8e 2f       	mov	r24, r30
    1caa:	86 95       	lsr	r24
    1cac:	49 2f       	mov	r20, r25
    1cae:	46 2b       	or	r20, r22
    1cb0:	58 2f       	mov	r21, r24
    1cb2:	5d 29       	or	r21, r13
    1cb4:	b7 01       	movw	r22, r14
    1cb6:	ca 01       	movw	r24, r20
    1cb8:	1f 91       	pop	r17
    1cba:	0f 91       	pop	r16
    1cbc:	ff 90       	pop	r15
    1cbe:	ef 90       	pop	r14
    1cc0:	df 90       	pop	r13
    1cc2:	08 95       	ret

00001cc4 <__unpack_f>:
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	db 01       	movw	r26, r22
    1cc8:	40 81       	ld	r20, Z
    1cca:	51 81       	ldd	r21, Z+1	; 0x01
    1ccc:	22 81       	ldd	r18, Z+2	; 0x02
    1cce:	62 2f       	mov	r22, r18
    1cd0:	6f 77       	andi	r22, 0x7F	; 127
    1cd2:	70 e0       	ldi	r23, 0x00	; 0
    1cd4:	22 1f       	adc	r18, r18
    1cd6:	22 27       	eor	r18, r18
    1cd8:	22 1f       	adc	r18, r18
    1cda:	93 81       	ldd	r25, Z+3	; 0x03
    1cdc:	89 2f       	mov	r24, r25
    1cde:	88 0f       	add	r24, r24
    1ce0:	82 2b       	or	r24, r18
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	99 27       	eor	r25, r25
    1cea:	99 1f       	adc	r25, r25
    1cec:	11 96       	adiw	r26, 0x01	; 1
    1cee:	9c 93       	st	X, r25
    1cf0:	11 97       	sbiw	r26, 0x01	; 1
    1cf2:	21 15       	cp	r18, r1
    1cf4:	31 05       	cpc	r19, r1
    1cf6:	a9 f5       	brne	.+106    	; 0x1d62 <__unpack_f+0x9e>
    1cf8:	41 15       	cp	r20, r1
    1cfa:	51 05       	cpc	r21, r1
    1cfc:	61 05       	cpc	r22, r1
    1cfe:	71 05       	cpc	r23, r1
    1d00:	11 f4       	brne	.+4      	; 0x1d06 <__unpack_f+0x42>
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	37 c0       	rjmp	.+110    	; 0x1d74 <__unpack_f+0xb0>
    1d06:	82 e8       	ldi	r24, 0x82	; 130
    1d08:	9f ef       	ldi	r25, 0xFF	; 255
    1d0a:	13 96       	adiw	r26, 0x03	; 3
    1d0c:	9c 93       	st	X, r25
    1d0e:	8e 93       	st	-X, r24
    1d10:	12 97       	sbiw	r26, 0x02	; 2
    1d12:	9a 01       	movw	r18, r20
    1d14:	ab 01       	movw	r20, r22
    1d16:	67 e0       	ldi	r22, 0x07	; 7
    1d18:	22 0f       	add	r18, r18
    1d1a:	33 1f       	adc	r19, r19
    1d1c:	44 1f       	adc	r20, r20
    1d1e:	55 1f       	adc	r21, r21
    1d20:	6a 95       	dec	r22
    1d22:	d1 f7       	brne	.-12     	; 0x1d18 <__unpack_f+0x54>
    1d24:	83 e0       	ldi	r24, 0x03	; 3
    1d26:	8c 93       	st	X, r24
    1d28:	0d c0       	rjmp	.+26     	; 0x1d44 <__unpack_f+0x80>
    1d2a:	22 0f       	add	r18, r18
    1d2c:	33 1f       	adc	r19, r19
    1d2e:	44 1f       	adc	r20, r20
    1d30:	55 1f       	adc	r21, r21
    1d32:	12 96       	adiw	r26, 0x02	; 2
    1d34:	8d 91       	ld	r24, X+
    1d36:	9c 91       	ld	r25, X
    1d38:	13 97       	sbiw	r26, 0x03	; 3
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	13 96       	adiw	r26, 0x03	; 3
    1d3e:	9c 93       	st	X, r25
    1d40:	8e 93       	st	-X, r24
    1d42:	12 97       	sbiw	r26, 0x02	; 2
    1d44:	20 30       	cpi	r18, 0x00	; 0
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	38 07       	cpc	r19, r24
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	48 07       	cpc	r20, r24
    1d4e:	80 e4       	ldi	r24, 0x40	; 64
    1d50:	58 07       	cpc	r21, r24
    1d52:	58 f3       	brcs	.-42     	; 0x1d2a <__unpack_f+0x66>
    1d54:	14 96       	adiw	r26, 0x04	; 4
    1d56:	2d 93       	st	X+, r18
    1d58:	3d 93       	st	X+, r19
    1d5a:	4d 93       	st	X+, r20
    1d5c:	5c 93       	st	X, r21
    1d5e:	17 97       	sbiw	r26, 0x07	; 7
    1d60:	08 95       	ret
    1d62:	2f 3f       	cpi	r18, 0xFF	; 255
    1d64:	31 05       	cpc	r19, r1
    1d66:	79 f4       	brne	.+30     	; 0x1d86 <__unpack_f+0xc2>
    1d68:	41 15       	cp	r20, r1
    1d6a:	51 05       	cpc	r21, r1
    1d6c:	61 05       	cpc	r22, r1
    1d6e:	71 05       	cpc	r23, r1
    1d70:	19 f4       	brne	.+6      	; 0x1d78 <__unpack_f+0xb4>
    1d72:	84 e0       	ldi	r24, 0x04	; 4
    1d74:	8c 93       	st	X, r24
    1d76:	08 95       	ret
    1d78:	64 ff       	sbrs	r22, 4
    1d7a:	03 c0       	rjmp	.+6      	; 0x1d82 <__unpack_f+0xbe>
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	8c 93       	st	X, r24
    1d80:	12 c0       	rjmp	.+36     	; 0x1da6 <__unpack_f+0xe2>
    1d82:	1c 92       	st	X, r1
    1d84:	10 c0       	rjmp	.+32     	; 0x1da6 <__unpack_f+0xe2>
    1d86:	2f 57       	subi	r18, 0x7F	; 127
    1d88:	30 40       	sbci	r19, 0x00	; 0
    1d8a:	13 96       	adiw	r26, 0x03	; 3
    1d8c:	3c 93       	st	X, r19
    1d8e:	2e 93       	st	-X, r18
    1d90:	12 97       	sbiw	r26, 0x02	; 2
    1d92:	83 e0       	ldi	r24, 0x03	; 3
    1d94:	8c 93       	st	X, r24
    1d96:	87 e0       	ldi	r24, 0x07	; 7
    1d98:	44 0f       	add	r20, r20
    1d9a:	55 1f       	adc	r21, r21
    1d9c:	66 1f       	adc	r22, r22
    1d9e:	77 1f       	adc	r23, r23
    1da0:	8a 95       	dec	r24
    1da2:	d1 f7       	brne	.-12     	; 0x1d98 <__unpack_f+0xd4>
    1da4:	70 64       	ori	r23, 0x40	; 64
    1da6:	14 96       	adiw	r26, 0x04	; 4
    1da8:	4d 93       	st	X+, r20
    1daa:	5d 93       	st	X+, r21
    1dac:	6d 93       	st	X+, r22
    1dae:	7c 93       	st	X, r23
    1db0:	17 97       	sbiw	r26, 0x07	; 7
    1db2:	08 95       	ret

00001db4 <__fpcmp_parts_f>:
    1db4:	1f 93       	push	r17
    1db6:	dc 01       	movw	r26, r24
    1db8:	fb 01       	movw	r30, r22
    1dba:	9c 91       	ld	r25, X
    1dbc:	92 30       	cpi	r25, 0x02	; 2
    1dbe:	08 f4       	brcc	.+2      	; 0x1dc2 <__fpcmp_parts_f+0xe>
    1dc0:	47 c0       	rjmp	.+142    	; 0x1e50 <__fpcmp_parts_f+0x9c>
    1dc2:	80 81       	ld	r24, Z
    1dc4:	82 30       	cpi	r24, 0x02	; 2
    1dc6:	08 f4       	brcc	.+2      	; 0x1dca <__fpcmp_parts_f+0x16>
    1dc8:	43 c0       	rjmp	.+134    	; 0x1e50 <__fpcmp_parts_f+0x9c>
    1dca:	94 30       	cpi	r25, 0x04	; 4
    1dcc:	51 f4       	brne	.+20     	; 0x1de2 <__fpcmp_parts_f+0x2e>
    1dce:	11 96       	adiw	r26, 0x01	; 1
    1dd0:	1c 91       	ld	r17, X
    1dd2:	84 30       	cpi	r24, 0x04	; 4
    1dd4:	99 f5       	brne	.+102    	; 0x1e3c <__fpcmp_parts_f+0x88>
    1dd6:	81 81       	ldd	r24, Z+1	; 0x01
    1dd8:	68 2f       	mov	r22, r24
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	61 1b       	sub	r22, r17
    1dde:	71 09       	sbc	r23, r1
    1de0:	3f c0       	rjmp	.+126    	; 0x1e60 <__fpcmp_parts_f+0xac>
    1de2:	84 30       	cpi	r24, 0x04	; 4
    1de4:	21 f0       	breq	.+8      	; 0x1dee <__fpcmp_parts_f+0x3a>
    1de6:	92 30       	cpi	r25, 0x02	; 2
    1de8:	31 f4       	brne	.+12     	; 0x1df6 <__fpcmp_parts_f+0x42>
    1dea:	82 30       	cpi	r24, 0x02	; 2
    1dec:	b9 f1       	breq	.+110    	; 0x1e5c <__fpcmp_parts_f+0xa8>
    1dee:	81 81       	ldd	r24, Z+1	; 0x01
    1df0:	88 23       	and	r24, r24
    1df2:	89 f1       	breq	.+98     	; 0x1e56 <__fpcmp_parts_f+0xa2>
    1df4:	2d c0       	rjmp	.+90     	; 0x1e50 <__fpcmp_parts_f+0x9c>
    1df6:	11 96       	adiw	r26, 0x01	; 1
    1df8:	1c 91       	ld	r17, X
    1dfa:	11 97       	sbiw	r26, 0x01	; 1
    1dfc:	82 30       	cpi	r24, 0x02	; 2
    1dfe:	f1 f0       	breq	.+60     	; 0x1e3c <__fpcmp_parts_f+0x88>
    1e00:	81 81       	ldd	r24, Z+1	; 0x01
    1e02:	18 17       	cp	r17, r24
    1e04:	d9 f4       	brne	.+54     	; 0x1e3c <__fpcmp_parts_f+0x88>
    1e06:	12 96       	adiw	r26, 0x02	; 2
    1e08:	2d 91       	ld	r18, X+
    1e0a:	3c 91       	ld	r19, X
    1e0c:	13 97       	sbiw	r26, 0x03	; 3
    1e0e:	82 81       	ldd	r24, Z+2	; 0x02
    1e10:	93 81       	ldd	r25, Z+3	; 0x03
    1e12:	82 17       	cp	r24, r18
    1e14:	93 07       	cpc	r25, r19
    1e16:	94 f0       	brlt	.+36     	; 0x1e3c <__fpcmp_parts_f+0x88>
    1e18:	28 17       	cp	r18, r24
    1e1a:	39 07       	cpc	r19, r25
    1e1c:	bc f0       	brlt	.+46     	; 0x1e4c <__fpcmp_parts_f+0x98>
    1e1e:	14 96       	adiw	r26, 0x04	; 4
    1e20:	8d 91       	ld	r24, X+
    1e22:	9d 91       	ld	r25, X+
    1e24:	0d 90       	ld	r0, X+
    1e26:	bc 91       	ld	r27, X
    1e28:	a0 2d       	mov	r26, r0
    1e2a:	24 81       	ldd	r18, Z+4	; 0x04
    1e2c:	35 81       	ldd	r19, Z+5	; 0x05
    1e2e:	46 81       	ldd	r20, Z+6	; 0x06
    1e30:	57 81       	ldd	r21, Z+7	; 0x07
    1e32:	28 17       	cp	r18, r24
    1e34:	39 07       	cpc	r19, r25
    1e36:	4a 07       	cpc	r20, r26
    1e38:	5b 07       	cpc	r21, r27
    1e3a:	18 f4       	brcc	.+6      	; 0x1e42 <__fpcmp_parts_f+0x8e>
    1e3c:	11 23       	and	r17, r17
    1e3e:	41 f0       	breq	.+16     	; 0x1e50 <__fpcmp_parts_f+0x9c>
    1e40:	0a c0       	rjmp	.+20     	; 0x1e56 <__fpcmp_parts_f+0xa2>
    1e42:	82 17       	cp	r24, r18
    1e44:	93 07       	cpc	r25, r19
    1e46:	a4 07       	cpc	r26, r20
    1e48:	b5 07       	cpc	r27, r21
    1e4a:	40 f4       	brcc	.+16     	; 0x1e5c <__fpcmp_parts_f+0xa8>
    1e4c:	11 23       	and	r17, r17
    1e4e:	19 f0       	breq	.+6      	; 0x1e56 <__fpcmp_parts_f+0xa2>
    1e50:	61 e0       	ldi	r22, 0x01	; 1
    1e52:	70 e0       	ldi	r23, 0x00	; 0
    1e54:	05 c0       	rjmp	.+10     	; 0x1e60 <__fpcmp_parts_f+0xac>
    1e56:	6f ef       	ldi	r22, 0xFF	; 255
    1e58:	7f ef       	ldi	r23, 0xFF	; 255
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <__fpcmp_parts_f+0xac>
    1e5c:	60 e0       	ldi	r22, 0x00	; 0
    1e5e:	70 e0       	ldi	r23, 0x00	; 0
    1e60:	cb 01       	movw	r24, r22
    1e62:	1f 91       	pop	r17
    1e64:	08 95       	ret

00001e66 <dtostrf>:
    1e66:	ef 92       	push	r14
    1e68:	ff 92       	push	r15
    1e6a:	0f 93       	push	r16
    1e6c:	1f 93       	push	r17
    1e6e:	e2 2f       	mov	r30, r18
    1e70:	f0 2e       	mov	r15, r16
    1e72:	47 fd       	sbrc	r20, 7
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <dtostrf+0x14>
    1e76:	54 e0       	ldi	r21, 0x04	; 4
    1e78:	01 c0       	rjmp	.+2      	; 0x1e7c <dtostrf+0x16>
    1e7a:	54 e1       	ldi	r21, 0x14	; 20
    1e7c:	24 2f       	mov	r18, r20
    1e7e:	33 27       	eor	r19, r19
    1e80:	27 fd       	sbrc	r18, 7
    1e82:	30 95       	com	r19
    1e84:	37 ff       	sbrs	r19, 7
    1e86:	03 c0       	rjmp	.+6      	; 0x1e8e <dtostrf+0x28>
    1e88:	30 95       	com	r19
    1e8a:	21 95       	neg	r18
    1e8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8e:	e5 2e       	mov	r14, r21
    1e90:	0e 2f       	mov	r16, r30
    1e92:	4f 2d       	mov	r20, r15
    1e94:	51 2f       	mov	r21, r17
    1e96:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <dtoa_prf>
    1e9a:	8f 2d       	mov	r24, r15
    1e9c:	91 2f       	mov	r25, r17
    1e9e:	1f 91       	pop	r17
    1ea0:	0f 91       	pop	r16
    1ea2:	ff 90       	pop	r15
    1ea4:	ef 90       	pop	r14
    1ea6:	08 95       	ret

00001ea8 <dtoa_prf>:
    1ea8:	a9 e0       	ldi	r26, 0x09	; 9
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	ea e5       	ldi	r30, 0x5A	; 90
    1eae:	ff e0       	ldi	r31, 0x0F	; 15
    1eb0:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__prologue_saves__+0x8>
    1eb4:	6a 01       	movw	r12, r20
    1eb6:	12 2f       	mov	r17, r18
    1eb8:	a0 2e       	mov	r10, r16
    1eba:	be 2c       	mov	r11, r14
    1ebc:	2b e3       	ldi	r18, 0x3B	; 59
    1ebe:	20 17       	cp	r18, r16
    1ec0:	18 f4       	brcc	.+6      	; 0x1ec8 <dtoa_prf+0x20>
    1ec2:	2c e3       	ldi	r18, 0x3C	; 60
    1ec4:	92 2e       	mov	r9, r18
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <dtoa_prf+0x24>
    1ec8:	90 2e       	mov	r9, r16
    1eca:	93 94       	inc	r9
    1ecc:	09 2d       	mov	r16, r9
    1ece:	27 e0       	ldi	r18, 0x07	; 7
    1ed0:	ae 01       	movw	r20, r28
    1ed2:	4f 5f       	subi	r20, 0xFF	; 255
    1ed4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed6:	0e 94 b6 10 	call	0x216c	; 0x216c <__ftoa_engine>
    1eda:	bc 01       	movw	r22, r24
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	e8 2e       	mov	r14, r24
    1ee0:	ff 24       	eor	r15, r15
    1ee2:	c7 01       	movw	r24, r14
    1ee4:	89 70       	andi	r24, 0x09	; 9
    1ee6:	90 70       	andi	r25, 0x00	; 0
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	11 f4       	brne	.+4      	; 0x1ef0 <dtoa_prf+0x48>
    1eec:	ad e2       	ldi	r26, 0x2D	; 45
    1eee:	09 c0       	rjmp	.+18     	; 0x1f02 <dtoa_prf+0x5a>
    1ef0:	b1 fe       	sbrs	r11, 1
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <dtoa_prf+0x50>
    1ef4:	ab e2       	ldi	r26, 0x2B	; 43
    1ef6:	05 c0       	rjmp	.+10     	; 0x1f02 <dtoa_prf+0x5a>
    1ef8:	b0 fc       	sbrc	r11, 0
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <dtoa_prf+0x58>
    1efc:	a0 e0       	ldi	r26, 0x00	; 0
    1efe:	01 c0       	rjmp	.+2      	; 0x1f02 <dtoa_prf+0x5a>
    1f00:	a0 e2       	ldi	r26, 0x20	; 32
    1f02:	e3 fe       	sbrs	r14, 3
    1f04:	3b c0       	rjmp	.+118    	; 0x1f7c <dtoa_prf+0xd4>
    1f06:	aa 23       	and	r26, r26
    1f08:	11 f4       	brne	.+4      	; 0x1f0e <dtoa_prf+0x66>
    1f0a:	23 e0       	ldi	r18, 0x03	; 3
    1f0c:	01 c0       	rjmp	.+2      	; 0x1f10 <dtoa_prf+0x68>
    1f0e:	24 e0       	ldi	r18, 0x04	; 4
    1f10:	21 17       	cp	r18, r17
    1f12:	10 f0       	brcs	.+4      	; 0x1f18 <dtoa_prf+0x70>
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	02 c0       	rjmp	.+4      	; 0x1f1c <dtoa_prf+0x74>
    1f18:	12 1b       	sub	r17, r18
    1f1a:	21 2f       	mov	r18, r17
    1f1c:	eb 2c       	mov	r14, r11
    1f1e:	b4 fe       	sbrs	r11, 4
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <dtoa_prf+0x7e>
    1f22:	32 2f       	mov	r19, r18
    1f24:	0a c0       	rjmp	.+20     	; 0x1f3a <dtoa_prf+0x92>
    1f26:	f6 01       	movw	r30, r12
    1f28:	32 2f       	mov	r19, r18
    1f2a:	80 e2       	ldi	r24, 0x20	; 32
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <dtoa_prf+0x8a>
    1f2e:	81 93       	st	Z+, r24
    1f30:	31 50       	subi	r19, 0x01	; 1
    1f32:	33 23       	and	r19, r19
    1f34:	e1 f7       	brne	.-8      	; 0x1f2e <dtoa_prf+0x86>
    1f36:	c2 0e       	add	r12, r18
    1f38:	d1 1c       	adc	r13, r1
    1f3a:	aa 23       	and	r26, r26
    1f3c:	19 f0       	breq	.+6      	; 0x1f44 <dtoa_prf+0x9c>
    1f3e:	f6 01       	movw	r30, r12
    1f40:	a1 93       	st	Z+, r26
    1f42:	6f 01       	movw	r12, r30
    1f44:	f6 01       	movw	r30, r12
    1f46:	31 96       	adiw	r30, 0x01	; 1
    1f48:	e2 fe       	sbrs	r14, 2
    1f4a:	05 c0       	rjmp	.+10     	; 0x1f56 <dtoa_prf+0xae>
    1f4c:	9e e4       	ldi	r25, 0x4E	; 78
    1f4e:	d6 01       	movw	r26, r12
    1f50:	9c 93       	st	X, r25
    1f52:	81 e4       	ldi	r24, 0x41	; 65
    1f54:	04 c0       	rjmp	.+8      	; 0x1f5e <dtoa_prf+0xb6>
    1f56:	9e e6       	ldi	r25, 0x6E	; 110
    1f58:	d6 01       	movw	r26, r12
    1f5a:	9c 93       	st	X, r25
    1f5c:	81 e6       	ldi	r24, 0x61	; 97
    1f5e:	11 96       	adiw	r26, 0x01	; 1
    1f60:	8c 93       	st	X, r24
    1f62:	91 83       	std	Z+1, r25	; 0x01
    1f64:	32 96       	adiw	r30, 0x02	; 2
    1f66:	df 01       	movw	r26, r30
    1f68:	83 2f       	mov	r24, r19
    1f6a:	90 e2       	ldi	r25, 0x20	; 32
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <dtoa_prf+0xca>
    1f6e:	9d 93       	st	X+, r25
    1f70:	81 50       	subi	r24, 0x01	; 1
    1f72:	88 23       	and	r24, r24
    1f74:	e1 f7       	brne	.-8      	; 0x1f6e <dtoa_prf+0xc6>
    1f76:	e3 0f       	add	r30, r19
    1f78:	f1 1d       	adc	r31, r1
    1f7a:	40 c0       	rjmp	.+128    	; 0x1ffc <dtoa_prf+0x154>
    1f7c:	e2 fe       	sbrs	r14, 2
    1f7e:	42 c0       	rjmp	.+132    	; 0x2004 <dtoa_prf+0x15c>
    1f80:	aa 23       	and	r26, r26
    1f82:	11 f4       	brne	.+4      	; 0x1f88 <dtoa_prf+0xe0>
    1f84:	23 e0       	ldi	r18, 0x03	; 3
    1f86:	01 c0       	rjmp	.+2      	; 0x1f8a <dtoa_prf+0xe2>
    1f88:	24 e0       	ldi	r18, 0x04	; 4
    1f8a:	21 17       	cp	r18, r17
    1f8c:	10 f0       	brcs	.+4      	; 0x1f92 <dtoa_prf+0xea>
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	02 c0       	rjmp	.+4      	; 0x1f96 <dtoa_prf+0xee>
    1f92:	12 1b       	sub	r17, r18
    1f94:	21 2f       	mov	r18, r17
    1f96:	eb 2c       	mov	r14, r11
    1f98:	b4 fe       	sbrs	r11, 4
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <dtoa_prf+0xf8>
    1f9c:	92 2f       	mov	r25, r18
    1f9e:	0a c0       	rjmp	.+20     	; 0x1fb4 <dtoa_prf+0x10c>
    1fa0:	f6 01       	movw	r30, r12
    1fa2:	92 2f       	mov	r25, r18
    1fa4:	80 e2       	ldi	r24, 0x20	; 32
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <dtoa_prf+0x104>
    1fa8:	81 93       	st	Z+, r24
    1faa:	91 50       	subi	r25, 0x01	; 1
    1fac:	99 23       	and	r25, r25
    1fae:	e1 f7       	brne	.-8      	; 0x1fa8 <dtoa_prf+0x100>
    1fb0:	c2 0e       	add	r12, r18
    1fb2:	d1 1c       	adc	r13, r1
    1fb4:	aa 23       	and	r26, r26
    1fb6:	19 f0       	breq	.+6      	; 0x1fbe <dtoa_prf+0x116>
    1fb8:	f6 01       	movw	r30, r12
    1fba:	a1 93       	st	Z+, r26
    1fbc:	6f 01       	movw	r12, r30
    1fbe:	f6 01       	movw	r30, r12
    1fc0:	31 96       	adiw	r30, 0x01	; 1
    1fc2:	e2 fe       	sbrs	r14, 2
    1fc4:	08 c0       	rjmp	.+16     	; 0x1fd6 <dtoa_prf+0x12e>
    1fc6:	89 e4       	ldi	r24, 0x49	; 73
    1fc8:	d6 01       	movw	r26, r12
    1fca:	8c 93       	st	X, r24
    1fcc:	8e e4       	ldi	r24, 0x4E	; 78
    1fce:	11 96       	adiw	r26, 0x01	; 1
    1fd0:	8c 93       	st	X, r24
    1fd2:	86 e4       	ldi	r24, 0x46	; 70
    1fd4:	07 c0       	rjmp	.+14     	; 0x1fe4 <dtoa_prf+0x13c>
    1fd6:	89 e6       	ldi	r24, 0x69	; 105
    1fd8:	d6 01       	movw	r26, r12
    1fda:	8c 93       	st	X, r24
    1fdc:	8e e6       	ldi	r24, 0x6E	; 110
    1fde:	11 96       	adiw	r26, 0x01	; 1
    1fe0:	8c 93       	st	X, r24
    1fe2:	86 e6       	ldi	r24, 0x66	; 102
    1fe4:	81 83       	std	Z+1, r24	; 0x01
    1fe6:	32 96       	adiw	r30, 0x02	; 2
    1fe8:	df 01       	movw	r26, r30
    1fea:	89 2f       	mov	r24, r25
    1fec:	20 e2       	ldi	r18, 0x20	; 32
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <dtoa_prf+0x14c>
    1ff0:	2d 93       	st	X+, r18
    1ff2:	81 50       	subi	r24, 0x01	; 1
    1ff4:	88 23       	and	r24, r24
    1ff6:	e1 f7       	brne	.-8      	; 0x1ff0 <dtoa_prf+0x148>
    1ff8:	e9 0f       	add	r30, r25
    1ffa:	f1 1d       	adc	r31, r1
    1ffc:	10 82       	st	Z, r1
    1ffe:	2e ef       	ldi	r18, 0xFE	; 254
    2000:	3f ef       	ldi	r19, 0xFF	; 255
    2002:	af c0       	rjmp	.+350    	; 0x2162 <dtoa_prf+0x2ba>
    2004:	16 16       	cp	r1, r22
    2006:	17 06       	cpc	r1, r23
    2008:	1c f0       	brlt	.+6      	; 0x2010 <dtoa_prf+0x168>
    200a:	41 e0       	ldi	r20, 0x01	; 1
    200c:	50 e0       	ldi	r21, 0x00	; 0
    200e:	03 c0       	rjmp	.+6      	; 0x2016 <dtoa_prf+0x16e>
    2010:	ab 01       	movw	r20, r22
    2012:	4f 5f       	subi	r20, 0xFF	; 255
    2014:	5f 4f       	sbci	r21, 0xFF	; 255
    2016:	aa 20       	and	r10, r10
    2018:	19 f4       	brne	.+6      	; 0x2020 <dtoa_prf+0x178>
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	03 c0       	rjmp	.+6      	; 0x2026 <dtoa_prf+0x17e>
    2020:	8a 2d       	mov	r24, r10
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	01 96       	adiw	r24, 0x01	; 1
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	aa 23       	and	r26, r26
    202c:	11 f0       	breq	.+4      	; 0x2032 <dtoa_prf+0x18a>
    202e:	21 e0       	ldi	r18, 0x01	; 1
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	24 0f       	add	r18, r20
    2034:	35 1f       	adc	r19, r21
    2036:	28 0f       	add	r18, r24
    2038:	39 1f       	adc	r19, r25
    203a:	81 2f       	mov	r24, r17
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	28 17       	cp	r18, r24
    2040:	39 07       	cpc	r19, r25
    2042:	14 f0       	brlt	.+4      	; 0x2048 <dtoa_prf+0x1a0>
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	02 c0       	rjmp	.+4      	; 0x204c <dtoa_prf+0x1a4>
    2048:	12 1b       	sub	r17, r18
    204a:	21 2f       	mov	r18, r17
    204c:	4b 2d       	mov	r20, r11
    204e:	50 e0       	ldi	r21, 0x00	; 0
    2050:	ca 01       	movw	r24, r20
    2052:	80 71       	andi	r24, 0x10	; 16
    2054:	90 70       	andi	r25, 0x00	; 0
    2056:	b4 fc       	sbrc	r11, 4
    2058:	0d c0       	rjmp	.+26     	; 0x2074 <dtoa_prf+0x1cc>
    205a:	b3 fc       	sbrc	r11, 3
    205c:	0b c0       	rjmp	.+22     	; 0x2074 <dtoa_prf+0x1cc>
    205e:	f6 01       	movw	r30, r12
    2060:	32 2f       	mov	r19, r18
    2062:	40 e2       	ldi	r20, 0x20	; 32
    2064:	02 c0       	rjmp	.+4      	; 0x206a <dtoa_prf+0x1c2>
    2066:	41 93       	st	Z+, r20
    2068:	31 50       	subi	r19, 0x01	; 1
    206a:	33 23       	and	r19, r19
    206c:	e1 f7       	brne	.-8      	; 0x2066 <dtoa_prf+0x1be>
    206e:	c2 0e       	add	r12, r18
    2070:	d1 1c       	adc	r13, r1
    2072:	01 c0       	rjmp	.+2      	; 0x2076 <dtoa_prf+0x1ce>
    2074:	32 2f       	mov	r19, r18
    2076:	aa 23       	and	r26, r26
    2078:	19 f0       	breq	.+6      	; 0x2080 <dtoa_prf+0x1d8>
    207a:	f6 01       	movw	r30, r12
    207c:	a1 93       	st	Z+, r26
    207e:	6f 01       	movw	r12, r30
    2080:	89 2b       	or	r24, r25
    2082:	11 f0       	breq	.+4      	; 0x2088 <dtoa_prf+0x1e0>
    2084:	13 2f       	mov	r17, r19
    2086:	0a c0       	rjmp	.+20     	; 0x209c <dtoa_prf+0x1f4>
    2088:	f6 01       	movw	r30, r12
    208a:	13 2f       	mov	r17, r19
    208c:	80 e3       	ldi	r24, 0x30	; 48
    208e:	02 c0       	rjmp	.+4      	; 0x2094 <dtoa_prf+0x1ec>
    2090:	81 93       	st	Z+, r24
    2092:	11 50       	subi	r17, 0x01	; 1
    2094:	11 23       	and	r17, r17
    2096:	e1 f7       	brne	.-8      	; 0x2090 <dtoa_prf+0x1e8>
    2098:	c3 0e       	add	r12, r19
    209a:	d1 1c       	adc	r13, r1
    209c:	09 2d       	mov	r16, r9
    209e:	06 0f       	add	r16, r22
    20a0:	ba 80       	ldd	r11, Y+2	; 0x02
    20a2:	90 e1       	ldi	r25, 0x10	; 16
    20a4:	89 2e       	mov	r8, r25
    20a6:	91 2c       	mov	r9, r1
    20a8:	8e 20       	and	r8, r14
    20aa:	9f 20       	and	r9, r15
    20ac:	e4 fe       	sbrs	r14, 4
    20ae:	04 c0       	rjmp	.+8      	; 0x20b8 <dtoa_prf+0x210>
    20b0:	f1 e3       	ldi	r31, 0x31	; 49
    20b2:	bf 16       	cp	r11, r31
    20b4:	09 f4       	brne	.+2      	; 0x20b8 <dtoa_prf+0x210>
    20b6:	01 50       	subi	r16, 0x01	; 1
    20b8:	10 16       	cp	r1, r16
    20ba:	14 f0       	brlt	.+4      	; 0x20c0 <dtoa_prf+0x218>
    20bc:	01 e0       	ldi	r16, 0x01	; 1
    20be:	03 c0       	rjmp	.+6      	; 0x20c6 <dtoa_prf+0x21e>
    20c0:	09 30       	cpi	r16, 0x09	; 9
    20c2:	08 f0       	brcs	.+2      	; 0x20c6 <dtoa_prf+0x21e>
    20c4:	08 e0       	ldi	r16, 0x08	; 8
    20c6:	9b 01       	movw	r18, r22
    20c8:	77 ff       	sbrs	r23, 7
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <dtoa_prf+0x228>
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	cb 01       	movw	r24, r22
    20d2:	01 96       	adiw	r24, 0x01	; 1
    20d4:	82 1b       	sub	r24, r18
    20d6:	93 0b       	sbc	r25, r19
    20d8:	fe 01       	movw	r30, r28
    20da:	31 96       	adiw	r30, 0x01	; 1
    20dc:	e8 0f       	add	r30, r24
    20de:	f9 1f       	adc	r31, r25
    20e0:	8e e2       	ldi	r24, 0x2E	; 46
    20e2:	f8 2e       	mov	r15, r24
    20e4:	3b 01       	movw	r6, r22
    20e6:	60 1a       	sub	r6, r16
    20e8:	71 08       	sbc	r7, r1
    20ea:	8a 2d       	mov	r24, r10
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	44 27       	eor	r20, r20
    20f0:	55 27       	eor	r21, r21
    20f2:	48 1b       	sub	r20, r24
    20f4:	59 0b       	sbc	r21, r25
    20f6:	8f ef       	ldi	r24, 0xFF	; 255
    20f8:	2f 3f       	cpi	r18, 0xFF	; 255
    20fa:	38 07       	cpc	r19, r24
    20fc:	19 f4       	brne	.+6      	; 0x2104 <dtoa_prf+0x25c>
    20fe:	d6 01       	movw	r26, r12
    2100:	fd 92       	st	X+, r15
    2102:	6d 01       	movw	r12, r26
    2104:	62 17       	cp	r22, r18
    2106:	73 07       	cpc	r23, r19
    2108:	2c f0       	brlt	.+10     	; 0x2114 <dtoa_prf+0x26c>
    210a:	62 16       	cp	r6, r18
    210c:	73 06       	cpc	r7, r19
    210e:	14 f4       	brge	.+4      	; 0x2114 <dtoa_prf+0x26c>
    2110:	80 81       	ld	r24, Z
    2112:	01 c0       	rjmp	.+2      	; 0x2116 <dtoa_prf+0x26e>
    2114:	80 e3       	ldi	r24, 0x30	; 48
    2116:	21 50       	subi	r18, 0x01	; 1
    2118:	30 40       	sbci	r19, 0x00	; 0
    211a:	31 96       	adiw	r30, 0x01	; 1
    211c:	24 17       	cp	r18, r20
    211e:	35 07       	cpc	r19, r21
    2120:	24 f0       	brlt	.+8      	; 0x212a <dtoa_prf+0x282>
    2122:	d6 01       	movw	r26, r12
    2124:	8d 93       	st	X+, r24
    2126:	6d 01       	movw	r12, r26
    2128:	e6 cf       	rjmp	.-52     	; 0x20f6 <dtoa_prf+0x24e>
    212a:	26 17       	cp	r18, r22
    212c:	37 07       	cpc	r19, r23
    212e:	49 f4       	brne	.+18     	; 0x2142 <dtoa_prf+0x29a>
    2130:	b5 e3       	ldi	r27, 0x35	; 53
    2132:	bb 15       	cp	r27, r11
    2134:	28 f0       	brcs	.+10     	; 0x2140 <dtoa_prf+0x298>
    2136:	bb 16       	cp	r11, r27
    2138:	21 f4       	brne	.+8      	; 0x2142 <dtoa_prf+0x29a>
    213a:	81 14       	cp	r8, r1
    213c:	91 04       	cpc	r9, r1
    213e:	09 f4       	brne	.+2      	; 0x2142 <dtoa_prf+0x29a>
    2140:	81 e3       	ldi	r24, 0x31	; 49
    2142:	f6 01       	movw	r30, r12
    2144:	81 93       	st	Z+, r24
    2146:	d6 01       	movw	r26, r12
    2148:	81 2f       	mov	r24, r17
    214a:	90 e2       	ldi	r25, 0x20	; 32
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <dtoa_prf+0x2aa>
    214e:	9c 93       	st	X, r25
    2150:	81 50       	subi	r24, 0x01	; 1
    2152:	11 96       	adiw	r26, 0x01	; 1
    2154:	88 23       	and	r24, r24
    2156:	d9 f7       	brne	.-10     	; 0x214e <dtoa_prf+0x2a6>
    2158:	e1 0f       	add	r30, r17
    215a:	f1 1d       	adc	r31, r1
    215c:	10 82       	st	Z, r1
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	c9 01       	movw	r24, r18
    2164:	29 96       	adiw	r28, 0x09	; 9
    2166:	ee e0       	ldi	r30, 0x0E	; 14
    2168:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__epilogue_restores__+0x8>

0000216c <__ftoa_engine>:
    216c:	28 30       	cpi	r18, 0x08	; 8
    216e:	08 f0       	brcs	.+2      	; 0x2172 <__ftoa_engine+0x6>
    2170:	27 e0       	ldi	r18, 0x07	; 7
    2172:	33 27       	eor	r19, r19
    2174:	da 01       	movw	r26, r20
    2176:	99 0f       	add	r25, r25
    2178:	31 1d       	adc	r19, r1
    217a:	87 fd       	sbrc	r24, 7
    217c:	91 60       	ori	r25, 0x01	; 1
    217e:	00 96       	adiw	r24, 0x00	; 0
    2180:	61 05       	cpc	r22, r1
    2182:	71 05       	cpc	r23, r1
    2184:	39 f4       	brne	.+14     	; 0x2194 <__ftoa_engine+0x28>
    2186:	32 60       	ori	r19, 0x02	; 2
    2188:	2e 5f       	subi	r18, 0xFE	; 254
    218a:	3d 93       	st	X+, r19
    218c:	30 e3       	ldi	r19, 0x30	; 48
    218e:	2a 95       	dec	r18
    2190:	e1 f7       	brne	.-8      	; 0x218a <__ftoa_engine+0x1e>
    2192:	08 95       	ret
    2194:	9f 3f       	cpi	r25, 0xFF	; 255
    2196:	30 f0       	brcs	.+12     	; 0x21a4 <__ftoa_engine+0x38>
    2198:	80 38       	cpi	r24, 0x80	; 128
    219a:	71 05       	cpc	r23, r1
    219c:	61 05       	cpc	r22, r1
    219e:	09 f0       	breq	.+2      	; 0x21a2 <__ftoa_engine+0x36>
    21a0:	3c 5f       	subi	r19, 0xFC	; 252
    21a2:	3c 5f       	subi	r19, 0xFC	; 252
    21a4:	3d 93       	st	X+, r19
    21a6:	91 30       	cpi	r25, 0x01	; 1
    21a8:	08 f0       	brcs	.+2      	; 0x21ac <__ftoa_engine+0x40>
    21aa:	80 68       	ori	r24, 0x80	; 128
    21ac:	91 1d       	adc	r25, r1
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	1f 93       	push	r17
    21b4:	0f 93       	push	r16
    21b6:	ff 92       	push	r15
    21b8:	ef 92       	push	r14
    21ba:	19 2f       	mov	r17, r25
    21bc:	98 7f       	andi	r25, 0xF8	; 248
    21be:	96 95       	lsr	r25
    21c0:	e9 2f       	mov	r30, r25
    21c2:	96 95       	lsr	r25
    21c4:	96 95       	lsr	r25
    21c6:	e9 0f       	add	r30, r25
    21c8:	ff 27       	eor	r31, r31
    21ca:	e2 55       	subi	r30, 0x52	; 82
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	99 27       	eor	r25, r25
    21d0:	33 27       	eor	r19, r19
    21d2:	ee 24       	eor	r14, r14
    21d4:	ff 24       	eor	r15, r15
    21d6:	a7 01       	movw	r20, r14
    21d8:	e7 01       	movw	r28, r14
    21da:	05 90       	lpm	r0, Z+
    21dc:	08 94       	sec
    21de:	07 94       	ror	r0
    21e0:	28 f4       	brcc	.+10     	; 0x21ec <__ftoa_engine+0x80>
    21e2:	36 0f       	add	r19, r22
    21e4:	e7 1e       	adc	r14, r23
    21e6:	f8 1e       	adc	r15, r24
    21e8:	49 1f       	adc	r20, r25
    21ea:	51 1d       	adc	r21, r1
    21ec:	66 0f       	add	r22, r22
    21ee:	77 1f       	adc	r23, r23
    21f0:	88 1f       	adc	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	06 94       	lsr	r0
    21f6:	a1 f7       	brne	.-24     	; 0x21e0 <__ftoa_engine+0x74>
    21f8:	05 90       	lpm	r0, Z+
    21fa:	07 94       	ror	r0
    21fc:	28 f4       	brcc	.+10     	; 0x2208 <__ftoa_engine+0x9c>
    21fe:	e7 0e       	add	r14, r23
    2200:	f8 1e       	adc	r15, r24
    2202:	49 1f       	adc	r20, r25
    2204:	56 1f       	adc	r21, r22
    2206:	c1 1d       	adc	r28, r1
    2208:	77 0f       	add	r23, r23
    220a:	88 1f       	adc	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	66 1f       	adc	r22, r22
    2210:	06 94       	lsr	r0
    2212:	a1 f7       	brne	.-24     	; 0x21fc <__ftoa_engine+0x90>
    2214:	05 90       	lpm	r0, Z+
    2216:	07 94       	ror	r0
    2218:	28 f4       	brcc	.+10     	; 0x2224 <__ftoa_engine+0xb8>
    221a:	f8 0e       	add	r15, r24
    221c:	49 1f       	adc	r20, r25
    221e:	56 1f       	adc	r21, r22
    2220:	c7 1f       	adc	r28, r23
    2222:	d1 1d       	adc	r29, r1
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	66 1f       	adc	r22, r22
    222a:	77 1f       	adc	r23, r23
    222c:	06 94       	lsr	r0
    222e:	a1 f7       	brne	.-24     	; 0x2218 <__ftoa_engine+0xac>
    2230:	05 90       	lpm	r0, Z+
    2232:	07 94       	ror	r0
    2234:	20 f4       	brcc	.+8      	; 0x223e <__ftoa_engine+0xd2>
    2236:	49 0f       	add	r20, r25
    2238:	56 1f       	adc	r21, r22
    223a:	c7 1f       	adc	r28, r23
    223c:	d8 1f       	adc	r29, r24
    223e:	99 0f       	add	r25, r25
    2240:	66 1f       	adc	r22, r22
    2242:	77 1f       	adc	r23, r23
    2244:	88 1f       	adc	r24, r24
    2246:	06 94       	lsr	r0
    2248:	a9 f7       	brne	.-22     	; 0x2234 <__ftoa_engine+0xc8>
    224a:	84 91       	lpm	r24, Z+
    224c:	10 95       	com	r17
    224e:	17 70       	andi	r17, 0x07	; 7
    2250:	41 f0       	breq	.+16     	; 0x2262 <__ftoa_engine+0xf6>
    2252:	d6 95       	lsr	r29
    2254:	c7 95       	ror	r28
    2256:	57 95       	ror	r21
    2258:	47 95       	ror	r20
    225a:	f7 94       	ror	r15
    225c:	e7 94       	ror	r14
    225e:	1a 95       	dec	r17
    2260:	c1 f7       	brne	.-16     	; 0x2252 <__ftoa_engine+0xe6>
    2262:	e4 e5       	ldi	r30, 0x54	; 84
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	68 94       	set
    2268:	15 90       	lpm	r1, Z+
    226a:	15 91       	lpm	r17, Z+
    226c:	35 91       	lpm	r19, Z+
    226e:	65 91       	lpm	r22, Z+
    2270:	95 91       	lpm	r25, Z+
    2272:	05 90       	lpm	r0, Z+
    2274:	7f e2       	ldi	r23, 0x2F	; 47
    2276:	73 95       	inc	r23
    2278:	e1 18       	sub	r14, r1
    227a:	f1 0a       	sbc	r15, r17
    227c:	43 0b       	sbc	r20, r19
    227e:	56 0b       	sbc	r21, r22
    2280:	c9 0b       	sbc	r28, r25
    2282:	d0 09       	sbc	r29, r0
    2284:	c0 f7       	brcc	.-16     	; 0x2276 <__ftoa_engine+0x10a>
    2286:	e1 0c       	add	r14, r1
    2288:	f1 1e       	adc	r15, r17
    228a:	43 1f       	adc	r20, r19
    228c:	56 1f       	adc	r21, r22
    228e:	c9 1f       	adc	r28, r25
    2290:	d0 1d       	adc	r29, r0
    2292:	7e f4       	brtc	.+30     	; 0x22b2 <__ftoa_engine+0x146>
    2294:	70 33       	cpi	r23, 0x30	; 48
    2296:	11 f4       	brne	.+4      	; 0x229c <__ftoa_engine+0x130>
    2298:	8a 95       	dec	r24
    229a:	e6 cf       	rjmp	.-52     	; 0x2268 <__ftoa_engine+0xfc>
    229c:	e8 94       	clt
    229e:	01 50       	subi	r16, 0x01	; 1
    22a0:	30 f0       	brcs	.+12     	; 0x22ae <__ftoa_engine+0x142>
    22a2:	08 0f       	add	r16, r24
    22a4:	0a f4       	brpl	.+2      	; 0x22a8 <__ftoa_engine+0x13c>
    22a6:	00 27       	eor	r16, r16
    22a8:	02 17       	cp	r16, r18
    22aa:	08 f4       	brcc	.+2      	; 0x22ae <__ftoa_engine+0x142>
    22ac:	20 2f       	mov	r18, r16
    22ae:	23 95       	inc	r18
    22b0:	02 2f       	mov	r16, r18
    22b2:	7a 33       	cpi	r23, 0x3A	; 58
    22b4:	28 f0       	brcs	.+10     	; 0x22c0 <__ftoa_engine+0x154>
    22b6:	79 e3       	ldi	r23, 0x39	; 57
    22b8:	7d 93       	st	X+, r23
    22ba:	2a 95       	dec	r18
    22bc:	e9 f7       	brne	.-6      	; 0x22b8 <__ftoa_engine+0x14c>
    22be:	10 c0       	rjmp	.+32     	; 0x22e0 <__ftoa_engine+0x174>
    22c0:	7d 93       	st	X+, r23
    22c2:	2a 95       	dec	r18
    22c4:	89 f6       	brne	.-94     	; 0x2268 <__ftoa_engine+0xfc>
    22c6:	06 94       	lsr	r0
    22c8:	97 95       	ror	r25
    22ca:	67 95       	ror	r22
    22cc:	37 95       	ror	r19
    22ce:	17 95       	ror	r17
    22d0:	17 94       	ror	r1
    22d2:	e1 18       	sub	r14, r1
    22d4:	f1 0a       	sbc	r15, r17
    22d6:	43 0b       	sbc	r20, r19
    22d8:	56 0b       	sbc	r21, r22
    22da:	c9 0b       	sbc	r28, r25
    22dc:	d0 09       	sbc	r29, r0
    22de:	98 f0       	brcs	.+38     	; 0x2306 <__ftoa_engine+0x19a>
    22e0:	23 95       	inc	r18
    22e2:	7e 91       	ld	r23, -X
    22e4:	73 95       	inc	r23
    22e6:	7a 33       	cpi	r23, 0x3A	; 58
    22e8:	08 f0       	brcs	.+2      	; 0x22ec <__ftoa_engine+0x180>
    22ea:	70 e3       	ldi	r23, 0x30	; 48
    22ec:	7c 93       	st	X, r23
    22ee:	20 13       	cpse	r18, r16
    22f0:	b8 f7       	brcc	.-18     	; 0x22e0 <__ftoa_engine+0x174>
    22f2:	7e 91       	ld	r23, -X
    22f4:	70 61       	ori	r23, 0x10	; 16
    22f6:	7d 93       	st	X+, r23
    22f8:	30 f0       	brcs	.+12     	; 0x2306 <__ftoa_engine+0x19a>
    22fa:	83 95       	inc	r24
    22fc:	71 e3       	ldi	r23, 0x31	; 49
    22fe:	7d 93       	st	X+, r23
    2300:	70 e3       	ldi	r23, 0x30	; 48
    2302:	2a 95       	dec	r18
    2304:	e1 f7       	brne	.-8      	; 0x22fe <__ftoa_engine+0x192>
    2306:	11 24       	eor	r1, r1
    2308:	ef 90       	pop	r14
    230a:	ff 90       	pop	r15
    230c:	0f 91       	pop	r16
    230e:	1f 91       	pop	r17
    2310:	cf 91       	pop	r28
    2312:	df 91       	pop	r29
    2314:	99 27       	eor	r25, r25
    2316:	87 fd       	sbrc	r24, 7
    2318:	90 95       	com	r25
    231a:	08 95       	ret

0000231c <__prologue_saves__>:
    231c:	2f 92       	push	r2
    231e:	3f 92       	push	r3
    2320:	4f 92       	push	r4
    2322:	5f 92       	push	r5
    2324:	6f 92       	push	r6
    2326:	7f 92       	push	r7
    2328:	8f 92       	push	r8
    232a:	9f 92       	push	r9
    232c:	af 92       	push	r10
    232e:	bf 92       	push	r11
    2330:	cf 92       	push	r12
    2332:	df 92       	push	r13
    2334:	ef 92       	push	r14
    2336:	ff 92       	push	r15
    2338:	0f 93       	push	r16
    233a:	1f 93       	push	r17
    233c:	cf 93       	push	r28
    233e:	df 93       	push	r29
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	ca 1b       	sub	r28, r26
    2346:	db 0b       	sbc	r29, r27
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	09 94       	ijmp

00002354 <__epilogue_restores__>:
    2354:	2a 88       	ldd	r2, Y+18	; 0x12
    2356:	39 88       	ldd	r3, Y+17	; 0x11
    2358:	48 88       	ldd	r4, Y+16	; 0x10
    235a:	5f 84       	ldd	r5, Y+15	; 0x0f
    235c:	6e 84       	ldd	r6, Y+14	; 0x0e
    235e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2360:	8c 84       	ldd	r8, Y+12	; 0x0c
    2362:	9b 84       	ldd	r9, Y+11	; 0x0b
    2364:	aa 84       	ldd	r10, Y+10	; 0x0a
    2366:	b9 84       	ldd	r11, Y+9	; 0x09
    2368:	c8 84       	ldd	r12, Y+8	; 0x08
    236a:	df 80       	ldd	r13, Y+7	; 0x07
    236c:	ee 80       	ldd	r14, Y+6	; 0x06
    236e:	fd 80       	ldd	r15, Y+5	; 0x05
    2370:	0c 81       	ldd	r16, Y+4	; 0x04
    2372:	1b 81       	ldd	r17, Y+3	; 0x03
    2374:	aa 81       	ldd	r26, Y+2	; 0x02
    2376:	b9 81       	ldd	r27, Y+1	; 0x01
    2378:	ce 0f       	add	r28, r30
    237a:	d1 1d       	adc	r29, r1
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	ed 01       	movw	r28, r26
    2388:	08 95       	ret

0000238a <_exit>:
    238a:	f8 94       	cli

0000238c <__stop_program>:
    238c:	ff cf       	rjmp	.-2      	; 0x238c <__stop_program>
