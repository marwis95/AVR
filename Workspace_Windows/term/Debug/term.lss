
term.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c96  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  00001c96  00001d0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000eb8  00000000  00000000  00001e28  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000008a8  00000000  00000000  00002ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#define LCD_ENABLE_PIN	7
#define SET_HOUR		3
#define SET_MINUTE		4

int main(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	0f 92       	push	r0
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
	unsigned char i;

    LCD_init();
      9c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <LCD_init>
	LCD_goto(1,2);
      a0:	62 e0       	ldi	r22, 0x02	; 2
      a2:	81 e0       	ldi	r24, 0x01	; 1
      a4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <LCD_goto>
	LCD_print("Temperature is");
      a8:	80 e6       	ldi	r24, 0x60	; 96
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	0e 94 81 05 	call	0xb02	; 0xb02 <LCD_print>


	LCD_CNTRL_PORT = (1<<SET_HOUR | 1<<SET_MINUTE);
      b0:	e5 e3       	ldi	r30, 0x35	; 53
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	88 e1       	ldi	r24, 0x18	; 24
      b6:	80 83       	st	Z, r24

	DDRA = 0x00;			// Configure PortA as input
      b8:	ea e3       	ldi	r30, 0x3A	; 58
      ba:	f0 e0       	ldi	r31, 0x00	; 0
      bc:	10 82       	st	Z, r1

	ADCSRA = 0x8F;			// Enable the ADC and its interrupt feature
      be:	e6 e2       	ldi	r30, 0x26	; 38
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	8f e8       	ldi	r24, 0x8F	; 143
      c4:	80 83       	st	Z, r24
					// and set the ACD clock pre-scalar to clk/128
	ADMUX = 0xE0;			// Select internal 2.56V as Vref, left justify
      c6:	e7 e2       	ldi	r30, 0x27	; 39
      c8:	f0 e0       	ldi	r31, 0x00	; 0
      ca:	80 ee       	ldi	r24, 0xE0	; 224
      cc:	80 83       	st	Z, r24
					// data registers and select ADC0 as input channel

	sei();				// Enable Global Interrupts
      ce:	78 94       	sei
	ADCSRA |= 1<<ADSC;		// Start Conversion
      d0:	a6 e2       	ldi	r26, 0x26	; 38
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	e6 e2       	ldi	r30, 0x26	; 38
      d6:	f0 e0       	ldi	r31, 0x00	; 0
      d8:	80 81       	ld	r24, Z
      da:	80 64       	ori	r24, 0x40	; 64
      dc:	8c 93       	st	X, r24
      de:	ff cf       	rjmp	.-2      	; 0xde <main+0x4c>

000000e0 <LCD_send_command>:
	while(1);
}

/* This function sends a command 'cmnd' to the LCD module*/
void LCD_send_command(unsigned char cmnd)
{
      e0:	df 93       	push	r29
      e2:	cf 93       	push	r28
      e4:	cd b7       	in	r28, 0x3d	; 61
      e6:	de b7       	in	r29, 0x3e	; 62
      e8:	e1 97       	sbiw	r28, 0x31	; 49
      ea:	0f b6       	in	r0, 0x3f	; 63
      ec:	f8 94       	cli
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	0f be       	out	0x3f, r0	; 63
      f2:	cd bf       	out	0x3d, r28	; 61
      f4:	89 ab       	std	Y+49, r24	; 0x31
	LCD_DATA_PORT = cmnd;
      f6:	e8 e3       	ldi	r30, 0x38	; 56
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	89 a9       	ldd	r24, Y+49	; 0x31
      fc:	80 83       	st	Z, r24
	LCD_CNTRL_PORT &= ~(1<<LCD_RW_PIN);
      fe:	a5 e3       	ldi	r26, 0x35	; 53
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	e5 e3       	ldi	r30, 0x35	; 53
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	80 81       	ld	r24, Z
     108:	8f 7b       	andi	r24, 0xBF	; 191
     10a:	8c 93       	st	X, r24
	LCD_CNTRL_PORT &= ~(1<<LCD_RS_PIN);
     10c:	a5 e3       	ldi	r26, 0x35	; 53
     10e:	b0 e0       	ldi	r27, 0x00	; 0
     110:	e5 e3       	ldi	r30, 0x35	; 53
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	8f 7d       	andi	r24, 0xDF	; 223
     118:	8c 93       	st	X, r24

	LCD_CNTRL_PORT |= (1<<LCD_ENABLE_PIN);
     11a:	a5 e3       	ldi	r26, 0x35	; 53
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	e5 e3       	ldi	r30, 0x35	; 53
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	80 81       	ld	r24, Z
     124:	80 68       	ori	r24, 0x80	; 128
     126:	8c 93       	st	X, r24
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	a0 e0       	ldi	r26, 0x00	; 0
     12e:	b0 e4       	ldi	r27, 0x40	; 64
     130:	8d a7       	std	Y+45, r24	; 0x2d
     132:	9e a7       	std	Y+46, r25	; 0x2e
     134:	af a7       	std	Y+47, r26	; 0x2f
     136:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     138:	2b ea       	ldi	r18, 0xAB	; 171
     13a:	3a ea       	ldi	r19, 0xAA	; 170
     13c:	4a ea       	ldi	r20, 0xAA	; 170
     13e:	5f e3       	ldi	r21, 0x3F	; 63
     140:	6d a5       	ldd	r22, Y+45	; 0x2d
     142:	7e a5       	ldd	r23, Y+46	; 0x2e
     144:	8f a5       	ldd	r24, Y+47	; 0x2f
     146:	98 a9       	ldd	r25, Y+48	; 0x30
     148:	0e 94 cb 08 	call	0x1196	; 0x1196 <__mulsf3>
     14c:	dc 01       	movw	r26, r24
     14e:	cb 01       	movw	r24, r22
     150:	89 a7       	std	Y+41, r24	; 0x29
     152:	9a a7       	std	Y+42, r25	; 0x2a
     154:	ab a7       	std	Y+43, r26	; 0x2b
     156:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	40 e8       	ldi	r20, 0x80	; 128
     15e:	5f e3       	ldi	r21, 0x3F	; 63
     160:	69 a5       	ldd	r22, Y+41	; 0x29
     162:	7a a5       	ldd	r23, Y+42	; 0x2a
     164:	8b a5       	ldd	r24, Y+43	; 0x2b
     166:	9c a5       	ldd	r25, Y+44	; 0x2c
     168:	0e 94 cf 0a 	call	0x159e	; 0x159e <__ltsf2>
     16c:	88 23       	and	r24, r24
     16e:	1c f4       	brge	.+6      	; 0x176 <LCD_send_command+0x96>
		__ticks = 1;
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	88 a7       	std	Y+40, r24	; 0x28
     174:	91 c0       	rjmp	.+290    	; 0x298 <LCD_send_command+0x1b8>
	else if (__tmp > 255)
     176:	20 e0       	ldi	r18, 0x00	; 0
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	4f e7       	ldi	r20, 0x7F	; 127
     17c:	53 e4       	ldi	r21, 0x43	; 67
     17e:	69 a5       	ldd	r22, Y+41	; 0x29
     180:	7a a5       	ldd	r23, Y+42	; 0x2a
     182:	8b a5       	ldd	r24, Y+43	; 0x2b
     184:	9c a5       	ldd	r25, Y+44	; 0x2c
     186:	0e 94 6f 0a 	call	0x14de	; 0x14de <__gtsf2>
     18a:	18 16       	cp	r1, r24
     18c:	0c f0       	brlt	.+2      	; 0x190 <LCD_send_command+0xb0>
     18e:	7b c0       	rjmp	.+246    	; 0x286 <LCD_send_command+0x1a6>
	{
		_delay_ms(__us / 1000.0);
     190:	20 e0       	ldi	r18, 0x00	; 0
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	4a e7       	ldi	r20, 0x7A	; 122
     196:	54 e4       	ldi	r21, 0x44	; 68
     198:	6d a5       	ldd	r22, Y+45	; 0x2d
     19a:	7e a5       	ldd	r23, Y+46	; 0x2e
     19c:	8f a5       	ldd	r24, Y+47	; 0x2f
     19e:	98 a9       	ldd	r25, Y+48	; 0x30
     1a0:	0e 94 c5 09 	call	0x138a	; 0x138a <__divsf3>
     1a4:	dc 01       	movw	r26, r24
     1a6:	cb 01       	movw	r24, r22
     1a8:	8c a3       	std	Y+36, r24	; 0x24
     1aa:	9d a3       	std	Y+37, r25	; 0x25
     1ac:	ae a3       	std	Y+38, r26	; 0x26
     1ae:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	4a e7       	ldi	r20, 0x7A	; 122
     1b6:	54 e4       	ldi	r21, 0x44	; 68
     1b8:	6c a1       	ldd	r22, Y+36	; 0x24
     1ba:	7d a1       	ldd	r23, Y+37	; 0x25
     1bc:	8e a1       	ldd	r24, Y+38	; 0x26
     1be:	9f a1       	ldd	r25, Y+39	; 0x27
     1c0:	0e 94 cb 08 	call	0x1196	; 0x1196 <__mulsf3>
     1c4:	dc 01       	movw	r26, r24
     1c6:	cb 01       	movw	r24, r22
     1c8:	88 a3       	std	Y+32, r24	; 0x20
     1ca:	99 a3       	std	Y+33, r25	; 0x21
     1cc:	aa a3       	std	Y+34, r26	; 0x22
     1ce:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     1d0:	20 e0       	ldi	r18, 0x00	; 0
     1d2:	30 e0       	ldi	r19, 0x00	; 0
     1d4:	40 e8       	ldi	r20, 0x80	; 128
     1d6:	5f e3       	ldi	r21, 0x3F	; 63
     1d8:	68 a1       	ldd	r22, Y+32	; 0x20
     1da:	79 a1       	ldd	r23, Y+33	; 0x21
     1dc:	8a a1       	ldd	r24, Y+34	; 0x22
     1de:	9b a1       	ldd	r25, Y+35	; 0x23
     1e0:	0e 94 cf 0a 	call	0x159e	; 0x159e <__ltsf2>
     1e4:	88 23       	and	r24, r24
     1e6:	2c f4       	brge	.+10     	; 0x1f2 <LCD_send_command+0x112>
		__ticks = 1;
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	9f 8f       	std	Y+31, r25	; 0x1f
     1ee:	8e 8f       	std	Y+30, r24	; 0x1e
     1f0:	3f c0       	rjmp	.+126    	; 0x270 <LCD_send_command+0x190>
	else if (__tmp > 65535)
     1f2:	20 e0       	ldi	r18, 0x00	; 0
     1f4:	3f ef       	ldi	r19, 0xFF	; 255
     1f6:	4f e7       	ldi	r20, 0x7F	; 127
     1f8:	57 e4       	ldi	r21, 0x47	; 71
     1fa:	68 a1       	ldd	r22, Y+32	; 0x20
     1fc:	79 a1       	ldd	r23, Y+33	; 0x21
     1fe:	8a a1       	ldd	r24, Y+34	; 0x22
     200:	9b a1       	ldd	r25, Y+35	; 0x23
     202:	0e 94 6f 0a 	call	0x14de	; 0x14de <__gtsf2>
     206:	18 16       	cp	r1, r24
     208:	4c f5       	brge	.+82     	; 0x25c <LCD_send_command+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     20a:	20 e0       	ldi	r18, 0x00	; 0
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	40 e2       	ldi	r20, 0x20	; 32
     210:	51 e4       	ldi	r21, 0x41	; 65
     212:	6c a1       	ldd	r22, Y+36	; 0x24
     214:	7d a1       	ldd	r23, Y+37	; 0x25
     216:	8e a1       	ldd	r24, Y+38	; 0x26
     218:	9f a1       	ldd	r25, Y+39	; 0x27
     21a:	0e 94 cb 08 	call	0x1196	; 0x1196 <__mulsf3>
     21e:	dc 01       	movw	r26, r24
     220:	cb 01       	movw	r24, r22
     222:	bc 01       	movw	r22, r24
     224:	cd 01       	movw	r24, r26
     226:	0e 94 f5 06 	call	0xdea	; 0xdea <__fixunssfsi>
     22a:	dc 01       	movw	r26, r24
     22c:	cb 01       	movw	r24, r22
     22e:	9f 8f       	std	Y+31, r25	; 0x1f
     230:	8e 8f       	std	Y+30, r24	; 0x1e
     232:	0f c0       	rjmp	.+30     	; 0x252 <LCD_send_command+0x172>
     234:	84 e6       	ldi	r24, 0x64	; 100
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	9d 8f       	std	Y+29, r25	; 0x1d
     23a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     23c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     23e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     240:	01 97       	sbiw	r24, 0x01	; 1
     242:	f1 f7       	brne	.-4      	; 0x240 <LCD_send_command+0x160>
     244:	9d 8f       	std	Y+29, r25	; 0x1d
     246:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     248:	8e 8d       	ldd	r24, Y+30	; 0x1e
     24a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     24c:	01 97       	sbiw	r24, 0x01	; 1
     24e:	9f 8f       	std	Y+31, r25	; 0x1f
     250:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     252:	8e 8d       	ldd	r24, Y+30	; 0x1e
     254:	9f 8d       	ldd	r25, Y+31	; 0x1f
     256:	00 97       	sbiw	r24, 0x00	; 0
     258:	69 f7       	brne	.-38     	; 0x234 <LCD_send_command+0x154>
     25a:	24 c0       	rjmp	.+72     	; 0x2a4 <LCD_send_command+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     25c:	68 a1       	ldd	r22, Y+32	; 0x20
     25e:	79 a1       	ldd	r23, Y+33	; 0x21
     260:	8a a1       	ldd	r24, Y+34	; 0x22
     262:	9b a1       	ldd	r25, Y+35	; 0x23
     264:	0e 94 f5 06 	call	0xdea	; 0xdea <__fixunssfsi>
     268:	dc 01       	movw	r26, r24
     26a:	cb 01       	movw	r24, r22
     26c:	9f 8f       	std	Y+31, r25	; 0x1f
     26e:	8e 8f       	std	Y+30, r24	; 0x1e
     270:	8e 8d       	ldd	r24, Y+30	; 0x1e
     272:	9f 8d       	ldd	r25, Y+31	; 0x1f
     274:	9b 8f       	std	Y+27, r25	; 0x1b
     276:	8a 8f       	std	Y+26, r24	; 0x1a
     278:	8a 8d       	ldd	r24, Y+26	; 0x1a
     27a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <LCD_send_command+0x19c>
     280:	9b 8f       	std	Y+27, r25	; 0x1b
     282:	8a 8f       	std	Y+26, r24	; 0x1a
     284:	0f c0       	rjmp	.+30     	; 0x2a4 <LCD_send_command+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     286:	69 a5       	ldd	r22, Y+41	; 0x29
     288:	7a a5       	ldd	r23, Y+42	; 0x2a
     28a:	8b a5       	ldd	r24, Y+43	; 0x2b
     28c:	9c a5       	ldd	r25, Y+44	; 0x2c
     28e:	0e 94 f5 06 	call	0xdea	; 0xdea <__fixunssfsi>
     292:	dc 01       	movw	r26, r24
     294:	cb 01       	movw	r24, r22
     296:	88 a7       	std	Y+40, r24	; 0x28
     298:	88 a5       	ldd	r24, Y+40	; 0x28
     29a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     29c:	89 8d       	ldd	r24, Y+25	; 0x19
     29e:	8a 95       	dec	r24
     2a0:	f1 f7       	brne	.-4      	; 0x29e <LCD_send_command+0x1be>
     2a2:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2);
	LCD_CNTRL_PORT &= ~(1<<LCD_ENABLE_PIN);
     2a4:	a5 e3       	ldi	r26, 0x35	; 53
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	e5 e3       	ldi	r30, 0x35	; 53
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	80 81       	ld	r24, Z
     2ae:	8f 77       	andi	r24, 0x7F	; 127
     2b0:	8c 93       	st	X, r24
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	a8 ec       	ldi	r26, 0xC8	; 200
     2b8:	b2 e4       	ldi	r27, 0x42	; 66
     2ba:	8d 8b       	std	Y+21, r24	; 0x15
     2bc:	9e 8b       	std	Y+22, r25	; 0x16
     2be:	af 8b       	std	Y+23, r26	; 0x17
     2c0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     2c2:	2b ea       	ldi	r18, 0xAB	; 171
     2c4:	3a ea       	ldi	r19, 0xAA	; 170
     2c6:	4a ea       	ldi	r20, 0xAA	; 170
     2c8:	5f e3       	ldi	r21, 0x3F	; 63
     2ca:	6d 89       	ldd	r22, Y+21	; 0x15
     2cc:	7e 89       	ldd	r23, Y+22	; 0x16
     2ce:	8f 89       	ldd	r24, Y+23	; 0x17
     2d0:	98 8d       	ldd	r25, Y+24	; 0x18
     2d2:	0e 94 cb 08 	call	0x1196	; 0x1196 <__mulsf3>
     2d6:	dc 01       	movw	r26, r24
     2d8:	cb 01       	movw	r24, r22
     2da:	89 8b       	std	Y+17, r24	; 0x11
     2dc:	9a 8b       	std	Y+18, r25	; 0x12
     2de:	ab 8b       	std	Y+19, r26	; 0x13
     2e0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	5f e3       	ldi	r21, 0x3F	; 63
     2ea:	69 89       	ldd	r22, Y+17	; 0x11
     2ec:	7a 89       	ldd	r23, Y+18	; 0x12
     2ee:	8b 89       	ldd	r24, Y+19	; 0x13
     2f0:	9c 89       	ldd	r25, Y+20	; 0x14
     2f2:	0e 94 cf 0a 	call	0x159e	; 0x159e <__ltsf2>
     2f6:	88 23       	and	r24, r24
     2f8:	1c f4       	brge	.+6      	; 0x300 <LCD_send_command+0x220>
		__ticks = 1;
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	88 8b       	std	Y+16, r24	; 0x10
     2fe:	91 c0       	rjmp	.+290    	; 0x422 <LCD_send_command+0x342>
	else if (__tmp > 255)
     300:	20 e0       	ldi	r18, 0x00	; 0
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	4f e7       	ldi	r20, 0x7F	; 127
     306:	53 e4       	ldi	r21, 0x43	; 67
     308:	69 89       	ldd	r22, Y+17	; 0x11
     30a:	7a 89       	ldd	r23, Y+18	; 0x12
     30c:	8b 89       	ldd	r24, Y+19	; 0x13
     30e:	9c 89       	ldd	r25, Y+20	; 0x14
     310:	0e 94 6f 0a 	call	0x14de	; 0x14de <__gtsf2>
     314:	18 16       	cp	r1, r24
     316:	0c f0       	brlt	.+2      	; 0x31a <LCD_send_command+0x23a>
     318:	7b c0       	rjmp	.+246    	; 0x410 <LCD_send_command+0x330>
	{
		_delay_ms(__us / 1000.0);
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	4a e7       	ldi	r20, 0x7A	; 122
     320:	54 e4       	ldi	r21, 0x44	; 68
     322:	6d 89       	ldd	r22, Y+21	; 0x15
     324:	7e 89       	ldd	r23, Y+22	; 0x16
     326:	8f 89       	ldd	r24, Y+23	; 0x17
     328:	98 8d       	ldd	r25, Y+24	; 0x18
     32a:	0e 94 c5 09 	call	0x138a	; 0x138a <__divsf3>
     32e:	dc 01       	movw	r26, r24
     330:	cb 01       	movw	r24, r22
     332:	8c 87       	std	Y+12, r24	; 0x0c
     334:	9d 87       	std	Y+13, r25	; 0x0d
     336:	ae 87       	std	Y+14, r26	; 0x0e
     338:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	4a e7       	ldi	r20, 0x7A	; 122
     340:	54 e4       	ldi	r21, 0x44	; 68
     342:	6c 85       	ldd	r22, Y+12	; 0x0c
     344:	7d 85       	ldd	r23, Y+13	; 0x0d
     346:	8e 85       	ldd	r24, Y+14	; 0x0e
     348:	9f 85       	ldd	r25, Y+15	; 0x0f
     34a:	0e 94 cb 08 	call	0x1196	; 0x1196 <__mulsf3>
     34e:	dc 01       	movw	r26, r24
     350:	cb 01       	movw	r24, r22
     352:	88 87       	std	Y+8, r24	; 0x08
     354:	99 87       	std	Y+9, r25	; 0x09
     356:	aa 87       	std	Y+10, r26	; 0x0a
     358:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	40 e8       	ldi	r20, 0x80	; 128
     360:	5f e3       	ldi	r21, 0x3F	; 63
     362:	68 85       	ldd	r22, Y+8	; 0x08
     364:	79 85       	ldd	r23, Y+9	; 0x09
     366:	8a 85       	ldd	r24, Y+10	; 0x0a
     368:	9b 85       	ldd	r25, Y+11	; 0x0b
     36a:	0e 94 cf 0a 	call	0x159e	; 0x159e <__ltsf2>
     36e:	88 23       	and	r24, r24
     370:	2c f4       	brge	.+10     	; 0x37c <LCD_send_command+0x29c>
		__ticks = 1;
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	9f 83       	std	Y+7, r25	; 0x07
     378:	8e 83       	std	Y+6, r24	; 0x06
     37a:	3f c0       	rjmp	.+126    	; 0x3fa <LCD_send_command+0x31a>
	else if (__tmp > 65535)
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	3f ef       	ldi	r19, 0xFF	; 255
     380:	4f e7       	ldi	r20, 0x7F	; 127
     382:	57 e4       	ldi	r21, 0x47	; 71
     384:	68 85       	ldd	r22, Y+8	; 0x08
     386:	79 85       	ldd	r23, Y+9	; 0x09
     388:	8a 85       	ldd	r24, Y+10	; 0x0a
     38a:	9b 85       	ldd	r25, Y+11	; 0x0b
     38c:	0e 94 6f 0a 	call	0x14de	; 0x14de <__gtsf2>
     390:	18 16       	cp	r1, r24
     392:	4c f5       	brge	.+82     	; 0x3e6 <LCD_send_command+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	40 e2       	ldi	r20, 0x20	; 32
     39a:	51 e4       	ldi	r21, 0x41	; 65
     39c:	6c 85       	ldd	r22, Y+12	; 0x0c
     39e:	7d 85       	ldd	r23, Y+13	; 0x0d
     3a0:	8e 85       	ldd	r24, Y+14	; 0x0e
     3a2:	9f 85       	ldd	r25, Y+15	; 0x0f
     3a4:	0e 94 cb 08 	call	0x1196	; 0x1196 <__mulsf3>
     3a8:	dc 01       	movw	r26, r24
     3aa:	cb 01       	movw	r24, r22
     3ac:	bc 01       	movw	r22, r24
     3ae:	cd 01       	movw	r24, r26
     3b0:	0e 94 f5 06 	call	0xdea	; 0xdea <__fixunssfsi>
     3b4:	dc 01       	movw	r26, r24
     3b6:	cb 01       	movw	r24, r22
     3b8:	9f 83       	std	Y+7, r25	; 0x07
     3ba:	8e 83       	std	Y+6, r24	; 0x06
     3bc:	0f c0       	rjmp	.+30     	; 0x3dc <LCD_send_command+0x2fc>
     3be:	84 e6       	ldi	r24, 0x64	; 100
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	9d 83       	std	Y+5, r25	; 0x05
     3c4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3c6:	8c 81       	ldd	r24, Y+4	; 0x04
     3c8:	9d 81       	ldd	r25, Y+5	; 0x05
     3ca:	01 97       	sbiw	r24, 0x01	; 1
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <LCD_send_command+0x2ea>
     3ce:	9d 83       	std	Y+5, r25	; 0x05
     3d0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3d2:	8e 81       	ldd	r24, Y+6	; 0x06
     3d4:	9f 81       	ldd	r25, Y+7	; 0x07
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	9f 83       	std	Y+7, r25	; 0x07
     3da:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3dc:	8e 81       	ldd	r24, Y+6	; 0x06
     3de:	9f 81       	ldd	r25, Y+7	; 0x07
     3e0:	00 97       	sbiw	r24, 0x00	; 0
     3e2:	69 f7       	brne	.-38     	; 0x3be <LCD_send_command+0x2de>
     3e4:	24 c0       	rjmp	.+72     	; 0x42e <LCD_send_command+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3e6:	68 85       	ldd	r22, Y+8	; 0x08
     3e8:	79 85       	ldd	r23, Y+9	; 0x09
     3ea:	8a 85       	ldd	r24, Y+10	; 0x0a
     3ec:	9b 85       	ldd	r25, Y+11	; 0x0b
     3ee:	0e 94 f5 06 	call	0xdea	; 0xdea <__fixunssfsi>
     3f2:	dc 01       	movw	r26, r24
     3f4:	cb 01       	movw	r24, r22
     3f6:	9f 83       	std	Y+7, r25	; 0x07
     3f8:	8e 83       	std	Y+6, r24	; 0x06
     3fa:	8e 81       	ldd	r24, Y+6	; 0x06
     3fc:	9f 81       	ldd	r25, Y+7	; 0x07
     3fe:	9b 83       	std	Y+3, r25	; 0x03
     400:	8a 83       	std	Y+2, r24	; 0x02
     402:	8a 81       	ldd	r24, Y+2	; 0x02
     404:	9b 81       	ldd	r25, Y+3	; 0x03
     406:	01 97       	sbiw	r24, 0x01	; 1
     408:	f1 f7       	brne	.-4      	; 0x406 <LCD_send_command+0x326>
     40a:	9b 83       	std	Y+3, r25	; 0x03
     40c:	8a 83       	std	Y+2, r24	; 0x02
     40e:	0f c0       	rjmp	.+30     	; 0x42e <LCD_send_command+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     410:	69 89       	ldd	r22, Y+17	; 0x11
     412:	7a 89       	ldd	r23, Y+18	; 0x12
     414:	8b 89       	ldd	r24, Y+19	; 0x13
     416:	9c 89       	ldd	r25, Y+20	; 0x14
     418:	0e 94 f5 06 	call	0xdea	; 0xdea <__fixunssfsi>
     41c:	dc 01       	movw	r26, r24
     41e:	cb 01       	movw	r24, r22
     420:	88 8b       	std	Y+16, r24	; 0x10
     422:	88 89       	ldd	r24, Y+16	; 0x10
     424:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	8a 95       	dec	r24
     42a:	f1 f7       	brne	.-4      	; 0x428 <LCD_send_command+0x348>
     42c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
}
     42e:	e1 96       	adiw	r28, 0x31	; 49
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	f8 94       	cli
     434:	de bf       	out	0x3e, r29	; 62
     436:	0f be       	out	0x3f, r0	; 63
     438:	cd bf       	out	0x3d, r28	; 61
     43a:	cf 91       	pop	r28
     43c:	df 91       	pop	r29
     43e:	08 95       	ret

00000440 <LCD_send_data>:

/* This function sends the data 'data' to the LCD module*/
void LCD_send_data(unsigned char data)
{
     440:	df 93       	push	r29
     442:	cf 93       	push	r28
     444:	cd b7       	in	r28, 0x3d	; 61
     446:	de b7       	in	r29, 0x3e	; 62
     448:	e1 97       	sbiw	r28, 0x31	; 49
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	f8 94       	cli
     44e:	de bf       	out	0x3e, r29	; 62
     450:	0f be       	out	0x3f, r0	; 63
     452:	cd bf       	out	0x3d, r28	; 61
     454:	89 ab       	std	Y+49, r24	; 0x31
	LCD_DATA_PORT = data;
     456:	e8 e3       	ldi	r30, 0x38	; 56
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	89 a9       	ldd	r24, Y+49	; 0x31
     45c:	80 83       	st	Z, r24
	LCD_CNTRL_PORT &= ~(1<<LCD_RW_PIN);
     45e:	a5 e3       	ldi	r26, 0x35	; 53
     460:	b0 e0       	ldi	r27, 0x00	; 0
     462:	e5 e3       	ldi	r30, 0x35	; 53
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	80 81       	ld	r24, Z
     468:	8f 7b       	andi	r24, 0xBF	; 191
     46a:	8c 93       	st	X, r24
	LCD_CNTRL_PORT |= (1<<LCD_RS_PIN);
     46c:	a5 e3       	ldi	r26, 0x35	; 53
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	e5 e3       	ldi	r30, 0x35	; 53
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	80 62       	ori	r24, 0x20	; 32
     478:	8c 93       	st	X, r24

	LCD_CNTRL_PORT |= (1<<LCD_ENABLE_PIN);
     47a:	a5 e3       	ldi	r26, 0x35	; 53
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	e5 e3       	ldi	r30, 0x35	; 53
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	80 68       	ori	r24, 0x80	; 128
     486:	8c 93       	st	X, r24
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	a0 e0       	ldi	r26, 0x00	; 0
     48e:	b0 e4       	ldi	r27, 0x40	; 64
     490:	8d a7       	std	Y+45, r24	; 0x2d
     492:	9e a7       	std	Y+46, r25	; 0x2e
     494:	af a7       	std	Y+47, r26	; 0x2f
     496:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     498:	2b ea       	ldi	r18, 0xAB	; 171
     49a:	3a ea       	ldi	r19, 0xAA	; 170
     49c:	4a ea       	ldi	r20, 0xAA	; 170
     49e:	5f e3       	ldi	r21, 0x3F	; 63
     4a0:	6d a5       	ldd	r22, Y+45	; 0x2d
     4a2:	7e a5       	ldd	r23, Y+46	; 0x2e
     4a4:	8f a5       	ldd	r24, Y+47	; 0x2f
     4a6:	98 a9       	ldd	r25, Y+48	; 0x30
     4a8:	0e 94 cb 08 	call	0x1196	; 0x1196 <__mulsf3>
     4ac:	dc 01       	movw	r26, r24
     4ae:	cb 01       	movw	r24, r22
     4b0:	89 a7       	std	Y+41, r24	; 0x29
     4b2:	9a a7       	std	Y+42, r25	; 0x2a
     4b4:	ab a7       	std	Y+43, r26	; 0x2b
     4b6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	40 e8       	ldi	r20, 0x80	; 128
     4be:	5f e3       	ldi	r21, 0x3F	; 63
     4c0:	69 a5       	ldd	r22, Y+41	; 0x29
     4c2:	7a a5       	ldd	r23, Y+42	; 0x2a
     4c4:	8b a5       	ldd	r24, Y+43	; 0x2b
     4c6:	9c a5       	ldd	r25, Y+44	; 0x2c
     4c8:	0e 94 cf 0a 	call	0x159e	; 0x159e <__ltsf2>
     4cc:	88 23       	and	r24, r24
     4ce:	1c f4       	brge	.+6      	; 0x4d6 <__stack+0x77>
		__ticks = 1;
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	88 a7       	std	Y+40, r24	; 0x28
     4d4:	91 c0       	rjmp	.+290    	; 0x5f8 <__stack+0x199>
	else if (__tmp > 255)
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	4f e7       	ldi	r20, 0x7F	; 127
     4dc:	53 e4       	ldi	r21, 0x43	; 67
     4de:	69 a5       	ldd	r22, Y+41	; 0x29
     4e0:	7a a5       	ldd	r23, Y+42	; 0x2a
     4e2:	8b a5       	ldd	r24, Y+43	; 0x2b
     4e4:	9c a5       	ldd	r25, Y+44	; 0x2c
     4e6:	0e 94 6f 0a 	call	0x14de	; 0x14de <__gtsf2>
     4ea:	18 16       	cp	r1, r24
     4ec:	0c f0       	brlt	.+2      	; 0x4f0 <__stack+0x91>
     4ee:	7b c0       	rjmp	.+246    	; 0x5e6 <__stack+0x187>
	{
		_delay_ms(__us / 1000.0);
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	4a e7       	ldi	r20, 0x7A	; 122
     4f6:	54 e4       	ldi	r21, 0x44	; 68
     4f8:	6d a5       	ldd	r22, Y+45	; 0x2d
     4fa:	7e a5       	ldd	r23, Y+46	; 0x2e
     4fc:	8f a5       	ldd	r24, Y+47	; 0x2f
     4fe:	98 a9       	ldd	r25, Y+48	; 0x30
     500:	0e 94 c5 09 	call	0x138a	; 0x138a <__divsf3>
     504:	dc 01       	movw	r26, r24
     506:	cb 01       	movw	r24, r22
     508:	8c a3       	std	Y+36, r24	; 0x24
     50a:	9d a3       	std	Y+37, r25	; 0x25
     50c:	ae a3       	std	Y+38, r26	; 0x26
     50e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	4a e7       	ldi	r20, 0x7A	; 122
     516:	54 e4       	ldi	r21, 0x44	; 68
     518:	6c a1       	ldd	r22, Y+36	; 0x24
     51a:	7d a1       	ldd	r23, Y+37	; 0x25
     51c:	8e a1       	ldd	r24, Y+38	; 0x26
     51e:	9f a1       	ldd	r25, Y+39	; 0x27
     520:	0e 94 cb 08 	call	0x1196	; 0x1196 <__mulsf3>
     524:	dc 01       	movw	r26, r24
     526:	cb 01       	movw	r24, r22
     528:	88 a3       	std	Y+32, r24	; 0x20
     52a:	99 a3       	std	Y+33, r25	; 0x21
     52c:	aa a3       	std	Y+34, r26	; 0x22
     52e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	40 e8       	ldi	r20, 0x80	; 128
     536:	5f e3       	ldi	r21, 0x3F	; 63
     538:	68 a1       	ldd	r22, Y+32	; 0x20
     53a:	79 a1       	ldd	r23, Y+33	; 0x21
     53c:	8a a1       	ldd	r24, Y+34	; 0x22
     53e:	9b a1       	ldd	r25, Y+35	; 0x23
     540:	0e 94 cf 0a 	call	0x159e	; 0x159e <__ltsf2>
     544:	88 23       	and	r24, r24
     546:	2c f4       	brge	.+10     	; 0x552 <__stack+0xf3>
		__ticks = 1;
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	9f 8f       	std	Y+31, r25	; 0x1f
     54e:	8e 8f       	std	Y+30, r24	; 0x1e
     550:	3f c0       	rjmp	.+126    	; 0x5d0 <__stack+0x171>
	else if (__tmp > 65535)
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	3f ef       	ldi	r19, 0xFF	; 255
     556:	4f e7       	ldi	r20, 0x7F	; 127
     558:	57 e4       	ldi	r21, 0x47	; 71
     55a:	68 a1       	ldd	r22, Y+32	; 0x20
     55c:	79 a1       	ldd	r23, Y+33	; 0x21
     55e:	8a a1       	ldd	r24, Y+34	; 0x22
     560:	9b a1       	ldd	r25, Y+35	; 0x23
     562:	0e 94 6f 0a 	call	0x14de	; 0x14de <__gtsf2>
     566:	18 16       	cp	r1, r24
     568:	4c f5       	brge	.+82     	; 0x5bc <__stack+0x15d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	40 e2       	ldi	r20, 0x20	; 32
     570:	51 e4       	ldi	r21, 0x41	; 65
     572:	6c a1       	ldd	r22, Y+36	; 0x24
     574:	7d a1       	ldd	r23, Y+37	; 0x25
     576:	8e a1       	ldd	r24, Y+38	; 0x26
     578:	9f a1       	ldd	r25, Y+39	; 0x27
     57a:	0e 94 cb 08 	call	0x1196	; 0x1196 <__mulsf3>
     57e:	dc 01       	movw	r26, r24
     580:	cb 01       	movw	r24, r22
     582:	bc 01       	movw	r22, r24
     584:	cd 01       	movw	r24, r26
     586:	0e 94 f5 06 	call	0xdea	; 0xdea <__fixunssfsi>
     58a:	dc 01       	movw	r26, r24
     58c:	cb 01       	movw	r24, r22
     58e:	9f 8f       	std	Y+31, r25	; 0x1f
     590:	8e 8f       	std	Y+30, r24	; 0x1e
     592:	0f c0       	rjmp	.+30     	; 0x5b2 <__stack+0x153>
     594:	84 e6       	ldi	r24, 0x64	; 100
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	9d 8f       	std	Y+29, r25	; 0x1d
     59a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     59c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     59e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     5a0:	01 97       	sbiw	r24, 0x01	; 1
     5a2:	f1 f7       	brne	.-4      	; 0x5a0 <__stack+0x141>
     5a4:	9d 8f       	std	Y+29, r25	; 0x1d
     5a6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     5aa:	9f 8d       	ldd	r25, Y+31	; 0x1f
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	9f 8f       	std	Y+31, r25	; 0x1f
     5b0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     5b4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     5b6:	00 97       	sbiw	r24, 0x00	; 0
     5b8:	69 f7       	brne	.-38     	; 0x594 <__stack+0x135>
     5ba:	24 c0       	rjmp	.+72     	; 0x604 <__stack+0x1a5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5bc:	68 a1       	ldd	r22, Y+32	; 0x20
     5be:	79 a1       	ldd	r23, Y+33	; 0x21
     5c0:	8a a1       	ldd	r24, Y+34	; 0x22
     5c2:	9b a1       	ldd	r25, Y+35	; 0x23
     5c4:	0e 94 f5 06 	call	0xdea	; 0xdea <__fixunssfsi>
     5c8:	dc 01       	movw	r26, r24
     5ca:	cb 01       	movw	r24, r22
     5cc:	9f 8f       	std	Y+31, r25	; 0x1f
     5ce:	8e 8f       	std	Y+30, r24	; 0x1e
     5d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     5d2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     5d4:	9b 8f       	std	Y+27, r25	; 0x1b
     5d6:	8a 8f       	std	Y+26, r24	; 0x1a
     5d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     5da:	9b 8d       	ldd	r25, Y+27	; 0x1b
     5dc:	01 97       	sbiw	r24, 0x01	; 1
     5de:	f1 f7       	brne	.-4      	; 0x5dc <__stack+0x17d>
     5e0:	9b 8f       	std	Y+27, r25	; 0x1b
     5e2:	8a 8f       	std	Y+26, r24	; 0x1a
     5e4:	0f c0       	rjmp	.+30     	; 0x604 <__stack+0x1a5>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     5e6:	69 a5       	ldd	r22, Y+41	; 0x29
     5e8:	7a a5       	ldd	r23, Y+42	; 0x2a
     5ea:	8b a5       	ldd	r24, Y+43	; 0x2b
     5ec:	9c a5       	ldd	r25, Y+44	; 0x2c
     5ee:	0e 94 f5 06 	call	0xdea	; 0xdea <__fixunssfsi>
     5f2:	dc 01       	movw	r26, r24
     5f4:	cb 01       	movw	r24, r22
     5f6:	88 a7       	std	Y+40, r24	; 0x28
     5f8:	88 a5       	ldd	r24, Y+40	; 0x28
     5fa:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     5fc:	89 8d       	ldd	r24, Y+25	; 0x19
     5fe:	8a 95       	dec	r24
     600:	f1 f7       	brne	.-4      	; 0x5fe <__stack+0x19f>
     602:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2);
	LCD_CNTRL_PORT &= ~(1<<LCD_ENABLE_PIN);
     604:	a5 e3       	ldi	r26, 0x35	; 53
     606:	b0 e0       	ldi	r27, 0x00	; 0
     608:	e5 e3       	ldi	r30, 0x35	; 53
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	8f 77       	andi	r24, 0x7F	; 127
     610:	8c 93       	st	X, r24
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	a8 ec       	ldi	r26, 0xC8	; 200
     618:	b2 e4       	ldi	r27, 0x42	; 66
     61a:	8d 8b       	std	Y+21, r24	; 0x15
     61c:	9e 8b       	std	Y+22, r25	; 0x16
     61e:	af 8b       	std	Y+23, r26	; 0x17
     620:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     622:	2b ea       	ldi	r18, 0xAB	; 171
     624:	3a ea       	ldi	r19, 0xAA	; 170
     626:	4a ea       	ldi	r20, 0xAA	; 170
     628:	5f e3       	ldi	r21, 0x3F	; 63
     62a:	6d 89       	ldd	r22, Y+21	; 0x15
     62c:	7e 89       	ldd	r23, Y+22	; 0x16
     62e:	8f 89       	ldd	r24, Y+23	; 0x17
     630:	98 8d       	ldd	r25, Y+24	; 0x18
     632:	0e 94 cb 08 	call	0x1196	; 0x1196 <__mulsf3>
     636:	dc 01       	movw	r26, r24
     638:	cb 01       	movw	r24, r22
     63a:	89 8b       	std	Y+17, r24	; 0x11
     63c:	9a 8b       	std	Y+18, r25	; 0x12
     63e:	ab 8b       	std	Y+19, r26	; 0x13
     640:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     642:	20 e0       	ldi	r18, 0x00	; 0
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	40 e8       	ldi	r20, 0x80	; 128
     648:	5f e3       	ldi	r21, 0x3F	; 63
     64a:	69 89       	ldd	r22, Y+17	; 0x11
     64c:	7a 89       	ldd	r23, Y+18	; 0x12
     64e:	8b 89       	ldd	r24, Y+19	; 0x13
     650:	9c 89       	ldd	r25, Y+20	; 0x14
     652:	0e 94 cf 0a 	call	0x159e	; 0x159e <__ltsf2>
     656:	88 23       	and	r24, r24
     658:	1c f4       	brge	.+6      	; 0x660 <__stack+0x201>
		__ticks = 1;
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	88 8b       	std	Y+16, r24	; 0x10
     65e:	91 c0       	rjmp	.+290    	; 0x782 <__stack+0x323>
	else if (__tmp > 255)
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	4f e7       	ldi	r20, 0x7F	; 127
     666:	53 e4       	ldi	r21, 0x43	; 67
     668:	69 89       	ldd	r22, Y+17	; 0x11
     66a:	7a 89       	ldd	r23, Y+18	; 0x12
     66c:	8b 89       	ldd	r24, Y+19	; 0x13
     66e:	9c 89       	ldd	r25, Y+20	; 0x14
     670:	0e 94 6f 0a 	call	0x14de	; 0x14de <__gtsf2>
     674:	18 16       	cp	r1, r24
     676:	0c f0       	brlt	.+2      	; 0x67a <__stack+0x21b>
     678:	7b c0       	rjmp	.+246    	; 0x770 <__stack+0x311>
	{
		_delay_ms(__us / 1000.0);
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	4a e7       	ldi	r20, 0x7A	; 122
     680:	54 e4       	ldi	r21, 0x44	; 68
     682:	6d 89       	ldd	r22, Y+21	; 0x15
     684:	7e 89       	ldd	r23, Y+22	; 0x16
     686:	8f 89       	ldd	r24, Y+23	; 0x17
     688:	98 8d       	ldd	r25, Y+24	; 0x18
     68a:	0e 94 c5 09 	call	0x138a	; 0x138a <__divsf3>
     68e:	dc 01       	movw	r26, r24
     690:	cb 01       	movw	r24, r22
     692:	8c 87       	std	Y+12, r24	; 0x0c
     694:	9d 87       	std	Y+13, r25	; 0x0d
     696:	ae 87       	std	Y+14, r26	; 0x0e
     698:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	4a e7       	ldi	r20, 0x7A	; 122
     6a0:	54 e4       	ldi	r21, 0x44	; 68
     6a2:	6c 85       	ldd	r22, Y+12	; 0x0c
     6a4:	7d 85       	ldd	r23, Y+13	; 0x0d
     6a6:	8e 85       	ldd	r24, Y+14	; 0x0e
     6a8:	9f 85       	ldd	r25, Y+15	; 0x0f
     6aa:	0e 94 cb 08 	call	0x1196	; 0x1196 <__mulsf3>
     6ae:	dc 01       	movw	r26, r24
     6b0:	cb 01       	movw	r24, r22
     6b2:	88 87       	std	Y+8, r24	; 0x08
     6b4:	99 87       	std	Y+9, r25	; 0x09
     6b6:	aa 87       	std	Y+10, r26	; 0x0a
     6b8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e8       	ldi	r20, 0x80	; 128
     6c0:	5f e3       	ldi	r21, 0x3F	; 63
     6c2:	68 85       	ldd	r22, Y+8	; 0x08
     6c4:	79 85       	ldd	r23, Y+9	; 0x09
     6c6:	8a 85       	ldd	r24, Y+10	; 0x0a
     6c8:	9b 85       	ldd	r25, Y+11	; 0x0b
     6ca:	0e 94 cf 0a 	call	0x159e	; 0x159e <__ltsf2>
     6ce:	88 23       	and	r24, r24
     6d0:	2c f4       	brge	.+10     	; 0x6dc <__stack+0x27d>
		__ticks = 1;
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	9f 83       	std	Y+7, r25	; 0x07
     6d8:	8e 83       	std	Y+6, r24	; 0x06
     6da:	3f c0       	rjmp	.+126    	; 0x75a <__stack+0x2fb>
	else if (__tmp > 65535)
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	3f ef       	ldi	r19, 0xFF	; 255
     6e0:	4f e7       	ldi	r20, 0x7F	; 127
     6e2:	57 e4       	ldi	r21, 0x47	; 71
     6e4:	68 85       	ldd	r22, Y+8	; 0x08
     6e6:	79 85       	ldd	r23, Y+9	; 0x09
     6e8:	8a 85       	ldd	r24, Y+10	; 0x0a
     6ea:	9b 85       	ldd	r25, Y+11	; 0x0b
     6ec:	0e 94 6f 0a 	call	0x14de	; 0x14de <__gtsf2>
     6f0:	18 16       	cp	r1, r24
     6f2:	4c f5       	brge	.+82     	; 0x746 <__stack+0x2e7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	40 e2       	ldi	r20, 0x20	; 32
     6fa:	51 e4       	ldi	r21, 0x41	; 65
     6fc:	6c 85       	ldd	r22, Y+12	; 0x0c
     6fe:	7d 85       	ldd	r23, Y+13	; 0x0d
     700:	8e 85       	ldd	r24, Y+14	; 0x0e
     702:	9f 85       	ldd	r25, Y+15	; 0x0f
     704:	0e 94 cb 08 	call	0x1196	; 0x1196 <__mulsf3>
     708:	dc 01       	movw	r26, r24
     70a:	cb 01       	movw	r24, r22
     70c:	bc 01       	movw	r22, r24
     70e:	cd 01       	movw	r24, r26
     710:	0e 94 f5 06 	call	0xdea	; 0xdea <__fixunssfsi>
     714:	dc 01       	movw	r26, r24
     716:	cb 01       	movw	r24, r22
     718:	9f 83       	std	Y+7, r25	; 0x07
     71a:	8e 83       	std	Y+6, r24	; 0x06
     71c:	0f c0       	rjmp	.+30     	; 0x73c <__stack+0x2dd>
     71e:	84 e6       	ldi	r24, 0x64	; 100
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	9d 83       	std	Y+5, r25	; 0x05
     724:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     726:	8c 81       	ldd	r24, Y+4	; 0x04
     728:	9d 81       	ldd	r25, Y+5	; 0x05
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <__stack+0x2cb>
     72e:	9d 83       	std	Y+5, r25	; 0x05
     730:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     732:	8e 81       	ldd	r24, Y+6	; 0x06
     734:	9f 81       	ldd	r25, Y+7	; 0x07
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	9f 83       	std	Y+7, r25	; 0x07
     73a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     73c:	8e 81       	ldd	r24, Y+6	; 0x06
     73e:	9f 81       	ldd	r25, Y+7	; 0x07
     740:	00 97       	sbiw	r24, 0x00	; 0
     742:	69 f7       	brne	.-38     	; 0x71e <__stack+0x2bf>
     744:	24 c0       	rjmp	.+72     	; 0x78e <__stack+0x32f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     746:	68 85       	ldd	r22, Y+8	; 0x08
     748:	79 85       	ldd	r23, Y+9	; 0x09
     74a:	8a 85       	ldd	r24, Y+10	; 0x0a
     74c:	9b 85       	ldd	r25, Y+11	; 0x0b
     74e:	0e 94 f5 06 	call	0xdea	; 0xdea <__fixunssfsi>
     752:	dc 01       	movw	r26, r24
     754:	cb 01       	movw	r24, r22
     756:	9f 83       	std	Y+7, r25	; 0x07
     758:	8e 83       	std	Y+6, r24	; 0x06
     75a:	8e 81       	ldd	r24, Y+6	; 0x06
     75c:	9f 81       	ldd	r25, Y+7	; 0x07
     75e:	9b 83       	std	Y+3, r25	; 0x03
     760:	8a 83       	std	Y+2, r24	; 0x02
     762:	8a 81       	ldd	r24, Y+2	; 0x02
     764:	9b 81       	ldd	r25, Y+3	; 0x03
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	f1 f7       	brne	.-4      	; 0x766 <__stack+0x307>
     76a:	9b 83       	std	Y+3, r25	; 0x03
     76c:	8a 83       	std	Y+2, r24	; 0x02
     76e:	0f c0       	rjmp	.+30     	; 0x78e <__stack+0x32f>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     770:	69 89       	ldd	r22, Y+17	; 0x11
     772:	7a 89       	ldd	r23, Y+18	; 0x12
     774:	8b 89       	ldd	r24, Y+19	; 0x13
     776:	9c 89       	ldd	r25, Y+20	; 0x14
     778:	0e 94 f5 06 	call	0xdea	; 0xdea <__fixunssfsi>
     77c:	dc 01       	movw	r26, r24
     77e:	cb 01       	movw	r24, r22
     780:	88 8b       	std	Y+16, r24	; 0x10
     782:	88 89       	ldd	r24, Y+16	; 0x10
     784:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	8a 95       	dec	r24
     78a:	f1 f7       	brne	.-4      	; 0x788 <__stack+0x329>
     78c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
}
     78e:	e1 96       	adiw	r28, 0x31	; 49
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	cf 91       	pop	r28
     79c:	df 91       	pop	r29
     79e:	08 95       	ret

000007a0 <LCD_init>:

void LCD_init()
{
     7a0:	df 93       	push	r29
     7a2:	cf 93       	push	r28
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	6c 97       	sbiw	r28, 0x1c	; 28
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	cd bf       	out	0x3d, r28	; 61
	LCD_CNTRL_DDR = 0xFF;
     7b4:	e4 e3       	ldi	r30, 0x34	; 52
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	8f ef       	ldi	r24, 0xFF	; 255
     7ba:	80 83       	st	Z, r24
	LCD_CNTRL_PORT = 0x00;
     7bc:	e5 e3       	ldi	r30, 0x35	; 53
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	10 82       	st	Z, r1
	LCD_DATA_DDR = 0xFF;
     7c2:	e7 e3       	ldi	r30, 0x37	; 55
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	8f ef       	ldi	r24, 0xFF	; 255
     7c8:	80 83       	st	Z, r24
	LCD_DATA_PORT = 0x00;
     7ca:	e8 e3       	ldi	r30, 0x38	; 56
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	10 82       	st	Z, r1
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	a0 e2       	ldi	r26, 0x20	; 32
     7d6:	b1 e4       	ldi	r27, 0x41	; 65
     7d8:	89 8f       	std	Y+25, r24	; 0x19
     7da:	9a 8f       	std	Y+26, r25	; 0x1a
     7dc:	ab 8f       	std	Y+27, r26	; 0x1b
     7de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	4a e7       	ldi	r20, 0x7A	; 122
     7e6:	54 e4       	ldi	r21, 0x44	; 68
     7e8:	69 8d       	ldd	r22, Y+25	; 0x19
     7ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
     7ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7f0:	0e 94 cb 08 	call	0x1196	; 0x1196 <__mulsf3>
     7f4:	dc 01       	movw	r26, r24
     7f6:	cb 01       	movw	r24, r22
     7f8:	8d 8b       	std	Y+21, r24	; 0x15
     7fa:	9e 8b       	std	Y+22, r25	; 0x16
     7fc:	af 8b       	std	Y+23, r26	; 0x17
     7fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	40 e8       	ldi	r20, 0x80	; 128
     806:	5f e3       	ldi	r21, 0x3F	; 63
     808:	6d 89       	ldd	r22, Y+21	; 0x15
     80a:	7e 89       	ldd	r23, Y+22	; 0x16
     80c:	8f 89       	ldd	r24, Y+23	; 0x17
     80e:	98 8d       	ldd	r25, Y+24	; 0x18
     810:	0e 94 cf 0a 	call	0x159e	; 0x159e <__ltsf2>
     814:	88 23       	and	r24, r24
     816:	2c f4       	brge	.+10     	; 0x822 <LCD_init+0x82>
		__ticks = 1;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	9c 8b       	std	Y+20, r25	; 0x14
     81e:	8b 8b       	std	Y+19, r24	; 0x13
     820:	3f c0       	rjmp	.+126    	; 0x8a0 <LCD_init+0x100>
	else if (__tmp > 65535)
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	3f ef       	ldi	r19, 0xFF	; 255
     826:	4f e7       	ldi	r20, 0x7F	; 127
     828:	57 e4       	ldi	r21, 0x47	; 71
     82a:	6d 89       	ldd	r22, Y+21	; 0x15
     82c:	7e 89       	ldd	r23, Y+22	; 0x16
     82e:	8f 89       	ldd	r24, Y+23	; 0x17
     830:	98 8d       	ldd	r25, Y+24	; 0x18
     832:	0e 94 6f 0a 	call	0x14de	; 0x14de <__gtsf2>
     836:	18 16       	cp	r1, r24
     838:	4c f5       	brge	.+82     	; 0x88c <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	40 e2       	ldi	r20, 0x20	; 32
     840:	51 e4       	ldi	r21, 0x41	; 65
     842:	69 8d       	ldd	r22, Y+25	; 0x19
     844:	7a 8d       	ldd	r23, Y+26	; 0x1a
     846:	8b 8d       	ldd	r24, Y+27	; 0x1b
     848:	9c 8d       	ldd	r25, Y+28	; 0x1c
     84a:	0e 94 cb 08 	call	0x1196	; 0x1196 <__mulsf3>
     84e:	dc 01       	movw	r26, r24
     850:	cb 01       	movw	r24, r22
     852:	bc 01       	movw	r22, r24
     854:	cd 01       	movw	r24, r26
     856:	0e 94 f5 06 	call	0xdea	; 0xdea <__fixunssfsi>
     85a:	dc 01       	movw	r26, r24
     85c:	cb 01       	movw	r24, r22
     85e:	9c 8b       	std	Y+20, r25	; 0x14
     860:	8b 8b       	std	Y+19, r24	; 0x13
     862:	0f c0       	rjmp	.+30     	; 0x882 <LCD_init+0xe2>
     864:	84 e6       	ldi	r24, 0x64	; 100
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	9a 8b       	std	Y+18, r25	; 0x12
     86a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     86c:	89 89       	ldd	r24, Y+17	; 0x11
     86e:	9a 89       	ldd	r25, Y+18	; 0x12
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	f1 f7       	brne	.-4      	; 0x870 <LCD_init+0xd0>
     874:	9a 8b       	std	Y+18, r25	; 0x12
     876:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     878:	8b 89       	ldd	r24, Y+19	; 0x13
     87a:	9c 89       	ldd	r25, Y+20	; 0x14
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	9c 8b       	std	Y+20, r25	; 0x14
     880:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     882:	8b 89       	ldd	r24, Y+19	; 0x13
     884:	9c 89       	ldd	r25, Y+20	; 0x14
     886:	00 97       	sbiw	r24, 0x00	; 0
     888:	69 f7       	brne	.-38     	; 0x864 <LCD_init+0xc4>
     88a:	14 c0       	rjmp	.+40     	; 0x8b4 <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     88c:	6d 89       	ldd	r22, Y+21	; 0x15
     88e:	7e 89       	ldd	r23, Y+22	; 0x16
     890:	8f 89       	ldd	r24, Y+23	; 0x17
     892:	98 8d       	ldd	r25, Y+24	; 0x18
     894:	0e 94 f5 06 	call	0xdea	; 0xdea <__fixunssfsi>
     898:	dc 01       	movw	r26, r24
     89a:	cb 01       	movw	r24, r22
     89c:	9c 8b       	std	Y+20, r25	; 0x14
     89e:	8b 8b       	std	Y+19, r24	; 0x13
     8a0:	8b 89       	ldd	r24, Y+19	; 0x13
     8a2:	9c 89       	ldd	r25, Y+20	; 0x14
     8a4:	98 8b       	std	Y+16, r25	; 0x10
     8a6:	8f 87       	std	Y+15, r24	; 0x0f
     8a8:	8f 85       	ldd	r24, Y+15	; 0x0f
     8aa:	98 89       	ldd	r25, Y+16	; 0x10
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <LCD_init+0x10c>
     8b0:	98 8b       	std	Y+16, r25	; 0x10
     8b2:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(10);
	LCD_send_command(0x38);
     8b4:	88 e3       	ldi	r24, 0x38	; 56
     8b6:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_send_command>
	LCD_send_command(0x0C);
     8ba:	8c e0       	ldi	r24, 0x0C	; 12
     8bc:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_send_command>
	LCD_send_command(0x01);
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_send_command>
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	a0 e2       	ldi	r26, 0x20	; 32
     8cc:	b1 e4       	ldi	r27, 0x41	; 65
     8ce:	8b 87       	std	Y+11, r24	; 0x0b
     8d0:	9c 87       	std	Y+12, r25	; 0x0c
     8d2:	ad 87       	std	Y+13, r26	; 0x0d
     8d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	4a e7       	ldi	r20, 0x7A	; 122
     8dc:	54 e4       	ldi	r21, 0x44	; 68
     8de:	6b 85       	ldd	r22, Y+11	; 0x0b
     8e0:	7c 85       	ldd	r23, Y+12	; 0x0c
     8e2:	8d 85       	ldd	r24, Y+13	; 0x0d
     8e4:	9e 85       	ldd	r25, Y+14	; 0x0e
     8e6:	0e 94 cb 08 	call	0x1196	; 0x1196 <__mulsf3>
     8ea:	dc 01       	movw	r26, r24
     8ec:	cb 01       	movw	r24, r22
     8ee:	8f 83       	std	Y+7, r24	; 0x07
     8f0:	98 87       	std	Y+8, r25	; 0x08
     8f2:	a9 87       	std	Y+9, r26	; 0x09
     8f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	40 e8       	ldi	r20, 0x80	; 128
     8fc:	5f e3       	ldi	r21, 0x3F	; 63
     8fe:	6f 81       	ldd	r22, Y+7	; 0x07
     900:	78 85       	ldd	r23, Y+8	; 0x08
     902:	89 85       	ldd	r24, Y+9	; 0x09
     904:	9a 85       	ldd	r25, Y+10	; 0x0a
     906:	0e 94 cf 0a 	call	0x159e	; 0x159e <__ltsf2>
     90a:	88 23       	and	r24, r24
     90c:	2c f4       	brge	.+10     	; 0x918 <LCD_init+0x178>
		__ticks = 1;
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	9e 83       	std	Y+6, r25	; 0x06
     914:	8d 83       	std	Y+5, r24	; 0x05
     916:	3f c0       	rjmp	.+126    	; 0x996 <LCD_init+0x1f6>
	else if (__tmp > 65535)
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	3f ef       	ldi	r19, 0xFF	; 255
     91c:	4f e7       	ldi	r20, 0x7F	; 127
     91e:	57 e4       	ldi	r21, 0x47	; 71
     920:	6f 81       	ldd	r22, Y+7	; 0x07
     922:	78 85       	ldd	r23, Y+8	; 0x08
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	9a 85       	ldd	r25, Y+10	; 0x0a
     928:	0e 94 6f 0a 	call	0x14de	; 0x14de <__gtsf2>
     92c:	18 16       	cp	r1, r24
     92e:	4c f5       	brge	.+82     	; 0x982 <LCD_init+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e2       	ldi	r20, 0x20	; 32
     936:	51 e4       	ldi	r21, 0x41	; 65
     938:	6b 85       	ldd	r22, Y+11	; 0x0b
     93a:	7c 85       	ldd	r23, Y+12	; 0x0c
     93c:	8d 85       	ldd	r24, Y+13	; 0x0d
     93e:	9e 85       	ldd	r25, Y+14	; 0x0e
     940:	0e 94 cb 08 	call	0x1196	; 0x1196 <__mulsf3>
     944:	dc 01       	movw	r26, r24
     946:	cb 01       	movw	r24, r22
     948:	bc 01       	movw	r22, r24
     94a:	cd 01       	movw	r24, r26
     94c:	0e 94 f5 06 	call	0xdea	; 0xdea <__fixunssfsi>
     950:	dc 01       	movw	r26, r24
     952:	cb 01       	movw	r24, r22
     954:	9e 83       	std	Y+6, r25	; 0x06
     956:	8d 83       	std	Y+5, r24	; 0x05
     958:	0f c0       	rjmp	.+30     	; 0x978 <LCD_init+0x1d8>
     95a:	84 e6       	ldi	r24, 0x64	; 100
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	9c 83       	std	Y+4, r25	; 0x04
     960:	8b 83       	std	Y+3, r24	; 0x03
     962:	8b 81       	ldd	r24, Y+3	; 0x03
     964:	9c 81       	ldd	r25, Y+4	; 0x04
     966:	01 97       	sbiw	r24, 0x01	; 1
     968:	f1 f7       	brne	.-4      	; 0x966 <LCD_init+0x1c6>
     96a:	9c 83       	std	Y+4, r25	; 0x04
     96c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     96e:	8d 81       	ldd	r24, Y+5	; 0x05
     970:	9e 81       	ldd	r25, Y+6	; 0x06
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	9e 83       	std	Y+6, r25	; 0x06
     976:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	9e 81       	ldd	r25, Y+6	; 0x06
     97c:	00 97       	sbiw	r24, 0x00	; 0
     97e:	69 f7       	brne	.-38     	; 0x95a <LCD_init+0x1ba>
     980:	14 c0       	rjmp	.+40     	; 0x9aa <LCD_init+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     982:	6f 81       	ldd	r22, Y+7	; 0x07
     984:	78 85       	ldd	r23, Y+8	; 0x08
     986:	89 85       	ldd	r24, Y+9	; 0x09
     988:	9a 85       	ldd	r25, Y+10	; 0x0a
     98a:	0e 94 f5 06 	call	0xdea	; 0xdea <__fixunssfsi>
     98e:	dc 01       	movw	r26, r24
     990:	cb 01       	movw	r24, r22
     992:	9e 83       	std	Y+6, r25	; 0x06
     994:	8d 83       	std	Y+5, r24	; 0x05
     996:	8d 81       	ldd	r24, Y+5	; 0x05
     998:	9e 81       	ldd	r25, Y+6	; 0x06
     99a:	9a 83       	std	Y+2, r25	; 0x02
     99c:	89 83       	std	Y+1, r24	; 0x01
     99e:	89 81       	ldd	r24, Y+1	; 0x01
     9a0:	9a 81       	ldd	r25, Y+2	; 0x02
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <LCD_init+0x202>
     9a6:	9a 83       	std	Y+2, r25	; 0x02
     9a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	LCD_send_command(0x06);
     9aa:	86 e0       	ldi	r24, 0x06	; 6
     9ac:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_send_command>
}
     9b0:	6c 96       	adiw	r28, 0x1c	; 28
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	cf 91       	pop	r28
     9be:	df 91       	pop	r29
     9c0:	08 95       	ret

000009c2 <LCD_goto>:

/* This function moves the cursor the line y column x on the LCD module*/
void LCD_goto(unsigned char y, unsigned char x)
{
     9c2:	df 93       	push	r29
     9c4:	cf 93       	push	r28
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
     9ca:	64 97       	sbiw	r28, 0x14	; 20
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	f8 94       	cli
     9d0:	de bf       	out	0x3e, r29	; 62
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	cd bf       	out	0x3d, r28	; 61
     9d6:	8b 8b       	std	Y+19, r24	; 0x13
     9d8:	6c 8b       	std	Y+20, r22	; 0x14
	unsigned char firstAddress[] = {0x80,0xC0,0x94,0xD4};
     9da:	80 e8       	ldi	r24, 0x80	; 128
     9dc:	8f 87       	std	Y+15, r24	; 0x0f
     9de:	80 ec       	ldi	r24, 0xC0	; 192
     9e0:	88 8b       	std	Y+16, r24	; 0x10
     9e2:	84 e9       	ldi	r24, 0x94	; 148
     9e4:	89 8b       	std	Y+17, r24	; 0x11
     9e6:	84 ed       	ldi	r24, 0xD4	; 212
     9e8:	8a 8b       	std	Y+18, r24	; 0x12

	LCD_send_command(firstAddress[y-1] + x-1);
     9ea:	8b 89       	ldd	r24, Y+19	; 0x13
     9ec:	88 2f       	mov	r24, r24
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	9c 01       	movw	r18, r24
     9f2:	21 50       	subi	r18, 0x01	; 1
     9f4:	30 40       	sbci	r19, 0x00	; 0
     9f6:	ce 01       	movw	r24, r28
     9f8:	0f 96       	adiw	r24, 0x0f	; 15
     9fa:	fc 01       	movw	r30, r24
     9fc:	e2 0f       	add	r30, r18
     9fe:	f3 1f       	adc	r31, r19
     a00:	90 81       	ld	r25, Z
     a02:	8c 89       	ldd	r24, Y+20	; 0x14
     a04:	89 0f       	add	r24, r25
     a06:	81 50       	subi	r24, 0x01	; 1
     a08:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_send_command>
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	a0 e2       	ldi	r26, 0x20	; 32
     a12:	b1 e4       	ldi	r27, 0x41	; 65
     a14:	8b 87       	std	Y+11, r24	; 0x0b
     a16:	9c 87       	std	Y+12, r25	; 0x0c
     a18:	ad 87       	std	Y+13, r26	; 0x0d
     a1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	4a e7       	ldi	r20, 0x7A	; 122
     a22:	54 e4       	ldi	r21, 0x44	; 68
     a24:	6b 85       	ldd	r22, Y+11	; 0x0b
     a26:	7c 85       	ldd	r23, Y+12	; 0x0c
     a28:	8d 85       	ldd	r24, Y+13	; 0x0d
     a2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     a2c:	0e 94 cb 08 	call	0x1196	; 0x1196 <__mulsf3>
     a30:	dc 01       	movw	r26, r24
     a32:	cb 01       	movw	r24, r22
     a34:	8f 83       	std	Y+7, r24	; 0x07
     a36:	98 87       	std	Y+8, r25	; 0x08
     a38:	a9 87       	std	Y+9, r26	; 0x09
     a3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	40 e8       	ldi	r20, 0x80	; 128
     a42:	5f e3       	ldi	r21, 0x3F	; 63
     a44:	6f 81       	ldd	r22, Y+7	; 0x07
     a46:	78 85       	ldd	r23, Y+8	; 0x08
     a48:	89 85       	ldd	r24, Y+9	; 0x09
     a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     a4c:	0e 94 cf 0a 	call	0x159e	; 0x159e <__ltsf2>
     a50:	88 23       	and	r24, r24
     a52:	2c f4       	brge	.+10     	; 0xa5e <LCD_goto+0x9c>
		__ticks = 1;
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	9e 83       	std	Y+6, r25	; 0x06
     a5a:	8d 83       	std	Y+5, r24	; 0x05
     a5c:	3f c0       	rjmp	.+126    	; 0xadc <LCD_goto+0x11a>
	else if (__tmp > 65535)
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	3f ef       	ldi	r19, 0xFF	; 255
     a62:	4f e7       	ldi	r20, 0x7F	; 127
     a64:	57 e4       	ldi	r21, 0x47	; 71
     a66:	6f 81       	ldd	r22, Y+7	; 0x07
     a68:	78 85       	ldd	r23, Y+8	; 0x08
     a6a:	89 85       	ldd	r24, Y+9	; 0x09
     a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a6e:	0e 94 6f 0a 	call	0x14de	; 0x14de <__gtsf2>
     a72:	18 16       	cp	r1, r24
     a74:	4c f5       	brge	.+82     	; 0xac8 <LCD_goto+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a76:	20 e0       	ldi	r18, 0x00	; 0
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	40 e2       	ldi	r20, 0x20	; 32
     a7c:	51 e4       	ldi	r21, 0x41	; 65
     a7e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a80:	7c 85       	ldd	r23, Y+12	; 0x0c
     a82:	8d 85       	ldd	r24, Y+13	; 0x0d
     a84:	9e 85       	ldd	r25, Y+14	; 0x0e
     a86:	0e 94 cb 08 	call	0x1196	; 0x1196 <__mulsf3>
     a8a:	dc 01       	movw	r26, r24
     a8c:	cb 01       	movw	r24, r22
     a8e:	bc 01       	movw	r22, r24
     a90:	cd 01       	movw	r24, r26
     a92:	0e 94 f5 06 	call	0xdea	; 0xdea <__fixunssfsi>
     a96:	dc 01       	movw	r26, r24
     a98:	cb 01       	movw	r24, r22
     a9a:	9e 83       	std	Y+6, r25	; 0x06
     a9c:	8d 83       	std	Y+5, r24	; 0x05
     a9e:	0f c0       	rjmp	.+30     	; 0xabe <LCD_goto+0xfc>
     aa0:	84 e6       	ldi	r24, 0x64	; 100
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	9c 83       	std	Y+4, r25	; 0x04
     aa6:	8b 83       	std	Y+3, r24	; 0x03
     aa8:	8b 81       	ldd	r24, Y+3	; 0x03
     aaa:	9c 81       	ldd	r25, Y+4	; 0x04
     aac:	01 97       	sbiw	r24, 0x01	; 1
     aae:	f1 f7       	brne	.-4      	; 0xaac <LCD_goto+0xea>
     ab0:	9c 83       	std	Y+4, r25	; 0x04
     ab2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ab4:	8d 81       	ldd	r24, Y+5	; 0x05
     ab6:	9e 81       	ldd	r25, Y+6	; 0x06
     ab8:	01 97       	sbiw	r24, 0x01	; 1
     aba:	9e 83       	std	Y+6, r25	; 0x06
     abc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     abe:	8d 81       	ldd	r24, Y+5	; 0x05
     ac0:	9e 81       	ldd	r25, Y+6	; 0x06
     ac2:	00 97       	sbiw	r24, 0x00	; 0
     ac4:	69 f7       	brne	.-38     	; 0xaa0 <LCD_goto+0xde>
     ac6:	14 c0       	rjmp	.+40     	; 0xaf0 <LCD_goto+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ac8:	6f 81       	ldd	r22, Y+7	; 0x07
     aca:	78 85       	ldd	r23, Y+8	; 0x08
     acc:	89 85       	ldd	r24, Y+9	; 0x09
     ace:	9a 85       	ldd	r25, Y+10	; 0x0a
     ad0:	0e 94 f5 06 	call	0xdea	; 0xdea <__fixunssfsi>
     ad4:	dc 01       	movw	r26, r24
     ad6:	cb 01       	movw	r24, r22
     ad8:	9e 83       	std	Y+6, r25	; 0x06
     ada:	8d 83       	std	Y+5, r24	; 0x05
     adc:	8d 81       	ldd	r24, Y+5	; 0x05
     ade:	9e 81       	ldd	r25, Y+6	; 0x06
     ae0:	9a 83       	std	Y+2, r25	; 0x02
     ae2:	89 83       	std	Y+1, r24	; 0x01
     ae4:	89 81       	ldd	r24, Y+1	; 0x01
     ae6:	9a 81       	ldd	r25, Y+2	; 0x02
     ae8:	01 97       	sbiw	r24, 0x01	; 1
     aea:	f1 f7       	brne	.-4      	; 0xae8 <LCD_goto+0x126>
     aec:	9a 83       	std	Y+2, r25	; 0x02
     aee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
     af0:	64 96       	adiw	r28, 0x14	; 20
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	f8 94       	cli
     af6:	de bf       	out	0x3e, r29	; 62
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	cd bf       	out	0x3d, r28	; 61
     afc:	cf 91       	pop	r28
     afe:	df 91       	pop	r29
     b00:	08 95       	ret

00000b02 <LCD_print>:

void LCD_print(char *string)
{
     b02:	df 93       	push	r29
     b04:	cf 93       	push	r28
     b06:	00 d0       	rcall	.+0      	; 0xb08 <LCD_print+0x6>
     b08:	0f 92       	push	r0
     b0a:	cd b7       	in	r28, 0x3d	; 61
     b0c:	de b7       	in	r29, 0x3e	; 62
     b0e:	9b 83       	std	Y+3, r25	; 0x03
     b10:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i=0;
     b12:	19 82       	std	Y+1, r1	; 0x01
     b14:	0e c0       	rjmp	.+28     	; 0xb32 <LCD_print+0x30>

	while(string[i]!=0)
	{
		LCD_send_data(string[i]);
     b16:	89 81       	ldd	r24, Y+1	; 0x01
     b18:	28 2f       	mov	r18, r24
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	8a 81       	ldd	r24, Y+2	; 0x02
     b1e:	9b 81       	ldd	r25, Y+3	; 0x03
     b20:	fc 01       	movw	r30, r24
     b22:	e2 0f       	add	r30, r18
     b24:	f3 1f       	adc	r31, r19
     b26:	80 81       	ld	r24, Z
     b28:	0e 94 20 02 	call	0x440	; 0x440 <LCD_send_data>
		i++;
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
     b2e:	8f 5f       	subi	r24, 0xFF	; 255
     b30:	89 83       	std	Y+1, r24	; 0x01

void LCD_print(char *string)
{
	unsigned char i=0;

	while(string[i]!=0)
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	28 2f       	mov	r18, r24
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	8a 81       	ldd	r24, Y+2	; 0x02
     b3a:	9b 81       	ldd	r25, Y+3	; 0x03
     b3c:	fc 01       	movw	r30, r24
     b3e:	e2 0f       	add	r30, r18
     b40:	f3 1f       	adc	r31, r19
     b42:	80 81       	ld	r24, Z
     b44:	88 23       	and	r24, r24
     b46:	39 f7       	brne	.-50     	; 0xb16 <LCD_print+0x14>
	{
		LCD_send_data(string[i]);
		i++;
	}
}
     b48:	0f 90       	pop	r0
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	cf 91       	pop	r28
     b50:	df 91       	pop	r29
     b52:	08 95       	ret

00000b54 <__vector_14>:

/*ADC Conversion Complete Interrupt Service Routine (ISR)*/
ISR(ADC_vect)
{
     b54:	1f 92       	push	r1
     b56:	0f 92       	push	r0
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	0f 92       	push	r0
     b5c:	11 24       	eor	r1, r1
     b5e:	2f 93       	push	r18
     b60:	3f 93       	push	r19
     b62:	4f 93       	push	r20
     b64:	5f 93       	push	r21
     b66:	6f 93       	push	r22
     b68:	7f 93       	push	r23
     b6a:	8f 93       	push	r24
     b6c:	9f 93       	push	r25
     b6e:	af 93       	push	r26
     b70:	bf 93       	push	r27
     b72:	ef 93       	push	r30
     b74:	ff 93       	push	r31
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
     b7e:	65 97       	sbiw	r28, 0x15	; 21
     b80:	de bf       	out	0x3e, r29	; 62
     b82:	cd bf       	out	0x3d, r28	; 61
	char tempC, tempF, display;
	float tempff;

	tempC = ADCH;			// Output ADCH to PortD
     b84:	e5 e2       	ldi	r30, 0x25	; 37
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	8d 8b       	std	Y+21, r24	; 0x15
	tempff = (float)tempC;
     b8c:	8d 89       	ldd	r24, Y+21	; 0x15
     b8e:	88 2f       	mov	r24, r24
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	a0 e0       	ldi	r26, 0x00	; 0
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	bc 01       	movw	r22, r24
     b98:	cd 01       	movw	r24, r26
     b9a:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__floatunsisf>
     b9e:	dc 01       	movw	r26, r24
     ba0:	cb 01       	movw	r24, r22
     ba2:	8f 87       	std	Y+15, r24	; 0x0f
     ba4:	98 8b       	std	Y+16, r25	; 0x10
     ba6:	a9 8b       	std	Y+17, r26	; 0x11
     ba8:	ba 8b       	std	Y+18, r27	; 0x12
	tempff = (tempff*9)/5 + 32;
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e1       	ldi	r20, 0x10	; 16
     bb0:	51 e4       	ldi	r21, 0x41	; 65
     bb2:	6f 85       	ldd	r22, Y+15	; 0x0f
     bb4:	78 89       	ldd	r23, Y+16	; 0x10
     bb6:	89 89       	ldd	r24, Y+17	; 0x11
     bb8:	9a 89       	ldd	r25, Y+18	; 0x12
     bba:	0e 94 cb 08 	call	0x1196	; 0x1196 <__mulsf3>
     bbe:	dc 01       	movw	r26, r24
     bc0:	cb 01       	movw	r24, r22
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 ea       	ldi	r20, 0xA0	; 160
     bc8:	50 e4       	ldi	r21, 0x40	; 64
     bca:	bc 01       	movw	r22, r24
     bcc:	cd 01       	movw	r24, r26
     bce:	0e 94 c5 09 	call	0x138a	; 0x138a <__divsf3>
     bd2:	dc 01       	movw	r26, r24
     bd4:	cb 01       	movw	r24, r22
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e0       	ldi	r20, 0x00	; 0
     bdc:	52 e4       	ldi	r21, 0x42	; 66
     bde:	bc 01       	movw	r22, r24
     be0:	cd 01       	movw	r24, r26
     be2:	0e 94 9e 08 	call	0x113c	; 0x113c <__addsf3>
     be6:	dc 01       	movw	r26, r24
     be8:	cb 01       	movw	r24, r22
     bea:	8f 87       	std	Y+15, r24	; 0x0f
     bec:	98 8b       	std	Y+16, r25	; 0x10
     bee:	a9 8b       	std	Y+17, r26	; 0x11
     bf0:	ba 8b       	std	Y+18, r27	; 0x12
	tempF = tempff;
     bf2:	6f 85       	ldd	r22, Y+15	; 0x0f
     bf4:	78 89       	ldd	r23, Y+16	; 0x10
     bf6:	89 89       	ldd	r24, Y+17	; 0x11
     bf8:	9a 89       	ldd	r25, Y+18	; 0x12
     bfa:	0e 94 f5 06 	call	0xdea	; 0xdea <__fixunssfsi>
     bfe:	dc 01       	movw	r26, r24
     c00:	cb 01       	movw	r24, r22
     c02:	8c 8b       	std	Y+20, r24	; 0x14

	LCD_goto(2,4);
     c04:	64 e0       	ldi	r22, 0x04	; 4
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <LCD_goto>
	itoa(tempC/10,display,10);
     c0c:	8b 89       	ldd	r24, Y+19	; 0x13
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	8d 89       	ldd	r24, Y+21	; 0x15
     c14:	9a e0       	ldi	r25, 0x0A	; 10
     c16:	69 2f       	mov	r22, r25
     c18:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__udivmodqi4>
     c1c:	88 2f       	mov	r24, r24
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	4a e0       	ldi	r20, 0x0A	; 10
     c22:	50 e0       	ldi	r21, 0x00	; 0
     c24:	b9 01       	movw	r22, r18
     c26:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <itoa>
	LCD_print(display);
     c2a:	8b 89       	ldd	r24, Y+19	; 0x13
     c2c:	88 2f       	mov	r24, r24
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 81 05 	call	0xb02	; 0xb02 <LCD_print>
	itoa(tempC%10,display,10);
     c34:	8b 89       	ldd	r24, Y+19	; 0x13
     c36:	28 2f       	mov	r18, r24
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	8d 89       	ldd	r24, Y+21	; 0x15
     c3c:	9a e0       	ldi	r25, 0x0A	; 10
     c3e:	69 2f       	mov	r22, r25
     c40:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__udivmodqi4>
     c44:	89 2f       	mov	r24, r25
     c46:	88 2f       	mov	r24, r24
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	4a e0       	ldi	r20, 0x0A	; 10
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	b9 01       	movw	r22, r18
     c50:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <itoa>
	LCD_print(display);
     c54:	8b 89       	ldd	r24, Y+19	; 0x13
     c56:	88 2f       	mov	r24, r24
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	0e 94 81 05 	call	0xb02	; 0xb02 <LCD_print>
	LCD_send_data(0xDF);
     c5e:	8f ed       	ldi	r24, 0xDF	; 223
     c60:	0e 94 20 02 	call	0x440	; 0x440 <LCD_send_data>
	LCD_print("C   ");
     c64:	8f e6       	ldi	r24, 0x6F	; 111
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 81 05 	call	0xb02	; 0xb02 <LCD_print>
	itoa(tempF/10,display,10);
     c6c:	8b 89       	ldd	r24, Y+19	; 0x13
     c6e:	28 2f       	mov	r18, r24
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	8c 89       	ldd	r24, Y+20	; 0x14
     c74:	9a e0       	ldi	r25, 0x0A	; 10
     c76:	69 2f       	mov	r22, r25
     c78:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__udivmodqi4>
     c7c:	88 2f       	mov	r24, r24
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	4a e0       	ldi	r20, 0x0A	; 10
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	b9 01       	movw	r22, r18
     c86:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <itoa>
	LCD_print(display);
     c8a:	8b 89       	ldd	r24, Y+19	; 0x13
     c8c:	88 2f       	mov	r24, r24
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e 94 81 05 	call	0xb02	; 0xb02 <LCD_print>
	itoa(tempF%10,display,10);
     c94:	8b 89       	ldd	r24, Y+19	; 0x13
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	8c 89       	ldd	r24, Y+20	; 0x14
     c9c:	9a e0       	ldi	r25, 0x0A	; 10
     c9e:	69 2f       	mov	r22, r25
     ca0:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__udivmodqi4>
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 2f       	mov	r24, r24
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	4a e0       	ldi	r20, 0x0A	; 10
     cac:	50 e0       	ldi	r21, 0x00	; 0
     cae:	b9 01       	movw	r22, r18
     cb0:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <itoa>
	LCD_print(display);
     cb4:	8b 89       	ldd	r24, Y+19	; 0x13
     cb6:	88 2f       	mov	r24, r24
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 81 05 	call	0xb02	; 0xb02 <LCD_print>
	LCD_send_data(0xDF);
     cbe:	8f ed       	ldi	r24, 0xDF	; 223
     cc0:	0e 94 20 02 	call	0x440	; 0x440 <LCD_send_data>
	LCD_print("F");
     cc4:	84 e7       	ldi	r24, 0x74	; 116
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	0e 94 81 05 	call	0xb02	; 0xb02 <LCD_print>
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	aa ef       	ldi	r26, 0xFA	; 250
     cd2:	b3 e4       	ldi	r27, 0x43	; 67
     cd4:	8b 87       	std	Y+11, r24	; 0x0b
     cd6:	9c 87       	std	Y+12, r25	; 0x0c
     cd8:	ad 87       	std	Y+13, r26	; 0x0d
     cda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	4a e7       	ldi	r20, 0x7A	; 122
     ce2:	54 e4       	ldi	r21, 0x44	; 68
     ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
     cea:	9e 85       	ldd	r25, Y+14	; 0x0e
     cec:	0e 94 cb 08 	call	0x1196	; 0x1196 <__mulsf3>
     cf0:	dc 01       	movw	r26, r24
     cf2:	cb 01       	movw	r24, r22
     cf4:	8f 83       	std	Y+7, r24	; 0x07
     cf6:	98 87       	std	Y+8, r25	; 0x08
     cf8:	a9 87       	std	Y+9, r26	; 0x09
     cfa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	40 e8       	ldi	r20, 0x80	; 128
     d02:	5f e3       	ldi	r21, 0x3F	; 63
     d04:	6f 81       	ldd	r22, Y+7	; 0x07
     d06:	78 85       	ldd	r23, Y+8	; 0x08
     d08:	89 85       	ldd	r24, Y+9	; 0x09
     d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d0c:	0e 94 cf 0a 	call	0x159e	; 0x159e <__ltsf2>
     d10:	88 23       	and	r24, r24
     d12:	2c f4       	brge	.+10     	; 0xd1e <__vector_14+0x1ca>
		__ticks = 1;
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	9e 83       	std	Y+6, r25	; 0x06
     d1a:	8d 83       	std	Y+5, r24	; 0x05
     d1c:	3f c0       	rjmp	.+126    	; 0xd9c <__vector_14+0x248>
	else if (__tmp > 65535)
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	3f ef       	ldi	r19, 0xFF	; 255
     d22:	4f e7       	ldi	r20, 0x7F	; 127
     d24:	57 e4       	ldi	r21, 0x47	; 71
     d26:	6f 81       	ldd	r22, Y+7	; 0x07
     d28:	78 85       	ldd	r23, Y+8	; 0x08
     d2a:	89 85       	ldd	r24, Y+9	; 0x09
     d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d2e:	0e 94 6f 0a 	call	0x14de	; 0x14de <__gtsf2>
     d32:	18 16       	cp	r1, r24
     d34:	4c f5       	brge	.+82     	; 0xd88 <__vector_14+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	40 e2       	ldi	r20, 0x20	; 32
     d3c:	51 e4       	ldi	r21, 0x41	; 65
     d3e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d40:	7c 85       	ldd	r23, Y+12	; 0x0c
     d42:	8d 85       	ldd	r24, Y+13	; 0x0d
     d44:	9e 85       	ldd	r25, Y+14	; 0x0e
     d46:	0e 94 cb 08 	call	0x1196	; 0x1196 <__mulsf3>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	bc 01       	movw	r22, r24
     d50:	cd 01       	movw	r24, r26
     d52:	0e 94 f5 06 	call	0xdea	; 0xdea <__fixunssfsi>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	9e 83       	std	Y+6, r25	; 0x06
     d5c:	8d 83       	std	Y+5, r24	; 0x05
     d5e:	0f c0       	rjmp	.+30     	; 0xd7e <__vector_14+0x22a>
     d60:	84 e6       	ldi	r24, 0x64	; 100
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	9c 83       	std	Y+4, r25	; 0x04
     d66:	8b 83       	std	Y+3, r24	; 0x03
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	9c 81       	ldd	r25, Y+4	; 0x04
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	f1 f7       	brne	.-4      	; 0xd6c <__vector_14+0x218>
     d70:	9c 83       	std	Y+4, r25	; 0x04
     d72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d74:	8d 81       	ldd	r24, Y+5	; 0x05
     d76:	9e 81       	ldd	r25, Y+6	; 0x06
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	9e 83       	std	Y+6, r25	; 0x06
     d7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d7e:	8d 81       	ldd	r24, Y+5	; 0x05
     d80:	9e 81       	ldd	r25, Y+6	; 0x06
     d82:	00 97       	sbiw	r24, 0x00	; 0
     d84:	69 f7       	brne	.-38     	; 0xd60 <__vector_14+0x20c>
     d86:	14 c0       	rjmp	.+40     	; 0xdb0 <__vector_14+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d88:	6f 81       	ldd	r22, Y+7	; 0x07
     d8a:	78 85       	ldd	r23, Y+8	; 0x08
     d8c:	89 85       	ldd	r24, Y+9	; 0x09
     d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d90:	0e 94 f5 06 	call	0xdea	; 0xdea <__fixunssfsi>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	9e 83       	std	Y+6, r25	; 0x06
     d9a:	8d 83       	std	Y+5, r24	; 0x05
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
     d9e:	9e 81       	ldd	r25, Y+6	; 0x06
     da0:	9a 83       	std	Y+2, r25	; 0x02
     da2:	89 83       	std	Y+1, r24	; 0x01
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	9a 81       	ldd	r25, Y+2	; 0x02
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	f1 f7       	brne	.-4      	; 0xda8 <__vector_14+0x254>
     dac:	9a 83       	std	Y+2, r25	; 0x02
     dae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	ADCSRA |= 1<<ADSC;		// Start Conversion
     db0:	a6 e2       	ldi	r26, 0x26	; 38
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e6 e2       	ldi	r30, 0x26	; 38
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	80 64       	ori	r24, 0x40	; 64
     dbc:	8c 93       	st	X, r24
}
     dbe:	65 96       	adiw	r28, 0x15	; 21
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	ff 91       	pop	r31
     dca:	ef 91       	pop	r30
     dcc:	bf 91       	pop	r27
     dce:	af 91       	pop	r26
     dd0:	9f 91       	pop	r25
     dd2:	8f 91       	pop	r24
     dd4:	7f 91       	pop	r23
     dd6:	6f 91       	pop	r22
     dd8:	5f 91       	pop	r21
     dda:	4f 91       	pop	r20
     ddc:	3f 91       	pop	r19
     dde:	2f 91       	pop	r18
     de0:	0f 90       	pop	r0
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	0f 90       	pop	r0
     de6:	1f 90       	pop	r1
     de8:	18 95       	reti

00000dea <__fixunssfsi>:
     dea:	ef 92       	push	r14
     dec:	ff 92       	push	r15
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	7b 01       	movw	r14, r22
     df4:	8c 01       	movw	r16, r24
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	40 e0       	ldi	r20, 0x00	; 0
     dfc:	5f e4       	ldi	r21, 0x4F	; 79
     dfe:	0e 94 9f 0a 	call	0x153e	; 0x153e <__gesf2>
     e02:	88 23       	and	r24, r24
     e04:	8c f0       	brlt	.+34     	; 0xe28 <__fixunssfsi+0x3e>
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	40 e0       	ldi	r20, 0x00	; 0
     e0c:	5f e4       	ldi	r21, 0x4F	; 79
     e0e:	c8 01       	movw	r24, r16
     e10:	b7 01       	movw	r22, r14
     e12:	0e 94 6d 08 	call	0x10da	; 0x10da <__subsf3>
     e16:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__fixsfsi>
     e1a:	9b 01       	movw	r18, r22
     e1c:	ac 01       	movw	r20, r24
     e1e:	20 50       	subi	r18, 0x00	; 0
     e20:	30 40       	sbci	r19, 0x00	; 0
     e22:	40 40       	sbci	r20, 0x00	; 0
     e24:	50 48       	sbci	r21, 0x80	; 128
     e26:	06 c0       	rjmp	.+12     	; 0xe34 <__fixunssfsi+0x4a>
     e28:	c8 01       	movw	r24, r16
     e2a:	b7 01       	movw	r22, r14
     e2c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__fixsfsi>
     e30:	9b 01       	movw	r18, r22
     e32:	ac 01       	movw	r20, r24
     e34:	b9 01       	movw	r22, r18
     e36:	ca 01       	movw	r24, r20
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	ff 90       	pop	r15
     e3e:	ef 90       	pop	r14
     e40:	08 95       	ret

00000e42 <_fpadd_parts>:
     e42:	a0 e0       	ldi	r26, 0x00	; 0
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e7 e2       	ldi	r30, 0x27	; 39
     e48:	f7 e0       	ldi	r31, 0x07	; 7
     e4a:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__prologue_saves__>
     e4e:	dc 01       	movw	r26, r24
     e50:	2b 01       	movw	r4, r22
     e52:	fa 01       	movw	r30, r20
     e54:	9c 91       	ld	r25, X
     e56:	92 30       	cpi	r25, 0x02	; 2
     e58:	08 f4       	brcc	.+2      	; 0xe5c <_fpadd_parts+0x1a>
     e5a:	39 c1       	rjmp	.+626    	; 0x10ce <_fpadd_parts+0x28c>
     e5c:	eb 01       	movw	r28, r22
     e5e:	88 81       	ld	r24, Y
     e60:	82 30       	cpi	r24, 0x02	; 2
     e62:	08 f4       	brcc	.+2      	; 0xe66 <_fpadd_parts+0x24>
     e64:	33 c1       	rjmp	.+614    	; 0x10cc <_fpadd_parts+0x28a>
     e66:	94 30       	cpi	r25, 0x04	; 4
     e68:	69 f4       	brne	.+26     	; 0xe84 <_fpadd_parts+0x42>
     e6a:	84 30       	cpi	r24, 0x04	; 4
     e6c:	09 f0       	breq	.+2      	; 0xe70 <_fpadd_parts+0x2e>
     e6e:	2f c1       	rjmp	.+606    	; 0x10ce <_fpadd_parts+0x28c>
     e70:	11 96       	adiw	r26, 0x01	; 1
     e72:	9c 91       	ld	r25, X
     e74:	11 97       	sbiw	r26, 0x01	; 1
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	98 17       	cp	r25, r24
     e7a:	09 f4       	brne	.+2      	; 0xe7e <_fpadd_parts+0x3c>
     e7c:	28 c1       	rjmp	.+592    	; 0x10ce <_fpadd_parts+0x28c>
     e7e:	a6 e7       	ldi	r26, 0x76	; 118
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	25 c1       	rjmp	.+586    	; 0x10ce <_fpadd_parts+0x28c>
     e84:	84 30       	cpi	r24, 0x04	; 4
     e86:	09 f4       	brne	.+2      	; 0xe8a <_fpadd_parts+0x48>
     e88:	21 c1       	rjmp	.+578    	; 0x10cc <_fpadd_parts+0x28a>
     e8a:	82 30       	cpi	r24, 0x02	; 2
     e8c:	a9 f4       	brne	.+42     	; 0xeb8 <_fpadd_parts+0x76>
     e8e:	92 30       	cpi	r25, 0x02	; 2
     e90:	09 f0       	breq	.+2      	; 0xe94 <_fpadd_parts+0x52>
     e92:	1d c1       	rjmp	.+570    	; 0x10ce <_fpadd_parts+0x28c>
     e94:	9a 01       	movw	r18, r20
     e96:	ad 01       	movw	r20, r26
     e98:	88 e0       	ldi	r24, 0x08	; 8
     e9a:	ea 01       	movw	r28, r20
     e9c:	09 90       	ld	r0, Y+
     e9e:	ae 01       	movw	r20, r28
     ea0:	e9 01       	movw	r28, r18
     ea2:	09 92       	st	Y+, r0
     ea4:	9e 01       	movw	r18, r28
     ea6:	81 50       	subi	r24, 0x01	; 1
     ea8:	c1 f7       	brne	.-16     	; 0xe9a <_fpadd_parts+0x58>
     eaa:	e2 01       	movw	r28, r4
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	11 96       	adiw	r26, 0x01	; 1
     eb0:	9c 91       	ld	r25, X
     eb2:	89 23       	and	r24, r25
     eb4:	81 83       	std	Z+1, r24	; 0x01
     eb6:	08 c1       	rjmp	.+528    	; 0x10c8 <_fpadd_parts+0x286>
     eb8:	92 30       	cpi	r25, 0x02	; 2
     eba:	09 f4       	brne	.+2      	; 0xebe <_fpadd_parts+0x7c>
     ebc:	07 c1       	rjmp	.+526    	; 0x10cc <_fpadd_parts+0x28a>
     ebe:	12 96       	adiw	r26, 0x02	; 2
     ec0:	2d 90       	ld	r2, X+
     ec2:	3c 90       	ld	r3, X
     ec4:	13 97       	sbiw	r26, 0x03	; 3
     ec6:	eb 01       	movw	r28, r22
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	9b 81       	ldd	r25, Y+3	; 0x03
     ecc:	14 96       	adiw	r26, 0x04	; 4
     ece:	ad 90       	ld	r10, X+
     ed0:	bd 90       	ld	r11, X+
     ed2:	cd 90       	ld	r12, X+
     ed4:	dc 90       	ld	r13, X
     ed6:	17 97       	sbiw	r26, 0x07	; 7
     ed8:	ec 80       	ldd	r14, Y+4	; 0x04
     eda:	fd 80       	ldd	r15, Y+5	; 0x05
     edc:	0e 81       	ldd	r16, Y+6	; 0x06
     ede:	1f 81       	ldd	r17, Y+7	; 0x07
     ee0:	91 01       	movw	r18, r2
     ee2:	28 1b       	sub	r18, r24
     ee4:	39 0b       	sbc	r19, r25
     ee6:	b9 01       	movw	r22, r18
     ee8:	37 ff       	sbrs	r19, 7
     eea:	04 c0       	rjmp	.+8      	; 0xef4 <_fpadd_parts+0xb2>
     eec:	66 27       	eor	r22, r22
     eee:	77 27       	eor	r23, r23
     ef0:	62 1b       	sub	r22, r18
     ef2:	73 0b       	sbc	r23, r19
     ef4:	60 32       	cpi	r22, 0x20	; 32
     ef6:	71 05       	cpc	r23, r1
     ef8:	0c f0       	brlt	.+2      	; 0xefc <_fpadd_parts+0xba>
     efa:	61 c0       	rjmp	.+194    	; 0xfbe <_fpadd_parts+0x17c>
     efc:	12 16       	cp	r1, r18
     efe:	13 06       	cpc	r1, r19
     f00:	6c f5       	brge	.+90     	; 0xf5c <_fpadd_parts+0x11a>
     f02:	37 01       	movw	r6, r14
     f04:	48 01       	movw	r8, r16
     f06:	06 2e       	mov	r0, r22
     f08:	04 c0       	rjmp	.+8      	; 0xf12 <_fpadd_parts+0xd0>
     f0a:	96 94       	lsr	r9
     f0c:	87 94       	ror	r8
     f0e:	77 94       	ror	r7
     f10:	67 94       	ror	r6
     f12:	0a 94       	dec	r0
     f14:	d2 f7       	brpl	.-12     	; 0xf0a <_fpadd_parts+0xc8>
     f16:	21 e0       	ldi	r18, 0x01	; 1
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e0       	ldi	r20, 0x00	; 0
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	04 c0       	rjmp	.+8      	; 0xf28 <_fpadd_parts+0xe6>
     f20:	22 0f       	add	r18, r18
     f22:	33 1f       	adc	r19, r19
     f24:	44 1f       	adc	r20, r20
     f26:	55 1f       	adc	r21, r21
     f28:	6a 95       	dec	r22
     f2a:	d2 f7       	brpl	.-12     	; 0xf20 <_fpadd_parts+0xde>
     f2c:	21 50       	subi	r18, 0x01	; 1
     f2e:	30 40       	sbci	r19, 0x00	; 0
     f30:	40 40       	sbci	r20, 0x00	; 0
     f32:	50 40       	sbci	r21, 0x00	; 0
     f34:	2e 21       	and	r18, r14
     f36:	3f 21       	and	r19, r15
     f38:	40 23       	and	r20, r16
     f3a:	51 23       	and	r21, r17
     f3c:	21 15       	cp	r18, r1
     f3e:	31 05       	cpc	r19, r1
     f40:	41 05       	cpc	r20, r1
     f42:	51 05       	cpc	r21, r1
     f44:	21 f0       	breq	.+8      	; 0xf4e <_fpadd_parts+0x10c>
     f46:	21 e0       	ldi	r18, 0x01	; 1
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	40 e0       	ldi	r20, 0x00	; 0
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	79 01       	movw	r14, r18
     f50:	8a 01       	movw	r16, r20
     f52:	e6 28       	or	r14, r6
     f54:	f7 28       	or	r15, r7
     f56:	08 29       	or	r16, r8
     f58:	19 29       	or	r17, r9
     f5a:	3c c0       	rjmp	.+120    	; 0xfd4 <_fpadd_parts+0x192>
     f5c:	23 2b       	or	r18, r19
     f5e:	d1 f1       	breq	.+116    	; 0xfd4 <_fpadd_parts+0x192>
     f60:	26 0e       	add	r2, r22
     f62:	37 1e       	adc	r3, r23
     f64:	35 01       	movw	r6, r10
     f66:	46 01       	movw	r8, r12
     f68:	06 2e       	mov	r0, r22
     f6a:	04 c0       	rjmp	.+8      	; 0xf74 <_fpadd_parts+0x132>
     f6c:	96 94       	lsr	r9
     f6e:	87 94       	ror	r8
     f70:	77 94       	ror	r7
     f72:	67 94       	ror	r6
     f74:	0a 94       	dec	r0
     f76:	d2 f7       	brpl	.-12     	; 0xf6c <_fpadd_parts+0x12a>
     f78:	21 e0       	ldi	r18, 0x01	; 1
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	04 c0       	rjmp	.+8      	; 0xf8a <_fpadd_parts+0x148>
     f82:	22 0f       	add	r18, r18
     f84:	33 1f       	adc	r19, r19
     f86:	44 1f       	adc	r20, r20
     f88:	55 1f       	adc	r21, r21
     f8a:	6a 95       	dec	r22
     f8c:	d2 f7       	brpl	.-12     	; 0xf82 <_fpadd_parts+0x140>
     f8e:	21 50       	subi	r18, 0x01	; 1
     f90:	30 40       	sbci	r19, 0x00	; 0
     f92:	40 40       	sbci	r20, 0x00	; 0
     f94:	50 40       	sbci	r21, 0x00	; 0
     f96:	2a 21       	and	r18, r10
     f98:	3b 21       	and	r19, r11
     f9a:	4c 21       	and	r20, r12
     f9c:	5d 21       	and	r21, r13
     f9e:	21 15       	cp	r18, r1
     fa0:	31 05       	cpc	r19, r1
     fa2:	41 05       	cpc	r20, r1
     fa4:	51 05       	cpc	r21, r1
     fa6:	21 f0       	breq	.+8      	; 0xfb0 <_fpadd_parts+0x16e>
     fa8:	21 e0       	ldi	r18, 0x01	; 1
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	40 e0       	ldi	r20, 0x00	; 0
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	59 01       	movw	r10, r18
     fb2:	6a 01       	movw	r12, r20
     fb4:	a6 28       	or	r10, r6
     fb6:	b7 28       	or	r11, r7
     fb8:	c8 28       	or	r12, r8
     fba:	d9 28       	or	r13, r9
     fbc:	0b c0       	rjmp	.+22     	; 0xfd4 <_fpadd_parts+0x192>
     fbe:	82 15       	cp	r24, r2
     fc0:	93 05       	cpc	r25, r3
     fc2:	2c f0       	brlt	.+10     	; 0xfce <_fpadd_parts+0x18c>
     fc4:	1c 01       	movw	r2, r24
     fc6:	aa 24       	eor	r10, r10
     fc8:	bb 24       	eor	r11, r11
     fca:	65 01       	movw	r12, r10
     fcc:	03 c0       	rjmp	.+6      	; 0xfd4 <_fpadd_parts+0x192>
     fce:	ee 24       	eor	r14, r14
     fd0:	ff 24       	eor	r15, r15
     fd2:	87 01       	movw	r16, r14
     fd4:	11 96       	adiw	r26, 0x01	; 1
     fd6:	9c 91       	ld	r25, X
     fd8:	d2 01       	movw	r26, r4
     fda:	11 96       	adiw	r26, 0x01	; 1
     fdc:	8c 91       	ld	r24, X
     fde:	98 17       	cp	r25, r24
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <_fpadd_parts+0x1a2>
     fe2:	45 c0       	rjmp	.+138    	; 0x106e <_fpadd_parts+0x22c>
     fe4:	99 23       	and	r25, r25
     fe6:	39 f0       	breq	.+14     	; 0xff6 <_fpadd_parts+0x1b4>
     fe8:	a8 01       	movw	r20, r16
     fea:	97 01       	movw	r18, r14
     fec:	2a 19       	sub	r18, r10
     fee:	3b 09       	sbc	r19, r11
     ff0:	4c 09       	sbc	r20, r12
     ff2:	5d 09       	sbc	r21, r13
     ff4:	06 c0       	rjmp	.+12     	; 0x1002 <_fpadd_parts+0x1c0>
     ff6:	a6 01       	movw	r20, r12
     ff8:	95 01       	movw	r18, r10
     ffa:	2e 19       	sub	r18, r14
     ffc:	3f 09       	sbc	r19, r15
     ffe:	40 0b       	sbc	r20, r16
    1000:	51 0b       	sbc	r21, r17
    1002:	57 fd       	sbrc	r21, 7
    1004:	08 c0       	rjmp	.+16     	; 0x1016 <_fpadd_parts+0x1d4>
    1006:	11 82       	std	Z+1, r1	; 0x01
    1008:	33 82       	std	Z+3, r3	; 0x03
    100a:	22 82       	std	Z+2, r2	; 0x02
    100c:	24 83       	std	Z+4, r18	; 0x04
    100e:	35 83       	std	Z+5, r19	; 0x05
    1010:	46 83       	std	Z+6, r20	; 0x06
    1012:	57 83       	std	Z+7, r21	; 0x07
    1014:	1d c0       	rjmp	.+58     	; 0x1050 <_fpadd_parts+0x20e>
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	81 83       	std	Z+1, r24	; 0x01
    101a:	33 82       	std	Z+3, r3	; 0x03
    101c:	22 82       	std	Z+2, r2	; 0x02
    101e:	88 27       	eor	r24, r24
    1020:	99 27       	eor	r25, r25
    1022:	dc 01       	movw	r26, r24
    1024:	82 1b       	sub	r24, r18
    1026:	93 0b       	sbc	r25, r19
    1028:	a4 0b       	sbc	r26, r20
    102a:	b5 0b       	sbc	r27, r21
    102c:	84 83       	std	Z+4, r24	; 0x04
    102e:	95 83       	std	Z+5, r25	; 0x05
    1030:	a6 83       	std	Z+6, r26	; 0x06
    1032:	b7 83       	std	Z+7, r27	; 0x07
    1034:	0d c0       	rjmp	.+26     	; 0x1050 <_fpadd_parts+0x20e>
    1036:	22 0f       	add	r18, r18
    1038:	33 1f       	adc	r19, r19
    103a:	44 1f       	adc	r20, r20
    103c:	55 1f       	adc	r21, r21
    103e:	24 83       	std	Z+4, r18	; 0x04
    1040:	35 83       	std	Z+5, r19	; 0x05
    1042:	46 83       	std	Z+6, r20	; 0x06
    1044:	57 83       	std	Z+7, r21	; 0x07
    1046:	82 81       	ldd	r24, Z+2	; 0x02
    1048:	93 81       	ldd	r25, Z+3	; 0x03
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	93 83       	std	Z+3, r25	; 0x03
    104e:	82 83       	std	Z+2, r24	; 0x02
    1050:	24 81       	ldd	r18, Z+4	; 0x04
    1052:	35 81       	ldd	r19, Z+5	; 0x05
    1054:	46 81       	ldd	r20, Z+6	; 0x06
    1056:	57 81       	ldd	r21, Z+7	; 0x07
    1058:	da 01       	movw	r26, r20
    105a:	c9 01       	movw	r24, r18
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	a1 09       	sbc	r26, r1
    1060:	b1 09       	sbc	r27, r1
    1062:	8f 5f       	subi	r24, 0xFF	; 255
    1064:	9f 4f       	sbci	r25, 0xFF	; 255
    1066:	af 4f       	sbci	r26, 0xFF	; 255
    1068:	bf 43       	sbci	r27, 0x3F	; 63
    106a:	28 f3       	brcs	.-54     	; 0x1036 <_fpadd_parts+0x1f4>
    106c:	0b c0       	rjmp	.+22     	; 0x1084 <_fpadd_parts+0x242>
    106e:	91 83       	std	Z+1, r25	; 0x01
    1070:	33 82       	std	Z+3, r3	; 0x03
    1072:	22 82       	std	Z+2, r2	; 0x02
    1074:	ea 0c       	add	r14, r10
    1076:	fb 1c       	adc	r15, r11
    1078:	0c 1d       	adc	r16, r12
    107a:	1d 1d       	adc	r17, r13
    107c:	e4 82       	std	Z+4, r14	; 0x04
    107e:	f5 82       	std	Z+5, r15	; 0x05
    1080:	06 83       	std	Z+6, r16	; 0x06
    1082:	17 83       	std	Z+7, r17	; 0x07
    1084:	83 e0       	ldi	r24, 0x03	; 3
    1086:	80 83       	st	Z, r24
    1088:	24 81       	ldd	r18, Z+4	; 0x04
    108a:	35 81       	ldd	r19, Z+5	; 0x05
    108c:	46 81       	ldd	r20, Z+6	; 0x06
    108e:	57 81       	ldd	r21, Z+7	; 0x07
    1090:	57 ff       	sbrs	r21, 7
    1092:	1a c0       	rjmp	.+52     	; 0x10c8 <_fpadd_parts+0x286>
    1094:	c9 01       	movw	r24, r18
    1096:	aa 27       	eor	r26, r26
    1098:	97 fd       	sbrc	r25, 7
    109a:	a0 95       	com	r26
    109c:	ba 2f       	mov	r27, r26
    109e:	81 70       	andi	r24, 0x01	; 1
    10a0:	90 70       	andi	r25, 0x00	; 0
    10a2:	a0 70       	andi	r26, 0x00	; 0
    10a4:	b0 70       	andi	r27, 0x00	; 0
    10a6:	56 95       	lsr	r21
    10a8:	47 95       	ror	r20
    10aa:	37 95       	ror	r19
    10ac:	27 95       	ror	r18
    10ae:	82 2b       	or	r24, r18
    10b0:	93 2b       	or	r25, r19
    10b2:	a4 2b       	or	r26, r20
    10b4:	b5 2b       	or	r27, r21
    10b6:	84 83       	std	Z+4, r24	; 0x04
    10b8:	95 83       	std	Z+5, r25	; 0x05
    10ba:	a6 83       	std	Z+6, r26	; 0x06
    10bc:	b7 83       	std	Z+7, r27	; 0x07
    10be:	82 81       	ldd	r24, Z+2	; 0x02
    10c0:	93 81       	ldd	r25, Z+3	; 0x03
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	93 83       	std	Z+3, r25	; 0x03
    10c6:	82 83       	std	Z+2, r24	; 0x02
    10c8:	df 01       	movw	r26, r30
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <_fpadd_parts+0x28c>
    10cc:	d2 01       	movw	r26, r4
    10ce:	cd 01       	movw	r24, r26
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	e2 e1       	ldi	r30, 0x12	; 18
    10d6:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__epilogue_restores__>

000010da <__subsf3>:
    10da:	a0 e2       	ldi	r26, 0x20	; 32
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e3 e7       	ldi	r30, 0x73	; 115
    10e0:	f8 e0       	ldi	r31, 0x08	; 8
    10e2:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__prologue_saves__+0x18>
    10e6:	69 83       	std	Y+1, r22	; 0x01
    10e8:	7a 83       	std	Y+2, r23	; 0x02
    10ea:	8b 83       	std	Y+3, r24	; 0x03
    10ec:	9c 83       	std	Y+4, r25	; 0x04
    10ee:	2d 83       	std	Y+5, r18	; 0x05
    10f0:	3e 83       	std	Y+6, r19	; 0x06
    10f2:	4f 83       	std	Y+7, r20	; 0x07
    10f4:	58 87       	std	Y+8, r21	; 0x08
    10f6:	e9 e0       	ldi	r30, 0x09	; 9
    10f8:	ee 2e       	mov	r14, r30
    10fa:	f1 2c       	mov	r15, r1
    10fc:	ec 0e       	add	r14, r28
    10fe:	fd 1e       	adc	r15, r29
    1100:	b7 01       	movw	r22, r14
    1102:	ce 01       	movw	r24, r28
    1104:	01 96       	adiw	r24, 0x01	; 1
    1106:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__unpack_f>
    110a:	8e 01       	movw	r16, r28
    110c:	0f 5e       	subi	r16, 0xEF	; 239
    110e:	1f 4f       	sbci	r17, 0xFF	; 255
    1110:	b8 01       	movw	r22, r16
    1112:	ce 01       	movw	r24, r28
    1114:	05 96       	adiw	r24, 0x05	; 5
    1116:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__unpack_f>
    111a:	8a 89       	ldd	r24, Y+18	; 0x12
    111c:	91 e0       	ldi	r25, 0x01	; 1
    111e:	89 27       	eor	r24, r25
    1120:	8a 8b       	std	Y+18, r24	; 0x12
    1122:	ae 01       	movw	r20, r28
    1124:	47 5e       	subi	r20, 0xE7	; 231
    1126:	5f 4f       	sbci	r21, 0xFF	; 255
    1128:	b8 01       	movw	r22, r16
    112a:	c7 01       	movw	r24, r14
    112c:	0e 94 21 07 	call	0xe42	; 0xe42 <_fpadd_parts>
    1130:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__pack_f>
    1134:	a0 96       	adiw	r28, 0x20	; 32
    1136:	e6 e0       	ldi	r30, 0x06	; 6
    1138:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__epilogue_restores__+0x18>

0000113c <__addsf3>:
    113c:	a0 e2       	ldi	r26, 0x20	; 32
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e4 ea       	ldi	r30, 0xA4	; 164
    1142:	f8 e0       	ldi	r31, 0x08	; 8
    1144:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__prologue_saves__+0x18>
    1148:	69 83       	std	Y+1, r22	; 0x01
    114a:	7a 83       	std	Y+2, r23	; 0x02
    114c:	8b 83       	std	Y+3, r24	; 0x03
    114e:	9c 83       	std	Y+4, r25	; 0x04
    1150:	2d 83       	std	Y+5, r18	; 0x05
    1152:	3e 83       	std	Y+6, r19	; 0x06
    1154:	4f 83       	std	Y+7, r20	; 0x07
    1156:	58 87       	std	Y+8, r21	; 0x08
    1158:	f9 e0       	ldi	r31, 0x09	; 9
    115a:	ef 2e       	mov	r14, r31
    115c:	f1 2c       	mov	r15, r1
    115e:	ec 0e       	add	r14, r28
    1160:	fd 1e       	adc	r15, r29
    1162:	b7 01       	movw	r22, r14
    1164:	ce 01       	movw	r24, r28
    1166:	01 96       	adiw	r24, 0x01	; 1
    1168:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__unpack_f>
    116c:	8e 01       	movw	r16, r28
    116e:	0f 5e       	subi	r16, 0xEF	; 239
    1170:	1f 4f       	sbci	r17, 0xFF	; 255
    1172:	b8 01       	movw	r22, r16
    1174:	ce 01       	movw	r24, r28
    1176:	05 96       	adiw	r24, 0x05	; 5
    1178:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__unpack_f>
    117c:	ae 01       	movw	r20, r28
    117e:	47 5e       	subi	r20, 0xE7	; 231
    1180:	5f 4f       	sbci	r21, 0xFF	; 255
    1182:	b8 01       	movw	r22, r16
    1184:	c7 01       	movw	r24, r14
    1186:	0e 94 21 07 	call	0xe42	; 0xe42 <_fpadd_parts>
    118a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__pack_f>
    118e:	a0 96       	adiw	r28, 0x20	; 32
    1190:	e6 e0       	ldi	r30, 0x06	; 6
    1192:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__epilogue_restores__+0x18>

00001196 <__mulsf3>:
    1196:	a0 e2       	ldi	r26, 0x20	; 32
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e1 ed       	ldi	r30, 0xD1	; 209
    119c:	f8 e0       	ldi	r31, 0x08	; 8
    119e:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__prologue_saves__>
    11a2:	69 83       	std	Y+1, r22	; 0x01
    11a4:	7a 83       	std	Y+2, r23	; 0x02
    11a6:	8b 83       	std	Y+3, r24	; 0x03
    11a8:	9c 83       	std	Y+4, r25	; 0x04
    11aa:	2d 83       	std	Y+5, r18	; 0x05
    11ac:	3e 83       	std	Y+6, r19	; 0x06
    11ae:	4f 83       	std	Y+7, r20	; 0x07
    11b0:	58 87       	std	Y+8, r21	; 0x08
    11b2:	be 01       	movw	r22, r28
    11b4:	67 5f       	subi	r22, 0xF7	; 247
    11b6:	7f 4f       	sbci	r23, 0xFF	; 255
    11b8:	ce 01       	movw	r24, r28
    11ba:	01 96       	adiw	r24, 0x01	; 1
    11bc:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__unpack_f>
    11c0:	be 01       	movw	r22, r28
    11c2:	6f 5e       	subi	r22, 0xEF	; 239
    11c4:	7f 4f       	sbci	r23, 0xFF	; 255
    11c6:	ce 01       	movw	r24, r28
    11c8:	05 96       	adiw	r24, 0x05	; 5
    11ca:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__unpack_f>
    11ce:	99 85       	ldd	r25, Y+9	; 0x09
    11d0:	92 30       	cpi	r25, 0x02	; 2
    11d2:	88 f0       	brcs	.+34     	; 0x11f6 <__mulsf3+0x60>
    11d4:	89 89       	ldd	r24, Y+17	; 0x11
    11d6:	82 30       	cpi	r24, 0x02	; 2
    11d8:	c8 f0       	brcs	.+50     	; 0x120c <__mulsf3+0x76>
    11da:	94 30       	cpi	r25, 0x04	; 4
    11dc:	19 f4       	brne	.+6      	; 0x11e4 <__mulsf3+0x4e>
    11de:	82 30       	cpi	r24, 0x02	; 2
    11e0:	51 f4       	brne	.+20     	; 0x11f6 <__mulsf3+0x60>
    11e2:	04 c0       	rjmp	.+8      	; 0x11ec <__mulsf3+0x56>
    11e4:	84 30       	cpi	r24, 0x04	; 4
    11e6:	29 f4       	brne	.+10     	; 0x11f2 <__mulsf3+0x5c>
    11e8:	92 30       	cpi	r25, 0x02	; 2
    11ea:	81 f4       	brne	.+32     	; 0x120c <__mulsf3+0x76>
    11ec:	86 e7       	ldi	r24, 0x76	; 118
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	c6 c0       	rjmp	.+396    	; 0x137e <__mulsf3+0x1e8>
    11f2:	92 30       	cpi	r25, 0x02	; 2
    11f4:	49 f4       	brne	.+18     	; 0x1208 <__mulsf3+0x72>
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fa:	8a 89       	ldd	r24, Y+18	; 0x12
    11fc:	98 13       	cpse	r25, r24
    11fe:	21 e0       	ldi	r18, 0x01	; 1
    1200:	2a 87       	std	Y+10, r18	; 0x0a
    1202:	ce 01       	movw	r24, r28
    1204:	09 96       	adiw	r24, 0x09	; 9
    1206:	bb c0       	rjmp	.+374    	; 0x137e <__mulsf3+0x1e8>
    1208:	82 30       	cpi	r24, 0x02	; 2
    120a:	49 f4       	brne	.+18     	; 0x121e <__mulsf3+0x88>
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1210:	8a 89       	ldd	r24, Y+18	; 0x12
    1212:	98 13       	cpse	r25, r24
    1214:	21 e0       	ldi	r18, 0x01	; 1
    1216:	2a 8b       	std	Y+18, r18	; 0x12
    1218:	ce 01       	movw	r24, r28
    121a:	41 96       	adiw	r24, 0x11	; 17
    121c:	b0 c0       	rjmp	.+352    	; 0x137e <__mulsf3+0x1e8>
    121e:	2d 84       	ldd	r2, Y+13	; 0x0d
    1220:	3e 84       	ldd	r3, Y+14	; 0x0e
    1222:	4f 84       	ldd	r4, Y+15	; 0x0f
    1224:	58 88       	ldd	r5, Y+16	; 0x10
    1226:	6d 88       	ldd	r6, Y+21	; 0x15
    1228:	7e 88       	ldd	r7, Y+22	; 0x16
    122a:	8f 88       	ldd	r8, Y+23	; 0x17
    122c:	98 8c       	ldd	r9, Y+24	; 0x18
    122e:	ee 24       	eor	r14, r14
    1230:	ff 24       	eor	r15, r15
    1232:	87 01       	movw	r16, r14
    1234:	aa 24       	eor	r10, r10
    1236:	bb 24       	eor	r11, r11
    1238:	65 01       	movw	r12, r10
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	50 e0       	ldi	r21, 0x00	; 0
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	e0 e0       	ldi	r30, 0x00	; 0
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	c1 01       	movw	r24, r2
    1248:	81 70       	andi	r24, 0x01	; 1
    124a:	90 70       	andi	r25, 0x00	; 0
    124c:	89 2b       	or	r24, r25
    124e:	e9 f0       	breq	.+58     	; 0x128a <__mulsf3+0xf4>
    1250:	e6 0c       	add	r14, r6
    1252:	f7 1c       	adc	r15, r7
    1254:	08 1d       	adc	r16, r8
    1256:	19 1d       	adc	r17, r9
    1258:	9a 01       	movw	r18, r20
    125a:	ab 01       	movw	r20, r22
    125c:	2a 0d       	add	r18, r10
    125e:	3b 1d       	adc	r19, r11
    1260:	4c 1d       	adc	r20, r12
    1262:	5d 1d       	adc	r21, r13
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	a0 e0       	ldi	r26, 0x00	; 0
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e6 14       	cp	r14, r6
    126e:	f7 04       	cpc	r15, r7
    1270:	08 05       	cpc	r16, r8
    1272:	19 05       	cpc	r17, r9
    1274:	20 f4       	brcc	.+8      	; 0x127e <__mulsf3+0xe8>
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	a0 e0       	ldi	r26, 0x00	; 0
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	ba 01       	movw	r22, r20
    1280:	a9 01       	movw	r20, r18
    1282:	48 0f       	add	r20, r24
    1284:	59 1f       	adc	r21, r25
    1286:	6a 1f       	adc	r22, r26
    1288:	7b 1f       	adc	r23, r27
    128a:	aa 0c       	add	r10, r10
    128c:	bb 1c       	adc	r11, r11
    128e:	cc 1c       	adc	r12, r12
    1290:	dd 1c       	adc	r13, r13
    1292:	97 fe       	sbrs	r9, 7
    1294:	08 c0       	rjmp	.+16     	; 0x12a6 <__mulsf3+0x110>
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	a0 e0       	ldi	r26, 0x00	; 0
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	a8 2a       	or	r10, r24
    12a0:	b9 2a       	or	r11, r25
    12a2:	ca 2a       	or	r12, r26
    12a4:	db 2a       	or	r13, r27
    12a6:	31 96       	adiw	r30, 0x01	; 1
    12a8:	e0 32       	cpi	r30, 0x20	; 32
    12aa:	f1 05       	cpc	r31, r1
    12ac:	49 f0       	breq	.+18     	; 0x12c0 <__mulsf3+0x12a>
    12ae:	66 0c       	add	r6, r6
    12b0:	77 1c       	adc	r7, r7
    12b2:	88 1c       	adc	r8, r8
    12b4:	99 1c       	adc	r9, r9
    12b6:	56 94       	lsr	r5
    12b8:	47 94       	ror	r4
    12ba:	37 94       	ror	r3
    12bc:	27 94       	ror	r2
    12be:	c3 cf       	rjmp	.-122    	; 0x1246 <__mulsf3+0xb0>
    12c0:	fa 85       	ldd	r31, Y+10	; 0x0a
    12c2:	ea 89       	ldd	r30, Y+18	; 0x12
    12c4:	2b 89       	ldd	r18, Y+19	; 0x13
    12c6:	3c 89       	ldd	r19, Y+20	; 0x14
    12c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    12ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    12cc:	28 0f       	add	r18, r24
    12ce:	39 1f       	adc	r19, r25
    12d0:	2e 5f       	subi	r18, 0xFE	; 254
    12d2:	3f 4f       	sbci	r19, 0xFF	; 255
    12d4:	17 c0       	rjmp	.+46     	; 0x1304 <__mulsf3+0x16e>
    12d6:	ca 01       	movw	r24, r20
    12d8:	81 70       	andi	r24, 0x01	; 1
    12da:	90 70       	andi	r25, 0x00	; 0
    12dc:	89 2b       	or	r24, r25
    12de:	61 f0       	breq	.+24     	; 0x12f8 <__mulsf3+0x162>
    12e0:	16 95       	lsr	r17
    12e2:	07 95       	ror	r16
    12e4:	f7 94       	ror	r15
    12e6:	e7 94       	ror	r14
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	a0 e0       	ldi	r26, 0x00	; 0
    12ee:	b0 e8       	ldi	r27, 0x80	; 128
    12f0:	e8 2a       	or	r14, r24
    12f2:	f9 2a       	or	r15, r25
    12f4:	0a 2b       	or	r16, r26
    12f6:	1b 2b       	or	r17, r27
    12f8:	76 95       	lsr	r23
    12fa:	67 95       	ror	r22
    12fc:	57 95       	ror	r21
    12fe:	47 95       	ror	r20
    1300:	2f 5f       	subi	r18, 0xFF	; 255
    1302:	3f 4f       	sbci	r19, 0xFF	; 255
    1304:	77 fd       	sbrc	r23, 7
    1306:	e7 cf       	rjmp	.-50     	; 0x12d6 <__mulsf3+0x140>
    1308:	0c c0       	rjmp	.+24     	; 0x1322 <__mulsf3+0x18c>
    130a:	44 0f       	add	r20, r20
    130c:	55 1f       	adc	r21, r21
    130e:	66 1f       	adc	r22, r22
    1310:	77 1f       	adc	r23, r23
    1312:	17 fd       	sbrc	r17, 7
    1314:	41 60       	ori	r20, 0x01	; 1
    1316:	ee 0c       	add	r14, r14
    1318:	ff 1c       	adc	r15, r15
    131a:	00 1f       	adc	r16, r16
    131c:	11 1f       	adc	r17, r17
    131e:	21 50       	subi	r18, 0x01	; 1
    1320:	30 40       	sbci	r19, 0x00	; 0
    1322:	40 30       	cpi	r20, 0x00	; 0
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	59 07       	cpc	r21, r25
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	69 07       	cpc	r22, r25
    132c:	90 e4       	ldi	r25, 0x40	; 64
    132e:	79 07       	cpc	r23, r25
    1330:	60 f3       	brcs	.-40     	; 0x130a <__mulsf3+0x174>
    1332:	2b 8f       	std	Y+27, r18	; 0x1b
    1334:	3c 8f       	std	Y+28, r19	; 0x1c
    1336:	db 01       	movw	r26, r22
    1338:	ca 01       	movw	r24, r20
    133a:	8f 77       	andi	r24, 0x7F	; 127
    133c:	90 70       	andi	r25, 0x00	; 0
    133e:	a0 70       	andi	r26, 0x00	; 0
    1340:	b0 70       	andi	r27, 0x00	; 0
    1342:	80 34       	cpi	r24, 0x40	; 64
    1344:	91 05       	cpc	r25, r1
    1346:	a1 05       	cpc	r26, r1
    1348:	b1 05       	cpc	r27, r1
    134a:	61 f4       	brne	.+24     	; 0x1364 <__mulsf3+0x1ce>
    134c:	47 fd       	sbrc	r20, 7
    134e:	0a c0       	rjmp	.+20     	; 0x1364 <__mulsf3+0x1ce>
    1350:	e1 14       	cp	r14, r1
    1352:	f1 04       	cpc	r15, r1
    1354:	01 05       	cpc	r16, r1
    1356:	11 05       	cpc	r17, r1
    1358:	29 f0       	breq	.+10     	; 0x1364 <__mulsf3+0x1ce>
    135a:	40 5c       	subi	r20, 0xC0	; 192
    135c:	5f 4f       	sbci	r21, 0xFF	; 255
    135e:	6f 4f       	sbci	r22, 0xFF	; 255
    1360:	7f 4f       	sbci	r23, 0xFF	; 255
    1362:	40 78       	andi	r20, 0x80	; 128
    1364:	1a 8e       	std	Y+26, r1	; 0x1a
    1366:	fe 17       	cp	r31, r30
    1368:	11 f0       	breq	.+4      	; 0x136e <__mulsf3+0x1d8>
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	8a 8f       	std	Y+26, r24	; 0x1a
    136e:	4d 8f       	std	Y+29, r20	; 0x1d
    1370:	5e 8f       	std	Y+30, r21	; 0x1e
    1372:	6f 8f       	std	Y+31, r22	; 0x1f
    1374:	78 a3       	std	Y+32, r23	; 0x20
    1376:	83 e0       	ldi	r24, 0x03	; 3
    1378:	89 8f       	std	Y+25, r24	; 0x19
    137a:	ce 01       	movw	r24, r28
    137c:	49 96       	adiw	r24, 0x19	; 25
    137e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__pack_f>
    1382:	a0 96       	adiw	r28, 0x20	; 32
    1384:	e2 e1       	ldi	r30, 0x12	; 18
    1386:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__epilogue_restores__>

0000138a <__divsf3>:
    138a:	a8 e1       	ldi	r26, 0x18	; 24
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	eb ec       	ldi	r30, 0xCB	; 203
    1390:	f9 e0       	ldi	r31, 0x09	; 9
    1392:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__prologue_saves__+0x10>
    1396:	69 83       	std	Y+1, r22	; 0x01
    1398:	7a 83       	std	Y+2, r23	; 0x02
    139a:	8b 83       	std	Y+3, r24	; 0x03
    139c:	9c 83       	std	Y+4, r25	; 0x04
    139e:	2d 83       	std	Y+5, r18	; 0x05
    13a0:	3e 83       	std	Y+6, r19	; 0x06
    13a2:	4f 83       	std	Y+7, r20	; 0x07
    13a4:	58 87       	std	Y+8, r21	; 0x08
    13a6:	b9 e0       	ldi	r27, 0x09	; 9
    13a8:	eb 2e       	mov	r14, r27
    13aa:	f1 2c       	mov	r15, r1
    13ac:	ec 0e       	add	r14, r28
    13ae:	fd 1e       	adc	r15, r29
    13b0:	b7 01       	movw	r22, r14
    13b2:	ce 01       	movw	r24, r28
    13b4:	01 96       	adiw	r24, 0x01	; 1
    13b6:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__unpack_f>
    13ba:	8e 01       	movw	r16, r28
    13bc:	0f 5e       	subi	r16, 0xEF	; 239
    13be:	1f 4f       	sbci	r17, 0xFF	; 255
    13c0:	b8 01       	movw	r22, r16
    13c2:	ce 01       	movw	r24, r28
    13c4:	05 96       	adiw	r24, 0x05	; 5
    13c6:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__unpack_f>
    13ca:	29 85       	ldd	r18, Y+9	; 0x09
    13cc:	22 30       	cpi	r18, 0x02	; 2
    13ce:	08 f4       	brcc	.+2      	; 0x13d2 <__divsf3+0x48>
    13d0:	7c c0       	rjmp	.+248    	; 0x14ca <__divsf3+0x140>
    13d2:	39 89       	ldd	r19, Y+17	; 0x11
    13d4:	32 30       	cpi	r19, 0x02	; 2
    13d6:	10 f4       	brcc	.+4      	; 0x13dc <__divsf3+0x52>
    13d8:	b8 01       	movw	r22, r16
    13da:	7a c0       	rjmp	.+244    	; 0x14d0 <__divsf3+0x146>
    13dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    13de:	9a 89       	ldd	r25, Y+18	; 0x12
    13e0:	89 27       	eor	r24, r25
    13e2:	8a 87       	std	Y+10, r24	; 0x0a
    13e4:	24 30       	cpi	r18, 0x04	; 4
    13e6:	11 f0       	breq	.+4      	; 0x13ec <__divsf3+0x62>
    13e8:	22 30       	cpi	r18, 0x02	; 2
    13ea:	31 f4       	brne	.+12     	; 0x13f8 <__divsf3+0x6e>
    13ec:	23 17       	cp	r18, r19
    13ee:	09 f0       	breq	.+2      	; 0x13f2 <__divsf3+0x68>
    13f0:	6c c0       	rjmp	.+216    	; 0x14ca <__divsf3+0x140>
    13f2:	66 e7       	ldi	r22, 0x76	; 118
    13f4:	70 e0       	ldi	r23, 0x00	; 0
    13f6:	6c c0       	rjmp	.+216    	; 0x14d0 <__divsf3+0x146>
    13f8:	34 30       	cpi	r19, 0x04	; 4
    13fa:	39 f4       	brne	.+14     	; 0x140a <__divsf3+0x80>
    13fc:	1d 86       	std	Y+13, r1	; 0x0d
    13fe:	1e 86       	std	Y+14, r1	; 0x0e
    1400:	1f 86       	std	Y+15, r1	; 0x0f
    1402:	18 8a       	std	Y+16, r1	; 0x10
    1404:	1c 86       	std	Y+12, r1	; 0x0c
    1406:	1b 86       	std	Y+11, r1	; 0x0b
    1408:	04 c0       	rjmp	.+8      	; 0x1412 <__divsf3+0x88>
    140a:	32 30       	cpi	r19, 0x02	; 2
    140c:	21 f4       	brne	.+8      	; 0x1416 <__divsf3+0x8c>
    140e:	84 e0       	ldi	r24, 0x04	; 4
    1410:	89 87       	std	Y+9, r24	; 0x09
    1412:	b7 01       	movw	r22, r14
    1414:	5d c0       	rjmp	.+186    	; 0x14d0 <__divsf3+0x146>
    1416:	2b 85       	ldd	r18, Y+11	; 0x0b
    1418:	3c 85       	ldd	r19, Y+12	; 0x0c
    141a:	8b 89       	ldd	r24, Y+19	; 0x13
    141c:	9c 89       	ldd	r25, Y+20	; 0x14
    141e:	28 1b       	sub	r18, r24
    1420:	39 0b       	sbc	r19, r25
    1422:	3c 87       	std	Y+12, r19	; 0x0c
    1424:	2b 87       	std	Y+11, r18	; 0x0b
    1426:	ed 84       	ldd	r14, Y+13	; 0x0d
    1428:	fe 84       	ldd	r15, Y+14	; 0x0e
    142a:	0f 85       	ldd	r16, Y+15	; 0x0f
    142c:	18 89       	ldd	r17, Y+16	; 0x10
    142e:	ad 88       	ldd	r10, Y+21	; 0x15
    1430:	be 88       	ldd	r11, Y+22	; 0x16
    1432:	cf 88       	ldd	r12, Y+23	; 0x17
    1434:	d8 8c       	ldd	r13, Y+24	; 0x18
    1436:	ea 14       	cp	r14, r10
    1438:	fb 04       	cpc	r15, r11
    143a:	0c 05       	cpc	r16, r12
    143c:	1d 05       	cpc	r17, r13
    143e:	40 f4       	brcc	.+16     	; 0x1450 <__divsf3+0xc6>
    1440:	ee 0c       	add	r14, r14
    1442:	ff 1c       	adc	r15, r15
    1444:	00 1f       	adc	r16, r16
    1446:	11 1f       	adc	r17, r17
    1448:	21 50       	subi	r18, 0x01	; 1
    144a:	30 40       	sbci	r19, 0x00	; 0
    144c:	3c 87       	std	Y+12, r19	; 0x0c
    144e:	2b 87       	std	Y+11, r18	; 0x0b
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	50 e0       	ldi	r21, 0x00	; 0
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	a0 e0       	ldi	r26, 0x00	; 0
    145e:	b0 e4       	ldi	r27, 0x40	; 64
    1460:	6f e1       	ldi	r22, 0x1F	; 31
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	ea 14       	cp	r14, r10
    1466:	fb 04       	cpc	r15, r11
    1468:	0c 05       	cpc	r16, r12
    146a:	1d 05       	cpc	r17, r13
    146c:	40 f0       	brcs	.+16     	; 0x147e <__divsf3+0xf4>
    146e:	28 2b       	or	r18, r24
    1470:	39 2b       	or	r19, r25
    1472:	4a 2b       	or	r20, r26
    1474:	5b 2b       	or	r21, r27
    1476:	ea 18       	sub	r14, r10
    1478:	fb 08       	sbc	r15, r11
    147a:	0c 09       	sbc	r16, r12
    147c:	1d 09       	sbc	r17, r13
    147e:	b6 95       	lsr	r27
    1480:	a7 95       	ror	r26
    1482:	97 95       	ror	r25
    1484:	87 95       	ror	r24
    1486:	ee 0c       	add	r14, r14
    1488:	ff 1c       	adc	r15, r15
    148a:	00 1f       	adc	r16, r16
    148c:	11 1f       	adc	r17, r17
    148e:	61 50       	subi	r22, 0x01	; 1
    1490:	70 40       	sbci	r23, 0x00	; 0
    1492:	41 f7       	brne	.-48     	; 0x1464 <__divsf3+0xda>
    1494:	da 01       	movw	r26, r20
    1496:	c9 01       	movw	r24, r18
    1498:	8f 77       	andi	r24, 0x7F	; 127
    149a:	90 70       	andi	r25, 0x00	; 0
    149c:	a0 70       	andi	r26, 0x00	; 0
    149e:	b0 70       	andi	r27, 0x00	; 0
    14a0:	80 34       	cpi	r24, 0x40	; 64
    14a2:	91 05       	cpc	r25, r1
    14a4:	a1 05       	cpc	r26, r1
    14a6:	b1 05       	cpc	r27, r1
    14a8:	61 f4       	brne	.+24     	; 0x14c2 <__divsf3+0x138>
    14aa:	27 fd       	sbrc	r18, 7
    14ac:	0a c0       	rjmp	.+20     	; 0x14c2 <__divsf3+0x138>
    14ae:	e1 14       	cp	r14, r1
    14b0:	f1 04       	cpc	r15, r1
    14b2:	01 05       	cpc	r16, r1
    14b4:	11 05       	cpc	r17, r1
    14b6:	29 f0       	breq	.+10     	; 0x14c2 <__divsf3+0x138>
    14b8:	20 5c       	subi	r18, 0xC0	; 192
    14ba:	3f 4f       	sbci	r19, 0xFF	; 255
    14bc:	4f 4f       	sbci	r20, 0xFF	; 255
    14be:	5f 4f       	sbci	r21, 0xFF	; 255
    14c0:	20 78       	andi	r18, 0x80	; 128
    14c2:	2d 87       	std	Y+13, r18	; 0x0d
    14c4:	3e 87       	std	Y+14, r19	; 0x0e
    14c6:	4f 87       	std	Y+15, r20	; 0x0f
    14c8:	58 8b       	std	Y+16, r21	; 0x10
    14ca:	be 01       	movw	r22, r28
    14cc:	67 5f       	subi	r22, 0xF7	; 247
    14ce:	7f 4f       	sbci	r23, 0xFF	; 255
    14d0:	cb 01       	movw	r24, r22
    14d2:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__pack_f>
    14d6:	68 96       	adiw	r28, 0x18	; 24
    14d8:	ea e0       	ldi	r30, 0x0A	; 10
    14da:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <__epilogue_restores__+0x10>

000014de <__gtsf2>:
    14de:	a8 e1       	ldi	r26, 0x18	; 24
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e5 e7       	ldi	r30, 0x75	; 117
    14e4:	fa e0       	ldi	r31, 0x0A	; 10
    14e6:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__prologue_saves__+0x18>
    14ea:	69 83       	std	Y+1, r22	; 0x01
    14ec:	7a 83       	std	Y+2, r23	; 0x02
    14ee:	8b 83       	std	Y+3, r24	; 0x03
    14f0:	9c 83       	std	Y+4, r25	; 0x04
    14f2:	2d 83       	std	Y+5, r18	; 0x05
    14f4:	3e 83       	std	Y+6, r19	; 0x06
    14f6:	4f 83       	std	Y+7, r20	; 0x07
    14f8:	58 87       	std	Y+8, r21	; 0x08
    14fa:	89 e0       	ldi	r24, 0x09	; 9
    14fc:	e8 2e       	mov	r14, r24
    14fe:	f1 2c       	mov	r15, r1
    1500:	ec 0e       	add	r14, r28
    1502:	fd 1e       	adc	r15, r29
    1504:	b7 01       	movw	r22, r14
    1506:	ce 01       	movw	r24, r28
    1508:	01 96       	adiw	r24, 0x01	; 1
    150a:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__unpack_f>
    150e:	8e 01       	movw	r16, r28
    1510:	0f 5e       	subi	r16, 0xEF	; 239
    1512:	1f 4f       	sbci	r17, 0xFF	; 255
    1514:	b8 01       	movw	r22, r16
    1516:	ce 01       	movw	r24, r28
    1518:	05 96       	adiw	r24, 0x05	; 5
    151a:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__unpack_f>
    151e:	89 85       	ldd	r24, Y+9	; 0x09
    1520:	82 30       	cpi	r24, 0x02	; 2
    1522:	40 f0       	brcs	.+16     	; 0x1534 <__gtsf2+0x56>
    1524:	89 89       	ldd	r24, Y+17	; 0x11
    1526:	82 30       	cpi	r24, 0x02	; 2
    1528:	28 f0       	brcs	.+10     	; 0x1534 <__gtsf2+0x56>
    152a:	b8 01       	movw	r22, r16
    152c:	c7 01       	movw	r24, r14
    152e:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__fpcmp_parts_f>
    1532:	01 c0       	rjmp	.+2      	; 0x1536 <__gtsf2+0x58>
    1534:	8f ef       	ldi	r24, 0xFF	; 255
    1536:	68 96       	adiw	r28, 0x18	; 24
    1538:	e6 e0       	ldi	r30, 0x06	; 6
    153a:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__epilogue_restores__+0x18>

0000153e <__gesf2>:
    153e:	a8 e1       	ldi	r26, 0x18	; 24
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e5 ea       	ldi	r30, 0xA5	; 165
    1544:	fa e0       	ldi	r31, 0x0A	; 10
    1546:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__prologue_saves__+0x18>
    154a:	69 83       	std	Y+1, r22	; 0x01
    154c:	7a 83       	std	Y+2, r23	; 0x02
    154e:	8b 83       	std	Y+3, r24	; 0x03
    1550:	9c 83       	std	Y+4, r25	; 0x04
    1552:	2d 83       	std	Y+5, r18	; 0x05
    1554:	3e 83       	std	Y+6, r19	; 0x06
    1556:	4f 83       	std	Y+7, r20	; 0x07
    1558:	58 87       	std	Y+8, r21	; 0x08
    155a:	89 e0       	ldi	r24, 0x09	; 9
    155c:	e8 2e       	mov	r14, r24
    155e:	f1 2c       	mov	r15, r1
    1560:	ec 0e       	add	r14, r28
    1562:	fd 1e       	adc	r15, r29
    1564:	b7 01       	movw	r22, r14
    1566:	ce 01       	movw	r24, r28
    1568:	01 96       	adiw	r24, 0x01	; 1
    156a:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__unpack_f>
    156e:	8e 01       	movw	r16, r28
    1570:	0f 5e       	subi	r16, 0xEF	; 239
    1572:	1f 4f       	sbci	r17, 0xFF	; 255
    1574:	b8 01       	movw	r22, r16
    1576:	ce 01       	movw	r24, r28
    1578:	05 96       	adiw	r24, 0x05	; 5
    157a:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__unpack_f>
    157e:	89 85       	ldd	r24, Y+9	; 0x09
    1580:	82 30       	cpi	r24, 0x02	; 2
    1582:	40 f0       	brcs	.+16     	; 0x1594 <__gesf2+0x56>
    1584:	89 89       	ldd	r24, Y+17	; 0x11
    1586:	82 30       	cpi	r24, 0x02	; 2
    1588:	28 f0       	brcs	.+10     	; 0x1594 <__gesf2+0x56>
    158a:	b8 01       	movw	r22, r16
    158c:	c7 01       	movw	r24, r14
    158e:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__fpcmp_parts_f>
    1592:	01 c0       	rjmp	.+2      	; 0x1596 <__gesf2+0x58>
    1594:	8f ef       	ldi	r24, 0xFF	; 255
    1596:	68 96       	adiw	r28, 0x18	; 24
    1598:	e6 e0       	ldi	r30, 0x06	; 6
    159a:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__epilogue_restores__+0x18>

0000159e <__ltsf2>:
    159e:	a8 e1       	ldi	r26, 0x18	; 24
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e5 ed       	ldi	r30, 0xD5	; 213
    15a4:	fa e0       	ldi	r31, 0x0A	; 10
    15a6:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__prologue_saves__+0x18>
    15aa:	69 83       	std	Y+1, r22	; 0x01
    15ac:	7a 83       	std	Y+2, r23	; 0x02
    15ae:	8b 83       	std	Y+3, r24	; 0x03
    15b0:	9c 83       	std	Y+4, r25	; 0x04
    15b2:	2d 83       	std	Y+5, r18	; 0x05
    15b4:	3e 83       	std	Y+6, r19	; 0x06
    15b6:	4f 83       	std	Y+7, r20	; 0x07
    15b8:	58 87       	std	Y+8, r21	; 0x08
    15ba:	89 e0       	ldi	r24, 0x09	; 9
    15bc:	e8 2e       	mov	r14, r24
    15be:	f1 2c       	mov	r15, r1
    15c0:	ec 0e       	add	r14, r28
    15c2:	fd 1e       	adc	r15, r29
    15c4:	b7 01       	movw	r22, r14
    15c6:	ce 01       	movw	r24, r28
    15c8:	01 96       	adiw	r24, 0x01	; 1
    15ca:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__unpack_f>
    15ce:	8e 01       	movw	r16, r28
    15d0:	0f 5e       	subi	r16, 0xEF	; 239
    15d2:	1f 4f       	sbci	r17, 0xFF	; 255
    15d4:	b8 01       	movw	r22, r16
    15d6:	ce 01       	movw	r24, r28
    15d8:	05 96       	adiw	r24, 0x05	; 5
    15da:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__unpack_f>
    15de:	89 85       	ldd	r24, Y+9	; 0x09
    15e0:	82 30       	cpi	r24, 0x02	; 2
    15e2:	40 f0       	brcs	.+16     	; 0x15f4 <__ltsf2+0x56>
    15e4:	89 89       	ldd	r24, Y+17	; 0x11
    15e6:	82 30       	cpi	r24, 0x02	; 2
    15e8:	28 f0       	brcs	.+10     	; 0x15f4 <__ltsf2+0x56>
    15ea:	b8 01       	movw	r22, r16
    15ec:	c7 01       	movw	r24, r14
    15ee:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__fpcmp_parts_f>
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <__ltsf2+0x58>
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	68 96       	adiw	r28, 0x18	; 24
    15f8:	e6 e0       	ldi	r30, 0x06	; 6
    15fa:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__epilogue_restores__+0x18>

000015fe <__fixsfsi>:
    15fe:	ac e0       	ldi	r26, 0x0C	; 12
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e5 e0       	ldi	r30, 0x05	; 5
    1604:	fb e0       	ldi	r31, 0x0B	; 11
    1606:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__prologue_saves__+0x20>
    160a:	69 83       	std	Y+1, r22	; 0x01
    160c:	7a 83       	std	Y+2, r23	; 0x02
    160e:	8b 83       	std	Y+3, r24	; 0x03
    1610:	9c 83       	std	Y+4, r25	; 0x04
    1612:	be 01       	movw	r22, r28
    1614:	6b 5f       	subi	r22, 0xFB	; 251
    1616:	7f 4f       	sbci	r23, 0xFF	; 255
    1618:	ce 01       	movw	r24, r28
    161a:	01 96       	adiw	r24, 0x01	; 1
    161c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__unpack_f>
    1620:	8d 81       	ldd	r24, Y+5	; 0x05
    1622:	82 30       	cpi	r24, 0x02	; 2
    1624:	61 f1       	breq	.+88     	; 0x167e <__fixsfsi+0x80>
    1626:	82 30       	cpi	r24, 0x02	; 2
    1628:	50 f1       	brcs	.+84     	; 0x167e <__fixsfsi+0x80>
    162a:	84 30       	cpi	r24, 0x04	; 4
    162c:	21 f4       	brne	.+8      	; 0x1636 <__fixsfsi+0x38>
    162e:	8e 81       	ldd	r24, Y+6	; 0x06
    1630:	88 23       	and	r24, r24
    1632:	51 f1       	breq	.+84     	; 0x1688 <__fixsfsi+0x8a>
    1634:	2e c0       	rjmp	.+92     	; 0x1692 <__fixsfsi+0x94>
    1636:	2f 81       	ldd	r18, Y+7	; 0x07
    1638:	38 85       	ldd	r19, Y+8	; 0x08
    163a:	37 fd       	sbrc	r19, 7
    163c:	20 c0       	rjmp	.+64     	; 0x167e <__fixsfsi+0x80>
    163e:	6e 81       	ldd	r22, Y+6	; 0x06
    1640:	2f 31       	cpi	r18, 0x1F	; 31
    1642:	31 05       	cpc	r19, r1
    1644:	1c f0       	brlt	.+6      	; 0x164c <__fixsfsi+0x4e>
    1646:	66 23       	and	r22, r22
    1648:	f9 f0       	breq	.+62     	; 0x1688 <__fixsfsi+0x8a>
    164a:	23 c0       	rjmp	.+70     	; 0x1692 <__fixsfsi+0x94>
    164c:	8e e1       	ldi	r24, 0x1E	; 30
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	82 1b       	sub	r24, r18
    1652:	93 0b       	sbc	r25, r19
    1654:	29 85       	ldd	r18, Y+9	; 0x09
    1656:	3a 85       	ldd	r19, Y+10	; 0x0a
    1658:	4b 85       	ldd	r20, Y+11	; 0x0b
    165a:	5c 85       	ldd	r21, Y+12	; 0x0c
    165c:	04 c0       	rjmp	.+8      	; 0x1666 <__fixsfsi+0x68>
    165e:	56 95       	lsr	r21
    1660:	47 95       	ror	r20
    1662:	37 95       	ror	r19
    1664:	27 95       	ror	r18
    1666:	8a 95       	dec	r24
    1668:	d2 f7       	brpl	.-12     	; 0x165e <__fixsfsi+0x60>
    166a:	66 23       	and	r22, r22
    166c:	b1 f0       	breq	.+44     	; 0x169a <__fixsfsi+0x9c>
    166e:	50 95       	com	r21
    1670:	40 95       	com	r20
    1672:	30 95       	com	r19
    1674:	21 95       	neg	r18
    1676:	3f 4f       	sbci	r19, 0xFF	; 255
    1678:	4f 4f       	sbci	r20, 0xFF	; 255
    167a:	5f 4f       	sbci	r21, 0xFF	; 255
    167c:	0e c0       	rjmp	.+28     	; 0x169a <__fixsfsi+0x9c>
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	40 e0       	ldi	r20, 0x00	; 0
    1684:	50 e0       	ldi	r21, 0x00	; 0
    1686:	09 c0       	rjmp	.+18     	; 0x169a <__fixsfsi+0x9c>
    1688:	2f ef       	ldi	r18, 0xFF	; 255
    168a:	3f ef       	ldi	r19, 0xFF	; 255
    168c:	4f ef       	ldi	r20, 0xFF	; 255
    168e:	5f e7       	ldi	r21, 0x7F	; 127
    1690:	04 c0       	rjmp	.+8      	; 0x169a <__fixsfsi+0x9c>
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e0       	ldi	r20, 0x00	; 0
    1698:	50 e8       	ldi	r21, 0x80	; 128
    169a:	b9 01       	movw	r22, r18
    169c:	ca 01       	movw	r24, r20
    169e:	2c 96       	adiw	r28, 0x0c	; 12
    16a0:	e2 e0       	ldi	r30, 0x02	; 2
    16a2:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <__epilogue_restores__+0x20>

000016a6 <__floatunsisf>:
    16a6:	a8 e0       	ldi	r26, 0x08	; 8
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e9 e5       	ldi	r30, 0x59	; 89
    16ac:	fb e0       	ldi	r31, 0x0B	; 11
    16ae:	0c 94 08 0e 	jmp	0x1c10	; 0x1c10 <__prologue_saves__+0x14>
    16b2:	7b 01       	movw	r14, r22
    16b4:	8c 01       	movw	r16, r24
    16b6:	61 15       	cp	r22, r1
    16b8:	71 05       	cpc	r23, r1
    16ba:	81 05       	cpc	r24, r1
    16bc:	91 05       	cpc	r25, r1
    16be:	19 f4       	brne	.+6      	; 0x16c6 <__floatunsisf+0x20>
    16c0:	82 e0       	ldi	r24, 0x02	; 2
    16c2:	89 83       	std	Y+1, r24	; 0x01
    16c4:	60 c0       	rjmp	.+192    	; 0x1786 <__floatunsisf+0xe0>
    16c6:	83 e0       	ldi	r24, 0x03	; 3
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	8e e1       	ldi	r24, 0x1E	; 30
    16cc:	c8 2e       	mov	r12, r24
    16ce:	d1 2c       	mov	r13, r1
    16d0:	dc 82       	std	Y+4, r13	; 0x04
    16d2:	cb 82       	std	Y+3, r12	; 0x03
    16d4:	ed 82       	std	Y+5, r14	; 0x05
    16d6:	fe 82       	std	Y+6, r15	; 0x06
    16d8:	0f 83       	std	Y+7, r16	; 0x07
    16da:	18 87       	std	Y+8, r17	; 0x08
    16dc:	c8 01       	movw	r24, r16
    16de:	b7 01       	movw	r22, r14
    16e0:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__clzsi2>
    16e4:	bc 01       	movw	r22, r24
    16e6:	61 50       	subi	r22, 0x01	; 1
    16e8:	70 40       	sbci	r23, 0x00	; 0
    16ea:	77 ff       	sbrs	r23, 7
    16ec:	39 c0       	rjmp	.+114    	; 0x1760 <__floatunsisf+0xba>
    16ee:	ee 27       	eor	r30, r30
    16f0:	ff 27       	eor	r31, r31
    16f2:	e6 1b       	sub	r30, r22
    16f4:	f7 0b       	sbc	r31, r23
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	40 e0       	ldi	r20, 0x00	; 0
    16fc:	50 e0       	ldi	r21, 0x00	; 0
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	a0 e0       	ldi	r26, 0x00	; 0
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	0e 2e       	mov	r0, r30
    1708:	04 c0       	rjmp	.+8      	; 0x1712 <__floatunsisf+0x6c>
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	aa 1f       	adc	r26, r26
    1710:	bb 1f       	adc	r27, r27
    1712:	0a 94       	dec	r0
    1714:	d2 f7       	brpl	.-12     	; 0x170a <__floatunsisf+0x64>
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	a1 09       	sbc	r26, r1
    171a:	b1 09       	sbc	r27, r1
    171c:	8e 21       	and	r24, r14
    171e:	9f 21       	and	r25, r15
    1720:	a0 23       	and	r26, r16
    1722:	b1 23       	and	r27, r17
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	a1 05       	cpc	r26, r1
    1728:	b1 05       	cpc	r27, r1
    172a:	21 f0       	breq	.+8      	; 0x1734 <__floatunsisf+0x8e>
    172c:	21 e0       	ldi	r18, 0x01	; 1
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	04 c0       	rjmp	.+8      	; 0x173e <__floatunsisf+0x98>
    1736:	16 95       	lsr	r17
    1738:	07 95       	ror	r16
    173a:	f7 94       	ror	r15
    173c:	e7 94       	ror	r14
    173e:	ea 95       	dec	r30
    1740:	d2 f7       	brpl	.-12     	; 0x1736 <__floatunsisf+0x90>
    1742:	2e 29       	or	r18, r14
    1744:	3f 29       	or	r19, r15
    1746:	40 2b       	or	r20, r16
    1748:	51 2b       	or	r21, r17
    174a:	2d 83       	std	Y+5, r18	; 0x05
    174c:	3e 83       	std	Y+6, r19	; 0x06
    174e:	4f 83       	std	Y+7, r20	; 0x07
    1750:	58 87       	std	Y+8, r21	; 0x08
    1752:	8e e1       	ldi	r24, 0x1E	; 30
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	86 1b       	sub	r24, r22
    1758:	97 0b       	sbc	r25, r23
    175a:	9c 83       	std	Y+4, r25	; 0x04
    175c:	8b 83       	std	Y+3, r24	; 0x03
    175e:	13 c0       	rjmp	.+38     	; 0x1786 <__floatunsisf+0xe0>
    1760:	61 15       	cp	r22, r1
    1762:	71 05       	cpc	r23, r1
    1764:	81 f0       	breq	.+32     	; 0x1786 <__floatunsisf+0xe0>
    1766:	06 2e       	mov	r0, r22
    1768:	04 c0       	rjmp	.+8      	; 0x1772 <__floatunsisf+0xcc>
    176a:	ee 0c       	add	r14, r14
    176c:	ff 1c       	adc	r15, r15
    176e:	00 1f       	adc	r16, r16
    1770:	11 1f       	adc	r17, r17
    1772:	0a 94       	dec	r0
    1774:	d2 f7       	brpl	.-12     	; 0x176a <__floatunsisf+0xc4>
    1776:	ed 82       	std	Y+5, r14	; 0x05
    1778:	fe 82       	std	Y+6, r15	; 0x06
    177a:	0f 83       	std	Y+7, r16	; 0x07
    177c:	18 87       	std	Y+8, r17	; 0x08
    177e:	c6 1a       	sub	r12, r22
    1780:	d7 0a       	sbc	r13, r23
    1782:	dc 82       	std	Y+4, r13	; 0x04
    1784:	cb 82       	std	Y+3, r12	; 0x03
    1786:	1a 82       	std	Y+2, r1	; 0x02
    1788:	ce 01       	movw	r24, r28
    178a:	01 96       	adiw	r24, 0x01	; 1
    178c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__pack_f>
    1790:	28 96       	adiw	r28, 0x08	; 8
    1792:	e8 e0       	ldi	r30, 0x08	; 8
    1794:	0c 94 24 0e 	jmp	0x1c48	; 0x1c48 <__epilogue_restores__+0x14>

00001798 <__clzsi2>:
    1798:	ef 92       	push	r14
    179a:	ff 92       	push	r15
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	7b 01       	movw	r14, r22
    17a2:	8c 01       	movw	r16, r24
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	e8 16       	cp	r14, r24
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	f8 06       	cpc	r15, r24
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	08 07       	cpc	r16, r24
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	18 07       	cpc	r17, r24
    17b4:	88 f4       	brcc	.+34     	; 0x17d8 <__clzsi2+0x40>
    17b6:	8f ef       	ldi	r24, 0xFF	; 255
    17b8:	e8 16       	cp	r14, r24
    17ba:	f1 04       	cpc	r15, r1
    17bc:	01 05       	cpc	r16, r1
    17be:	11 05       	cpc	r17, r1
    17c0:	31 f0       	breq	.+12     	; 0x17ce <__clzsi2+0x36>
    17c2:	28 f0       	brcs	.+10     	; 0x17ce <__clzsi2+0x36>
    17c4:	88 e0       	ldi	r24, 0x08	; 8
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	a0 e0       	ldi	r26, 0x00	; 0
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	17 c0       	rjmp	.+46     	; 0x17fc <__clzsi2+0x64>
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	a0 e0       	ldi	r26, 0x00	; 0
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	12 c0       	rjmp	.+36     	; 0x17fc <__clzsi2+0x64>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	e8 16       	cp	r14, r24
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	f8 06       	cpc	r15, r24
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	08 07       	cpc	r16, r24
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	18 07       	cpc	r17, r24
    17e8:	28 f0       	brcs	.+10     	; 0x17f4 <__clzsi2+0x5c>
    17ea:	88 e1       	ldi	r24, 0x18	; 24
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	a0 e0       	ldi	r26, 0x00	; 0
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	04 c0       	rjmp	.+8      	; 0x17fc <__clzsi2+0x64>
    17f4:	80 e1       	ldi	r24, 0x10	; 16
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	a0 e0       	ldi	r26, 0x00	; 0
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	20 e2       	ldi	r18, 0x20	; 32
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e0       	ldi	r20, 0x00	; 0
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	28 1b       	sub	r18, r24
    1806:	39 0b       	sbc	r19, r25
    1808:	4a 0b       	sbc	r20, r26
    180a:	5b 0b       	sbc	r21, r27
    180c:	04 c0       	rjmp	.+8      	; 0x1816 <__clzsi2+0x7e>
    180e:	16 95       	lsr	r17
    1810:	07 95       	ror	r16
    1812:	f7 94       	ror	r15
    1814:	e7 94       	ror	r14
    1816:	8a 95       	dec	r24
    1818:	d2 f7       	brpl	.-12     	; 0x180e <__clzsi2+0x76>
    181a:	f7 01       	movw	r30, r14
    181c:	e2 58       	subi	r30, 0x82	; 130
    181e:	ff 4f       	sbci	r31, 0xFF	; 255
    1820:	80 81       	ld	r24, Z
    1822:	28 1b       	sub	r18, r24
    1824:	31 09       	sbc	r19, r1
    1826:	41 09       	sbc	r20, r1
    1828:	51 09       	sbc	r21, r1
    182a:	c9 01       	movw	r24, r18
    182c:	1f 91       	pop	r17
    182e:	0f 91       	pop	r16
    1830:	ff 90       	pop	r15
    1832:	ef 90       	pop	r14
    1834:	08 95       	ret

00001836 <__pack_f>:
    1836:	df 92       	push	r13
    1838:	ef 92       	push	r14
    183a:	ff 92       	push	r15
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	fc 01       	movw	r30, r24
    1842:	e4 80       	ldd	r14, Z+4	; 0x04
    1844:	f5 80       	ldd	r15, Z+5	; 0x05
    1846:	06 81       	ldd	r16, Z+6	; 0x06
    1848:	17 81       	ldd	r17, Z+7	; 0x07
    184a:	d1 80       	ldd	r13, Z+1	; 0x01
    184c:	80 81       	ld	r24, Z
    184e:	82 30       	cpi	r24, 0x02	; 2
    1850:	48 f4       	brcc	.+18     	; 0x1864 <__pack_f+0x2e>
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	a0 e1       	ldi	r26, 0x10	; 16
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e8 2a       	or	r14, r24
    185c:	f9 2a       	or	r15, r25
    185e:	0a 2b       	or	r16, r26
    1860:	1b 2b       	or	r17, r27
    1862:	a5 c0       	rjmp	.+330    	; 0x19ae <__pack_f+0x178>
    1864:	84 30       	cpi	r24, 0x04	; 4
    1866:	09 f4       	brne	.+2      	; 0x186a <__pack_f+0x34>
    1868:	9f c0       	rjmp	.+318    	; 0x19a8 <__pack_f+0x172>
    186a:	82 30       	cpi	r24, 0x02	; 2
    186c:	21 f4       	brne	.+8      	; 0x1876 <__pack_f+0x40>
    186e:	ee 24       	eor	r14, r14
    1870:	ff 24       	eor	r15, r15
    1872:	87 01       	movw	r16, r14
    1874:	05 c0       	rjmp	.+10     	; 0x1880 <__pack_f+0x4a>
    1876:	e1 14       	cp	r14, r1
    1878:	f1 04       	cpc	r15, r1
    187a:	01 05       	cpc	r16, r1
    187c:	11 05       	cpc	r17, r1
    187e:	19 f4       	brne	.+6      	; 0x1886 <__pack_f+0x50>
    1880:	e0 e0       	ldi	r30, 0x00	; 0
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	96 c0       	rjmp	.+300    	; 0x19b2 <__pack_f+0x17c>
    1886:	62 81       	ldd	r22, Z+2	; 0x02
    1888:	73 81       	ldd	r23, Z+3	; 0x03
    188a:	9f ef       	ldi	r25, 0xFF	; 255
    188c:	62 38       	cpi	r22, 0x82	; 130
    188e:	79 07       	cpc	r23, r25
    1890:	0c f0       	brlt	.+2      	; 0x1894 <__pack_f+0x5e>
    1892:	5b c0       	rjmp	.+182    	; 0x194a <__pack_f+0x114>
    1894:	22 e8       	ldi	r18, 0x82	; 130
    1896:	3f ef       	ldi	r19, 0xFF	; 255
    1898:	26 1b       	sub	r18, r22
    189a:	37 0b       	sbc	r19, r23
    189c:	2a 31       	cpi	r18, 0x1A	; 26
    189e:	31 05       	cpc	r19, r1
    18a0:	2c f0       	brlt	.+10     	; 0x18ac <__pack_f+0x76>
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	40 e0       	ldi	r20, 0x00	; 0
    18a8:	50 e0       	ldi	r21, 0x00	; 0
    18aa:	2a c0       	rjmp	.+84     	; 0x1900 <__pack_f+0xca>
    18ac:	b8 01       	movw	r22, r16
    18ae:	a7 01       	movw	r20, r14
    18b0:	02 2e       	mov	r0, r18
    18b2:	04 c0       	rjmp	.+8      	; 0x18bc <__pack_f+0x86>
    18b4:	76 95       	lsr	r23
    18b6:	67 95       	ror	r22
    18b8:	57 95       	ror	r21
    18ba:	47 95       	ror	r20
    18bc:	0a 94       	dec	r0
    18be:	d2 f7       	brpl	.-12     	; 0x18b4 <__pack_f+0x7e>
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	a0 e0       	ldi	r26, 0x00	; 0
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	04 c0       	rjmp	.+8      	; 0x18d2 <__pack_f+0x9c>
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	aa 1f       	adc	r26, r26
    18d0:	bb 1f       	adc	r27, r27
    18d2:	2a 95       	dec	r18
    18d4:	d2 f7       	brpl	.-12     	; 0x18ca <__pack_f+0x94>
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	a1 09       	sbc	r26, r1
    18da:	b1 09       	sbc	r27, r1
    18dc:	8e 21       	and	r24, r14
    18de:	9f 21       	and	r25, r15
    18e0:	a0 23       	and	r26, r16
    18e2:	b1 23       	and	r27, r17
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	a1 05       	cpc	r26, r1
    18e8:	b1 05       	cpc	r27, r1
    18ea:	21 f0       	breq	.+8      	; 0x18f4 <__pack_f+0xbe>
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a0 e0       	ldi	r26, 0x00	; 0
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	9a 01       	movw	r18, r20
    18f6:	ab 01       	movw	r20, r22
    18f8:	28 2b       	or	r18, r24
    18fa:	39 2b       	or	r19, r25
    18fc:	4a 2b       	or	r20, r26
    18fe:	5b 2b       	or	r21, r27
    1900:	da 01       	movw	r26, r20
    1902:	c9 01       	movw	r24, r18
    1904:	8f 77       	andi	r24, 0x7F	; 127
    1906:	90 70       	andi	r25, 0x00	; 0
    1908:	a0 70       	andi	r26, 0x00	; 0
    190a:	b0 70       	andi	r27, 0x00	; 0
    190c:	80 34       	cpi	r24, 0x40	; 64
    190e:	91 05       	cpc	r25, r1
    1910:	a1 05       	cpc	r26, r1
    1912:	b1 05       	cpc	r27, r1
    1914:	39 f4       	brne	.+14     	; 0x1924 <__pack_f+0xee>
    1916:	27 ff       	sbrs	r18, 7
    1918:	09 c0       	rjmp	.+18     	; 0x192c <__pack_f+0xf6>
    191a:	20 5c       	subi	r18, 0xC0	; 192
    191c:	3f 4f       	sbci	r19, 0xFF	; 255
    191e:	4f 4f       	sbci	r20, 0xFF	; 255
    1920:	5f 4f       	sbci	r21, 0xFF	; 255
    1922:	04 c0       	rjmp	.+8      	; 0x192c <__pack_f+0xf6>
    1924:	21 5c       	subi	r18, 0xC1	; 193
    1926:	3f 4f       	sbci	r19, 0xFF	; 255
    1928:	4f 4f       	sbci	r20, 0xFF	; 255
    192a:	5f 4f       	sbci	r21, 0xFF	; 255
    192c:	e0 e0       	ldi	r30, 0x00	; 0
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	20 30       	cpi	r18, 0x00	; 0
    1932:	a0 e0       	ldi	r26, 0x00	; 0
    1934:	3a 07       	cpc	r19, r26
    1936:	a0 e0       	ldi	r26, 0x00	; 0
    1938:	4a 07       	cpc	r20, r26
    193a:	a0 e4       	ldi	r26, 0x40	; 64
    193c:	5a 07       	cpc	r21, r26
    193e:	10 f0       	brcs	.+4      	; 0x1944 <__pack_f+0x10e>
    1940:	e1 e0       	ldi	r30, 0x01	; 1
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	79 01       	movw	r14, r18
    1946:	8a 01       	movw	r16, r20
    1948:	27 c0       	rjmp	.+78     	; 0x1998 <__pack_f+0x162>
    194a:	60 38       	cpi	r22, 0x80	; 128
    194c:	71 05       	cpc	r23, r1
    194e:	64 f5       	brge	.+88     	; 0x19a8 <__pack_f+0x172>
    1950:	fb 01       	movw	r30, r22
    1952:	e1 58       	subi	r30, 0x81	; 129
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	d8 01       	movw	r26, r16
    1958:	c7 01       	movw	r24, r14
    195a:	8f 77       	andi	r24, 0x7F	; 127
    195c:	90 70       	andi	r25, 0x00	; 0
    195e:	a0 70       	andi	r26, 0x00	; 0
    1960:	b0 70       	andi	r27, 0x00	; 0
    1962:	80 34       	cpi	r24, 0x40	; 64
    1964:	91 05       	cpc	r25, r1
    1966:	a1 05       	cpc	r26, r1
    1968:	b1 05       	cpc	r27, r1
    196a:	39 f4       	brne	.+14     	; 0x197a <__pack_f+0x144>
    196c:	e7 fe       	sbrs	r14, 7
    196e:	0d c0       	rjmp	.+26     	; 0x198a <__pack_f+0x154>
    1970:	80 e4       	ldi	r24, 0x40	; 64
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	a0 e0       	ldi	r26, 0x00	; 0
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	04 c0       	rjmp	.+8      	; 0x1982 <__pack_f+0x14c>
    197a:	8f e3       	ldi	r24, 0x3F	; 63
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	a0 e0       	ldi	r26, 0x00	; 0
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e8 0e       	add	r14, r24
    1984:	f9 1e       	adc	r15, r25
    1986:	0a 1f       	adc	r16, r26
    1988:	1b 1f       	adc	r17, r27
    198a:	17 ff       	sbrs	r17, 7
    198c:	05 c0       	rjmp	.+10     	; 0x1998 <__pack_f+0x162>
    198e:	16 95       	lsr	r17
    1990:	07 95       	ror	r16
    1992:	f7 94       	ror	r15
    1994:	e7 94       	ror	r14
    1996:	31 96       	adiw	r30, 0x01	; 1
    1998:	87 e0       	ldi	r24, 0x07	; 7
    199a:	16 95       	lsr	r17
    199c:	07 95       	ror	r16
    199e:	f7 94       	ror	r15
    19a0:	e7 94       	ror	r14
    19a2:	8a 95       	dec	r24
    19a4:	d1 f7       	brne	.-12     	; 0x199a <__pack_f+0x164>
    19a6:	05 c0       	rjmp	.+10     	; 0x19b2 <__pack_f+0x17c>
    19a8:	ee 24       	eor	r14, r14
    19aa:	ff 24       	eor	r15, r15
    19ac:	87 01       	movw	r16, r14
    19ae:	ef ef       	ldi	r30, 0xFF	; 255
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	6e 2f       	mov	r22, r30
    19b4:	67 95       	ror	r22
    19b6:	66 27       	eor	r22, r22
    19b8:	67 95       	ror	r22
    19ba:	90 2f       	mov	r25, r16
    19bc:	9f 77       	andi	r25, 0x7F	; 127
    19be:	d7 94       	ror	r13
    19c0:	dd 24       	eor	r13, r13
    19c2:	d7 94       	ror	r13
    19c4:	8e 2f       	mov	r24, r30
    19c6:	86 95       	lsr	r24
    19c8:	49 2f       	mov	r20, r25
    19ca:	46 2b       	or	r20, r22
    19cc:	58 2f       	mov	r21, r24
    19ce:	5d 29       	or	r21, r13
    19d0:	b7 01       	movw	r22, r14
    19d2:	ca 01       	movw	r24, r20
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	ff 90       	pop	r15
    19da:	ef 90       	pop	r14
    19dc:	df 90       	pop	r13
    19de:	08 95       	ret

000019e0 <__unpack_f>:
    19e0:	fc 01       	movw	r30, r24
    19e2:	db 01       	movw	r26, r22
    19e4:	40 81       	ld	r20, Z
    19e6:	51 81       	ldd	r21, Z+1	; 0x01
    19e8:	22 81       	ldd	r18, Z+2	; 0x02
    19ea:	62 2f       	mov	r22, r18
    19ec:	6f 77       	andi	r22, 0x7F	; 127
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	22 1f       	adc	r18, r18
    19f2:	22 27       	eor	r18, r18
    19f4:	22 1f       	adc	r18, r18
    19f6:	93 81       	ldd	r25, Z+3	; 0x03
    19f8:	89 2f       	mov	r24, r25
    19fa:	88 0f       	add	r24, r24
    19fc:	82 2b       	or	r24, r18
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	99 1f       	adc	r25, r25
    1a04:	99 27       	eor	r25, r25
    1a06:	99 1f       	adc	r25, r25
    1a08:	11 96       	adiw	r26, 0x01	; 1
    1a0a:	9c 93       	st	X, r25
    1a0c:	11 97       	sbiw	r26, 0x01	; 1
    1a0e:	21 15       	cp	r18, r1
    1a10:	31 05       	cpc	r19, r1
    1a12:	a9 f5       	brne	.+106    	; 0x1a7e <__unpack_f+0x9e>
    1a14:	41 15       	cp	r20, r1
    1a16:	51 05       	cpc	r21, r1
    1a18:	61 05       	cpc	r22, r1
    1a1a:	71 05       	cpc	r23, r1
    1a1c:	11 f4       	brne	.+4      	; 0x1a22 <__unpack_f+0x42>
    1a1e:	82 e0       	ldi	r24, 0x02	; 2
    1a20:	37 c0       	rjmp	.+110    	; 0x1a90 <__unpack_f+0xb0>
    1a22:	82 e8       	ldi	r24, 0x82	; 130
    1a24:	9f ef       	ldi	r25, 0xFF	; 255
    1a26:	13 96       	adiw	r26, 0x03	; 3
    1a28:	9c 93       	st	X, r25
    1a2a:	8e 93       	st	-X, r24
    1a2c:	12 97       	sbiw	r26, 0x02	; 2
    1a2e:	9a 01       	movw	r18, r20
    1a30:	ab 01       	movw	r20, r22
    1a32:	67 e0       	ldi	r22, 0x07	; 7
    1a34:	22 0f       	add	r18, r18
    1a36:	33 1f       	adc	r19, r19
    1a38:	44 1f       	adc	r20, r20
    1a3a:	55 1f       	adc	r21, r21
    1a3c:	6a 95       	dec	r22
    1a3e:	d1 f7       	brne	.-12     	; 0x1a34 <__unpack_f+0x54>
    1a40:	83 e0       	ldi	r24, 0x03	; 3
    1a42:	8c 93       	st	X, r24
    1a44:	0d c0       	rjmp	.+26     	; 0x1a60 <__unpack_f+0x80>
    1a46:	22 0f       	add	r18, r18
    1a48:	33 1f       	adc	r19, r19
    1a4a:	44 1f       	adc	r20, r20
    1a4c:	55 1f       	adc	r21, r21
    1a4e:	12 96       	adiw	r26, 0x02	; 2
    1a50:	8d 91       	ld	r24, X+
    1a52:	9c 91       	ld	r25, X
    1a54:	13 97       	sbiw	r26, 0x03	; 3
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	13 96       	adiw	r26, 0x03	; 3
    1a5a:	9c 93       	st	X, r25
    1a5c:	8e 93       	st	-X, r24
    1a5e:	12 97       	sbiw	r26, 0x02	; 2
    1a60:	20 30       	cpi	r18, 0x00	; 0
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	38 07       	cpc	r19, r24
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	48 07       	cpc	r20, r24
    1a6a:	80 e4       	ldi	r24, 0x40	; 64
    1a6c:	58 07       	cpc	r21, r24
    1a6e:	58 f3       	brcs	.-42     	; 0x1a46 <__unpack_f+0x66>
    1a70:	14 96       	adiw	r26, 0x04	; 4
    1a72:	2d 93       	st	X+, r18
    1a74:	3d 93       	st	X+, r19
    1a76:	4d 93       	st	X+, r20
    1a78:	5c 93       	st	X, r21
    1a7a:	17 97       	sbiw	r26, 0x07	; 7
    1a7c:	08 95       	ret
    1a7e:	2f 3f       	cpi	r18, 0xFF	; 255
    1a80:	31 05       	cpc	r19, r1
    1a82:	79 f4       	brne	.+30     	; 0x1aa2 <__unpack_f+0xc2>
    1a84:	41 15       	cp	r20, r1
    1a86:	51 05       	cpc	r21, r1
    1a88:	61 05       	cpc	r22, r1
    1a8a:	71 05       	cpc	r23, r1
    1a8c:	19 f4       	brne	.+6      	; 0x1a94 <__unpack_f+0xb4>
    1a8e:	84 e0       	ldi	r24, 0x04	; 4
    1a90:	8c 93       	st	X, r24
    1a92:	08 95       	ret
    1a94:	64 ff       	sbrs	r22, 4
    1a96:	03 c0       	rjmp	.+6      	; 0x1a9e <__unpack_f+0xbe>
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	8c 93       	st	X, r24
    1a9c:	12 c0       	rjmp	.+36     	; 0x1ac2 <__unpack_f+0xe2>
    1a9e:	1c 92       	st	X, r1
    1aa0:	10 c0       	rjmp	.+32     	; 0x1ac2 <__unpack_f+0xe2>
    1aa2:	2f 57       	subi	r18, 0x7F	; 127
    1aa4:	30 40       	sbci	r19, 0x00	; 0
    1aa6:	13 96       	adiw	r26, 0x03	; 3
    1aa8:	3c 93       	st	X, r19
    1aaa:	2e 93       	st	-X, r18
    1aac:	12 97       	sbiw	r26, 0x02	; 2
    1aae:	83 e0       	ldi	r24, 0x03	; 3
    1ab0:	8c 93       	st	X, r24
    1ab2:	87 e0       	ldi	r24, 0x07	; 7
    1ab4:	44 0f       	add	r20, r20
    1ab6:	55 1f       	adc	r21, r21
    1ab8:	66 1f       	adc	r22, r22
    1aba:	77 1f       	adc	r23, r23
    1abc:	8a 95       	dec	r24
    1abe:	d1 f7       	brne	.-12     	; 0x1ab4 <__unpack_f+0xd4>
    1ac0:	70 64       	ori	r23, 0x40	; 64
    1ac2:	14 96       	adiw	r26, 0x04	; 4
    1ac4:	4d 93       	st	X+, r20
    1ac6:	5d 93       	st	X+, r21
    1ac8:	6d 93       	st	X+, r22
    1aca:	7c 93       	st	X, r23
    1acc:	17 97       	sbiw	r26, 0x07	; 7
    1ace:	08 95       	ret

00001ad0 <__fpcmp_parts_f>:
    1ad0:	1f 93       	push	r17
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	fb 01       	movw	r30, r22
    1ad6:	9c 91       	ld	r25, X
    1ad8:	92 30       	cpi	r25, 0x02	; 2
    1ada:	08 f4       	brcc	.+2      	; 0x1ade <__fpcmp_parts_f+0xe>
    1adc:	47 c0       	rjmp	.+142    	; 0x1b6c <__fpcmp_parts_f+0x9c>
    1ade:	80 81       	ld	r24, Z
    1ae0:	82 30       	cpi	r24, 0x02	; 2
    1ae2:	08 f4       	brcc	.+2      	; 0x1ae6 <__fpcmp_parts_f+0x16>
    1ae4:	43 c0       	rjmp	.+134    	; 0x1b6c <__fpcmp_parts_f+0x9c>
    1ae6:	94 30       	cpi	r25, 0x04	; 4
    1ae8:	51 f4       	brne	.+20     	; 0x1afe <__fpcmp_parts_f+0x2e>
    1aea:	11 96       	adiw	r26, 0x01	; 1
    1aec:	1c 91       	ld	r17, X
    1aee:	84 30       	cpi	r24, 0x04	; 4
    1af0:	99 f5       	brne	.+102    	; 0x1b58 <__fpcmp_parts_f+0x88>
    1af2:	81 81       	ldd	r24, Z+1	; 0x01
    1af4:	68 2f       	mov	r22, r24
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	61 1b       	sub	r22, r17
    1afa:	71 09       	sbc	r23, r1
    1afc:	3f c0       	rjmp	.+126    	; 0x1b7c <__fpcmp_parts_f+0xac>
    1afe:	84 30       	cpi	r24, 0x04	; 4
    1b00:	21 f0       	breq	.+8      	; 0x1b0a <__fpcmp_parts_f+0x3a>
    1b02:	92 30       	cpi	r25, 0x02	; 2
    1b04:	31 f4       	brne	.+12     	; 0x1b12 <__fpcmp_parts_f+0x42>
    1b06:	82 30       	cpi	r24, 0x02	; 2
    1b08:	b9 f1       	breq	.+110    	; 0x1b78 <__fpcmp_parts_f+0xa8>
    1b0a:	81 81       	ldd	r24, Z+1	; 0x01
    1b0c:	88 23       	and	r24, r24
    1b0e:	89 f1       	breq	.+98     	; 0x1b72 <__fpcmp_parts_f+0xa2>
    1b10:	2d c0       	rjmp	.+90     	; 0x1b6c <__fpcmp_parts_f+0x9c>
    1b12:	11 96       	adiw	r26, 0x01	; 1
    1b14:	1c 91       	ld	r17, X
    1b16:	11 97       	sbiw	r26, 0x01	; 1
    1b18:	82 30       	cpi	r24, 0x02	; 2
    1b1a:	f1 f0       	breq	.+60     	; 0x1b58 <__fpcmp_parts_f+0x88>
    1b1c:	81 81       	ldd	r24, Z+1	; 0x01
    1b1e:	18 17       	cp	r17, r24
    1b20:	d9 f4       	brne	.+54     	; 0x1b58 <__fpcmp_parts_f+0x88>
    1b22:	12 96       	adiw	r26, 0x02	; 2
    1b24:	2d 91       	ld	r18, X+
    1b26:	3c 91       	ld	r19, X
    1b28:	13 97       	sbiw	r26, 0x03	; 3
    1b2a:	82 81       	ldd	r24, Z+2	; 0x02
    1b2c:	93 81       	ldd	r25, Z+3	; 0x03
    1b2e:	82 17       	cp	r24, r18
    1b30:	93 07       	cpc	r25, r19
    1b32:	94 f0       	brlt	.+36     	; 0x1b58 <__fpcmp_parts_f+0x88>
    1b34:	28 17       	cp	r18, r24
    1b36:	39 07       	cpc	r19, r25
    1b38:	bc f0       	brlt	.+46     	; 0x1b68 <__fpcmp_parts_f+0x98>
    1b3a:	14 96       	adiw	r26, 0x04	; 4
    1b3c:	8d 91       	ld	r24, X+
    1b3e:	9d 91       	ld	r25, X+
    1b40:	0d 90       	ld	r0, X+
    1b42:	bc 91       	ld	r27, X
    1b44:	a0 2d       	mov	r26, r0
    1b46:	24 81       	ldd	r18, Z+4	; 0x04
    1b48:	35 81       	ldd	r19, Z+5	; 0x05
    1b4a:	46 81       	ldd	r20, Z+6	; 0x06
    1b4c:	57 81       	ldd	r21, Z+7	; 0x07
    1b4e:	28 17       	cp	r18, r24
    1b50:	39 07       	cpc	r19, r25
    1b52:	4a 07       	cpc	r20, r26
    1b54:	5b 07       	cpc	r21, r27
    1b56:	18 f4       	brcc	.+6      	; 0x1b5e <__fpcmp_parts_f+0x8e>
    1b58:	11 23       	and	r17, r17
    1b5a:	41 f0       	breq	.+16     	; 0x1b6c <__fpcmp_parts_f+0x9c>
    1b5c:	0a c0       	rjmp	.+20     	; 0x1b72 <__fpcmp_parts_f+0xa2>
    1b5e:	82 17       	cp	r24, r18
    1b60:	93 07       	cpc	r25, r19
    1b62:	a4 07       	cpc	r26, r20
    1b64:	b5 07       	cpc	r27, r21
    1b66:	40 f4       	brcc	.+16     	; 0x1b78 <__fpcmp_parts_f+0xa8>
    1b68:	11 23       	and	r17, r17
    1b6a:	19 f0       	breq	.+6      	; 0x1b72 <__fpcmp_parts_f+0xa2>
    1b6c:	61 e0       	ldi	r22, 0x01	; 1
    1b6e:	70 e0       	ldi	r23, 0x00	; 0
    1b70:	05 c0       	rjmp	.+10     	; 0x1b7c <__fpcmp_parts_f+0xac>
    1b72:	6f ef       	ldi	r22, 0xFF	; 255
    1b74:	7f ef       	ldi	r23, 0xFF	; 255
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <__fpcmp_parts_f+0xac>
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	1f 91       	pop	r17
    1b80:	08 95       	ret

00001b82 <itoa>:
    1b82:	fb 01       	movw	r30, r22
    1b84:	9f 01       	movw	r18, r30
    1b86:	e8 94       	clt
    1b88:	42 30       	cpi	r20, 0x02	; 2
    1b8a:	c4 f0       	brlt	.+48     	; 0x1bbc <itoa+0x3a>
    1b8c:	45 32       	cpi	r20, 0x25	; 37
    1b8e:	b4 f4       	brge	.+44     	; 0x1bbc <itoa+0x3a>
    1b90:	4a 30       	cpi	r20, 0x0A	; 10
    1b92:	29 f4       	brne	.+10     	; 0x1b9e <itoa+0x1c>
    1b94:	97 fb       	bst	r25, 7
    1b96:	1e f4       	brtc	.+6      	; 0x1b9e <itoa+0x1c>
    1b98:	90 95       	com	r25
    1b9a:	81 95       	neg	r24
    1b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b9e:	64 2f       	mov	r22, r20
    1ba0:	77 27       	eor	r23, r23
    1ba2:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__udivmodhi4>
    1ba6:	80 5d       	subi	r24, 0xD0	; 208
    1ba8:	8a 33       	cpi	r24, 0x3A	; 58
    1baa:	0c f0       	brlt	.+2      	; 0x1bae <itoa+0x2c>
    1bac:	89 5d       	subi	r24, 0xD9	; 217
    1bae:	81 93       	st	Z+, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	a1 f7       	brne	.-24     	; 0x1b9e <itoa+0x1c>
    1bb6:	16 f4       	brtc	.+4      	; 0x1bbc <itoa+0x3a>
    1bb8:	5d e2       	ldi	r21, 0x2D	; 45
    1bba:	51 93       	st	Z+, r21
    1bbc:	10 82       	st	Z, r1
    1bbe:	c9 01       	movw	r24, r18
    1bc0:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <strrev>

00001bc4 <strrev>:
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	67 2f       	mov	r22, r23
    1bca:	71 91       	ld	r23, Z+
    1bcc:	77 23       	and	r23, r23
    1bce:	e1 f7       	brne	.-8      	; 0x1bc8 <strrev+0x4>
    1bd0:	32 97       	sbiw	r30, 0x02	; 2
    1bd2:	04 c0       	rjmp	.+8      	; 0x1bdc <strrev+0x18>
    1bd4:	7c 91       	ld	r23, X
    1bd6:	6d 93       	st	X+, r22
    1bd8:	70 83       	st	Z, r23
    1bda:	62 91       	ld	r22, -Z
    1bdc:	ae 17       	cp	r26, r30
    1bde:	bf 07       	cpc	r27, r31
    1be0:	c8 f3       	brcs	.-14     	; 0x1bd4 <strrev+0x10>
    1be2:	08 95       	ret

00001be4 <__udivmodqi4>:
    1be4:	99 1b       	sub	r25, r25
    1be6:	79 e0       	ldi	r23, 0x09	; 9
    1be8:	04 c0       	rjmp	.+8      	; 0x1bf2 <__udivmodqi4_ep>

00001bea <__udivmodqi4_loop>:
    1bea:	99 1f       	adc	r25, r25
    1bec:	96 17       	cp	r25, r22
    1bee:	08 f0       	brcs	.+2      	; 0x1bf2 <__udivmodqi4_ep>
    1bf0:	96 1b       	sub	r25, r22

00001bf2 <__udivmodqi4_ep>:
    1bf2:	88 1f       	adc	r24, r24
    1bf4:	7a 95       	dec	r23
    1bf6:	c9 f7       	brne	.-14     	; 0x1bea <__udivmodqi4_loop>
    1bf8:	80 95       	com	r24
    1bfa:	08 95       	ret

00001bfc <__prologue_saves__>:
    1bfc:	2f 92       	push	r2
    1bfe:	3f 92       	push	r3
    1c00:	4f 92       	push	r4
    1c02:	5f 92       	push	r5
    1c04:	6f 92       	push	r6
    1c06:	7f 92       	push	r7
    1c08:	8f 92       	push	r8
    1c0a:	9f 92       	push	r9
    1c0c:	af 92       	push	r10
    1c0e:	bf 92       	push	r11
    1c10:	cf 92       	push	r12
    1c12:	df 92       	push	r13
    1c14:	ef 92       	push	r14
    1c16:	ff 92       	push	r15
    1c18:	0f 93       	push	r16
    1c1a:	1f 93       	push	r17
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	ca 1b       	sub	r28, r26
    1c26:	db 0b       	sbc	r29, r27
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	09 94       	ijmp

00001c34 <__epilogue_restores__>:
    1c34:	2a 88       	ldd	r2, Y+18	; 0x12
    1c36:	39 88       	ldd	r3, Y+17	; 0x11
    1c38:	48 88       	ldd	r4, Y+16	; 0x10
    1c3a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c3c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c3e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c40:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c42:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c44:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c46:	b9 84       	ldd	r11, Y+9	; 0x09
    1c48:	c8 84       	ldd	r12, Y+8	; 0x08
    1c4a:	df 80       	ldd	r13, Y+7	; 0x07
    1c4c:	ee 80       	ldd	r14, Y+6	; 0x06
    1c4e:	fd 80       	ldd	r15, Y+5	; 0x05
    1c50:	0c 81       	ldd	r16, Y+4	; 0x04
    1c52:	1b 81       	ldd	r17, Y+3	; 0x03
    1c54:	aa 81       	ldd	r26, Y+2	; 0x02
    1c56:	b9 81       	ldd	r27, Y+1	; 0x01
    1c58:	ce 0f       	add	r28, r30
    1c5a:	d1 1d       	adc	r29, r1
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	de bf       	out	0x3e, r29	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	cd bf       	out	0x3d, r28	; 61
    1c66:	ed 01       	movw	r28, r26
    1c68:	08 95       	ret

00001c6a <__udivmodhi4>:
    1c6a:	aa 1b       	sub	r26, r26
    1c6c:	bb 1b       	sub	r27, r27
    1c6e:	51 e1       	ldi	r21, 0x11	; 17
    1c70:	07 c0       	rjmp	.+14     	; 0x1c80 <__udivmodhi4_ep>

00001c72 <__udivmodhi4_loop>:
    1c72:	aa 1f       	adc	r26, r26
    1c74:	bb 1f       	adc	r27, r27
    1c76:	a6 17       	cp	r26, r22
    1c78:	b7 07       	cpc	r27, r23
    1c7a:	10 f0       	brcs	.+4      	; 0x1c80 <__udivmodhi4_ep>
    1c7c:	a6 1b       	sub	r26, r22
    1c7e:	b7 0b       	sbc	r27, r23

00001c80 <__udivmodhi4_ep>:
    1c80:	88 1f       	adc	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	5a 95       	dec	r21
    1c86:	a9 f7       	brne	.-22     	; 0x1c72 <__udivmodhi4_loop>
    1c88:	80 95       	com	r24
    1c8a:	90 95       	com	r25
    1c8c:	bc 01       	movw	r22, r24
    1c8e:	cd 01       	movw	r24, r26
    1c90:	08 95       	ret

00001c92 <_exit>:
    1c92:	f8 94       	cli

00001c94 <__stop_program>:
    1c94:	ff cf       	rjmp	.-2      	; 0x1c94 <__stop_program>
